JSON {"inputArgs":["[AgentRuntime] Process working directory: /mnt/data1/nix/time/2025/03/14/cloud-deployment-eliza/packages/plugin-dbml"]}
JSON {"inputArgs":["Loaded .env file from: /mnt/data1/nix/time/2025/03/14/cloud-deployment-eliza/.env"]}
JSON {"inputArgs":["Success: Agent ID: da39a3ee-5e6b-0b0d-b255-bfef95601890"]}
JSON {"inputArgs":["Database connection established successfully"]}
JSON {"inputArgs":["Success: Database adapter registered successfully."]}
SCHEMA [
  PgTable {
    [Symbol(drizzle:Name)]: "agents",
    [Symbol(drizzle:OriginalName)]: "agents",
    [Symbol(drizzle:Schema)]: undefined,
    [Symbol(drizzle:Columns)]: {
      id: PgUUID {
        name: "id",
        keyAsName: false,
        primary: true,
        notNull: true,
        default: SQL {
          decoder: {
            mapFromDriverValue: [Function: mapFromDriverValue],
          },
          shouldInlineParams: false,
          queryChunks: [
            StringChunk {
              value: [ "gen_random_uuid()" ],
              getSQL: [Function: getSQL],
            }
          ],
          append: [Function: append],
          toQuery: [Function: toQuery],
          buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
          mapInlineParam: [Function: mapInlineParam],
          getSQL: [Function: getSQL],
          as: [Function: as],
          mapWith: [Function: mapWith],
          inlineParams: [Function: inlineParams],
          if: [Function: if],
        },
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: true,
        isUnique: false,
        uniqueName: "agents_id_unique",
        uniqueType: undefined,
        dataType: "string",
        columnType: "PgUUID",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "id",
          keyAsName: false,
          notNull: true,
          default: SQL {
            decoder: {
              mapFromDriverValue: [Function: mapFromDriverValue],
            },
            shouldInlineParams: false,
            queryChunks: [
              StringChunk {
                value: [ "gen_random_uuid()" ],
                getSQL: [Function: getSQL],
              }
            ],
            append: [Function: append],
            toQuery: [Function: toQuery],
            buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
            mapInlineParam: [Function: mapInlineParam],
            getSQL: [Function: getSQL],
            as: [Function: as],
            mapWith: [Function: mapWith],
            inlineParams: [Function: inlineParams],
            if: [Function: if],
          },
          hasDefault: true,
          primaryKey: true,
          isUnique: false,
          uniqueName: "agents_id_unique",
          uniqueType: undefined,
          dataType: "string",
          columnType: "PgUUID",
          generated: undefined,
        },
        table: [Circular],
        getSQLType: [Function: getSQLType],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      enabled: PgBoolean {
        name: "enabled",
        keyAsName: false,
        primary: false,
        notNull: true,
        default: true,
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: true,
        isUnique: false,
        uniqueName: "agents_enabled_unique",
        uniqueType: undefined,
        dataType: "boolean",
        columnType: "PgBoolean",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "enabled",
          keyAsName: false,
          notNull: true,
          default: true,
          hasDefault: true,
          primaryKey: false,
          isUnique: false,
          uniqueName: "agents_enabled_unique",
          uniqueType: undefined,
          dataType: "boolean",
          columnType: "PgBoolean",
          generated: undefined,
        },
        table: [Circular],
        getSQLType: [Function: getSQLType],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      createdAt: PgCustomColumn {
        name: "createdAt",
        keyAsName: false,
        primary: false,
        notNull: true,
        default: SQL {
          decoder: {
            mapFromDriverValue: [Function: mapFromDriverValue],
          },
          shouldInlineParams: false,
          queryChunks: [
            StringChunk {
              value: [ "now()" ],
              getSQL: [Function: getSQL],
            }
          ],
          append: [Function: append],
          toQuery: [Function: toQuery],
          buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
          mapInlineParam: [Function: mapInlineParam],
          getSQL: [Function: getSQL],
          as: [Function: as],
          mapWith: [Function: mapWith],
          inlineParams: [Function: inlineParams],
          if: [Function: if],
        },
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: true,
        isUnique: false,
        uniqueName: "agents_createdAt_unique",
        uniqueType: undefined,
        dataType: "custom",
        columnType: "PgCustomColumn",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "createdAt",
          keyAsName: false,
          notNull: true,
          default: SQL {
            decoder: {
              mapFromDriverValue: [Function: mapFromDriverValue],
            },
            shouldInlineParams: false,
            queryChunks: [
              StringChunk {
                value: [ "now()" ],
                getSQL: [Function: getSQL],
              }
            ],
            append: [Function: append],
            toQuery: [Function: toQuery],
            buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
            mapInlineParam: [Function: mapInlineParam],
            getSQL: [Function: getSQL],
            as: [Function: as],
            mapWith: [Function: mapWith],
            inlineParams: [Function: inlineParams],
            if: [Function: if],
          },
          hasDefault: true,
          primaryKey: false,
          isUnique: false,
          uniqueName: "agents_createdAt_unique",
          uniqueType: undefined,
          dataType: "custom",
          columnType: "PgCustomColumn",
          generated: undefined,
          fieldConfig: undefined,
          customTypeParams: {
            dataType: [Function: dataType],
            toDriver: [Function: toDriver],
            fromDriver: [Function: fromDriver],
          },
        },
        table: [Circular],
        sqlName: "timestamptz",
        mapTo: [Function: toDriver],
        mapFrom: [Function: fromDriver],
        getSQLType: [Function: getSQLType],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      updatedAt: PgCustomColumn {
        name: "updatedAt",
        keyAsName: false,
        primary: false,
        notNull: true,
        default: SQL {
          decoder: {
            mapFromDriverValue: [Function: mapFromDriverValue],
          },
          shouldInlineParams: false,
          queryChunks: [
            StringChunk {
              value: [ "now()" ],
              getSQL: [Function: getSQL],
            }
          ],
          append: [Function: append],
          toQuery: [Function: toQuery],
          buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
          mapInlineParam: [Function: mapInlineParam],
          getSQL: [Function: getSQL],
          as: [Function: as],
          mapWith: [Function: mapWith],
          inlineParams: [Function: inlineParams],
          if: [Function: if],
        },
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: true,
        isUnique: false,
        uniqueName: "agents_updatedAt_unique",
        uniqueType: undefined,
        dataType: "custom",
        columnType: "PgCustomColumn",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "updatedAt",
          keyAsName: false,
          notNull: true,
          default: SQL {
            decoder: {
              mapFromDriverValue: [Function: mapFromDriverValue],
            },
            shouldInlineParams: false,
            queryChunks: [
              StringChunk {
                value: [ "now()" ],
                getSQL: [Function: getSQL],
              }
            ],
            append: [Function: append],
            toQuery: [Function: toQuery],
            buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
            mapInlineParam: [Function: mapInlineParam],
            getSQL: [Function: getSQL],
            as: [Function: as],
            mapWith: [Function: mapWith],
            inlineParams: [Function: inlineParams],
            if: [Function: if],
          },
          hasDefault: true,
          primaryKey: false,
          isUnique: false,
          uniqueName: "agents_updatedAt_unique",
          uniqueType: undefined,
          dataType: "custom",
          columnType: "PgCustomColumn",
          generated: undefined,
          fieldConfig: undefined,
          customTypeParams: {
            dataType: [Function: dataType],
            toDriver: [Function: toDriver],
            fromDriver: [Function: fromDriver],
          },
        },
        table: [Circular],
        sqlName: "timestamptz",
        mapTo: [Function: toDriver],
        mapFrom: [Function: fromDriver],
        getSQLType: [Function: getSQLType],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      name: PgText {
        name: "name",
        keyAsName: false,
        primary: false,
        notNull: false,
        default: undefined,
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: false,
        isUnique: false,
        uniqueName: "agents_name_unique",
        uniqueType: undefined,
        dataType: "string",
        columnType: "PgText",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "name",
          keyAsName: false,
          notNull: false,
          default: undefined,
          hasDefault: false,
          primaryKey: false,
          isUnique: false,
          uniqueName: "agents_name_unique",
          uniqueType: undefined,
          dataType: "string",
          columnType: "PgText",
          generated: undefined,
          enumValues: undefined,
        },
        table: [Circular],
        getSQLType: [Function: getSQLType],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      username: PgText {
        name: "username",
        keyAsName: false,
        primary: false,
        notNull: false,
        default: undefined,
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: false,
        isUnique: false,
        uniqueName: "agents_username_unique",
        uniqueType: undefined,
        dataType: "string",
        columnType: "PgText",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "username",
          keyAsName: false,
          notNull: false,
          default: undefined,
          hasDefault: false,
          primaryKey: false,
          isUnique: false,
          uniqueName: "agents_username_unique",
          uniqueType: undefined,
          dataType: "string",
          columnType: "PgText",
          generated: undefined,
          enumValues: undefined,
        },
        table: [Circular],
        getSQLType: [Function: getSQLType],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      system: PgText {
        name: "system",
        keyAsName: false,
        primary: false,
        notNull: false,
        default: undefined,
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: false,
        isUnique: false,
        uniqueName: "agents_system_unique",
        uniqueType: undefined,
        dataType: "string",
        columnType: "PgText",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "system",
          keyAsName: false,
          notNull: false,
          default: undefined,
          hasDefault: false,
          primaryKey: false,
          isUnique: false,
          uniqueName: "agents_system_unique",
          uniqueType: undefined,
          dataType: "string",
          columnType: "PgText",
          generated: undefined,
          enumValues: undefined,
        },
        table: [Circular],
        getSQLType: [Function: getSQLType],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      bio: PgJsonb {
        name: "bio",
        keyAsName: false,
        primary: false,
        notNull: true,
        default: undefined,
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: false,
        isUnique: false,
        uniqueName: "agents_bio_unique",
        uniqueType: undefined,
        dataType: "json",
        columnType: "PgJsonb",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "bio",
          keyAsName: false,
          notNull: true,
          default: undefined,
          hasDefault: false,
          primaryKey: false,
          isUnique: false,
          uniqueName: "agents_bio_unique",
          uniqueType: undefined,
          dataType: "json",
          columnType: "PgJsonb",
          generated: undefined,
        },
        table: [Circular],
        getSQLType: [Function: getSQLType],
        mapToDriverValue: [Function: mapToDriverValue],
        mapFromDriverValue: [Function: mapFromDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      messageExamples: PgJsonb {
        name: "message_examples",
        keyAsName: false,
        primary: false,
        notNull: false,
        default: SQL {
          decoder: {
            mapFromDriverValue: [Function: mapFromDriverValue],
          },
          shouldInlineParams: false,
          queryChunks: [
            StringChunk {
              value: [ "'[]'::jsonb" ],
              getSQL: [Function: getSQL],
            }
          ],
          append: [Function: append],
          toQuery: [Function: toQuery],
          buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
          mapInlineParam: [Function: mapInlineParam],
          getSQL: [Function: getSQL],
          as: [Function: as],
          mapWith: [Function: mapWith],
          inlineParams: [Function: inlineParams],
          if: [Function: if],
        },
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: true,
        isUnique: false,
        uniqueName: "agents_message_examples_unique",
        uniqueType: undefined,
        dataType: "json",
        columnType: "PgJsonb",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "message_examples",
          keyAsName: false,
          notNull: false,
          default: SQL {
            decoder: {
              mapFromDriverValue: [Function: mapFromDriverValue],
            },
            shouldInlineParams: false,
            queryChunks: [
              StringChunk {
                value: [ "'[]'::jsonb" ],
                getSQL: [Function: getSQL],
              }
            ],
            append: [Function: append],
            toQuery: [Function: toQuery],
            buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
            mapInlineParam: [Function: mapInlineParam],
            getSQL: [Function: getSQL],
            as: [Function: as],
            mapWith: [Function: mapWith],
            inlineParams: [Function: inlineParams],
            if: [Function: if],
          },
          hasDefault: true,
          primaryKey: false,
          isUnique: false,
          uniqueName: "agents_message_examples_unique",
          uniqueType: undefined,
          dataType: "json",
          columnType: "PgJsonb",
          generated: undefined,
        },
        table: [Circular],
        getSQLType: [Function: getSQLType],
        mapToDriverValue: [Function: mapToDriverValue],
        mapFromDriverValue: [Function: mapFromDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      postExamples: PgJsonb {
        name: "post_examples",
        keyAsName: false,
        primary: false,
        notNull: false,
        default: SQL {
          decoder: {
            mapFromDriverValue: [Function: mapFromDriverValue],
          },
          shouldInlineParams: false,
          queryChunks: [
            StringChunk {
              value: [ "'[]'::jsonb" ],
              getSQL: [Function: getSQL],
            }
          ],
          append: [Function: append],
          toQuery: [Function: toQuery],
          buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
          mapInlineParam: [Function: mapInlineParam],
          getSQL: [Function: getSQL],
          as: [Function: as],
          mapWith: [Function: mapWith],
          inlineParams: [Function: inlineParams],
          if: [Function: if],
        },
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: true,
        isUnique: false,
        uniqueName: "agents_post_examples_unique",
        uniqueType: undefined,
        dataType: "json",
        columnType: "PgJsonb",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "post_examples",
          keyAsName: false,
          notNull: false,
          default: SQL {
            decoder: {
              mapFromDriverValue: [Function: mapFromDriverValue],
            },
            shouldInlineParams: false,
            queryChunks: [
              StringChunk {
                value: [ "'[]'::jsonb" ],
                getSQL: [Function: getSQL],
              }
            ],
            append: [Function: append],
            toQuery: [Function: toQuery],
            buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
            mapInlineParam: [Function: mapInlineParam],
            getSQL: [Function: getSQL],
            as: [Function: as],
            mapWith: [Function: mapWith],
            inlineParams: [Function: inlineParams],
            if: [Function: if],
          },
          hasDefault: true,
          primaryKey: false,
          isUnique: false,
          uniqueName: "agents_post_examples_unique",
          uniqueType: undefined,
          dataType: "json",
          columnType: "PgJsonb",
          generated: undefined,
        },
        table: [Circular],
        getSQLType: [Function: getSQLType],
        mapToDriverValue: [Function: mapToDriverValue],
        mapFromDriverValue: [Function: mapFromDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      topics: PgJsonb {
        name: "topics",
        keyAsName: false,
        primary: false,
        notNull: false,
        default: SQL {
          decoder: {
            mapFromDriverValue: [Function: mapFromDriverValue],
          },
          shouldInlineParams: false,
          queryChunks: [
            StringChunk {
              value: [ "'[]'::jsonb" ],
              getSQL: [Function: getSQL],
            }
          ],
          append: [Function: append],
          toQuery: [Function: toQuery],
          buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
          mapInlineParam: [Function: mapInlineParam],
          getSQL: [Function: getSQL],
          as: [Function: as],
          mapWith: [Function: mapWith],
          inlineParams: [Function: inlineParams],
          if: [Function: if],
        },
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: true,
        isUnique: false,
        uniqueName: "agents_topics_unique",
        uniqueType: undefined,
        dataType: "json",
        columnType: "PgJsonb",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "topics",
          keyAsName: false,
          notNull: false,
          default: SQL {
            decoder: {
              mapFromDriverValue: [Function: mapFromDriverValue],
            },
            shouldInlineParams: false,
            queryChunks: [
              StringChunk {
                value: [ "'[]'::jsonb" ],
                getSQL: [Function: getSQL],
              }
            ],
            append: [Function: append],
            toQuery: [Function: toQuery],
            buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
            mapInlineParam: [Function: mapInlineParam],
            getSQL: [Function: getSQL],
            as: [Function: as],
            mapWith: [Function: mapWith],
            inlineParams: [Function: inlineParams],
            if: [Function: if],
          },
          hasDefault: true,
          primaryKey: false,
          isUnique: false,
          uniqueName: "agents_topics_unique",
          uniqueType: undefined,
          dataType: "json",
          columnType: "PgJsonb",
          generated: undefined,
        },
        table: [Circular],
        getSQLType: [Function: getSQLType],
        mapToDriverValue: [Function: mapToDriverValue],
        mapFromDriverValue: [Function: mapFromDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      adjectives: PgJsonb {
        name: "adjectives",
        keyAsName: false,
        primary: false,
        notNull: false,
        default: SQL {
          decoder: {
            mapFromDriverValue: [Function: mapFromDriverValue],
          },
          shouldInlineParams: false,
          queryChunks: [
            StringChunk {
              value: [ "'[]'::jsonb" ],
              getSQL: [Function: getSQL],
            }
          ],
          append: [Function: append],
          toQuery: [Function: toQuery],
          buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
          mapInlineParam: [Function: mapInlineParam],
          getSQL: [Function: getSQL],
          as: [Function: as],
          mapWith: [Function: mapWith],
          inlineParams: [Function: inlineParams],
          if: [Function: if],
        },
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: true,
        isUnique: false,
        uniqueName: "agents_adjectives_unique",
        uniqueType: undefined,
        dataType: "json",
        columnType: "PgJsonb",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "adjectives",
          keyAsName: false,
          notNull: false,
          default: SQL {
            decoder: {
              mapFromDriverValue: [Function: mapFromDriverValue],
            },
            shouldInlineParams: false,
            queryChunks: [
              StringChunk {
                value: [ "'[]'::jsonb" ],
                getSQL: [Function: getSQL],
              }
            ],
            append: [Function: append],
            toQuery: [Function: toQuery],
            buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
            mapInlineParam: [Function: mapInlineParam],
            getSQL: [Function: getSQL],
            as: [Function: as],
            mapWith: [Function: mapWith],
            inlineParams: [Function: inlineParams],
            if: [Function: if],
          },
          hasDefault: true,
          primaryKey: false,
          isUnique: false,
          uniqueName: "agents_adjectives_unique",
          uniqueType: undefined,
          dataType: "json",
          columnType: "PgJsonb",
          generated: undefined,
        },
        table: [Circular],
        getSQLType: [Function: getSQLType],
        mapToDriverValue: [Function: mapToDriverValue],
        mapFromDriverValue: [Function: mapFromDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      knowledge: PgJsonb {
        name: "knowledge",
        keyAsName: false,
        primary: false,
        notNull: false,
        default: SQL {
          decoder: {
            mapFromDriverValue: [Function: mapFromDriverValue],
          },
          shouldInlineParams: false,
          queryChunks: [
            StringChunk {
              value: [ "'[]'::jsonb" ],
              getSQL: [Function: getSQL],
            }
          ],
          append: [Function: append],
          toQuery: [Function: toQuery],
          buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
          mapInlineParam: [Function: mapInlineParam],
          getSQL: [Function: getSQL],
          as: [Function: as],
          mapWith: [Function: mapWith],
          inlineParams: [Function: inlineParams],
          if: [Function: if],
        },
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: true,
        isUnique: false,
        uniqueName: "agents_knowledge_unique",
        uniqueType: undefined,
        dataType: "json",
        columnType: "PgJsonb",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "knowledge",
          keyAsName: false,
          notNull: false,
          default: SQL {
            decoder: {
              mapFromDriverValue: [Function: mapFromDriverValue],
            },
            shouldInlineParams: false,
            queryChunks: [
              StringChunk {
                value: [ "'[]'::jsonb" ],
                getSQL: [Function: getSQL],
              }
            ],
            append: [Function: append],
            toQuery: [Function: toQuery],
            buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
            mapInlineParam: [Function: mapInlineParam],
            getSQL: [Function: getSQL],
            as: [Function: as],
            mapWith: [Function: mapWith],
            inlineParams: [Function: inlineParams],
            if: [Function: if],
          },
          hasDefault: true,
          primaryKey: false,
          isUnique: false,
          uniqueName: "agents_knowledge_unique",
          uniqueType: undefined,
          dataType: "json",
          columnType: "PgJsonb",
          generated: undefined,
        },
        table: [Circular],
        getSQLType: [Function: getSQLType],
        mapToDriverValue: [Function: mapToDriverValue],
        mapFromDriverValue: [Function: mapFromDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      plugins: PgJsonb {
        name: "plugins",
        keyAsName: false,
        primary: false,
        notNull: false,
        default: SQL {
          decoder: {
            mapFromDriverValue: [Function: mapFromDriverValue],
          },
          shouldInlineParams: false,
          queryChunks: [
            StringChunk {
              value: [ "'[]'::jsonb" ],
              getSQL: [Function: getSQL],
            }
          ],
          append: [Function: append],
          toQuery: [Function: toQuery],
          buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
          mapInlineParam: [Function: mapInlineParam],
          getSQL: [Function: getSQL],
          as: [Function: as],
          mapWith: [Function: mapWith],
          inlineParams: [Function: inlineParams],
          if: [Function: if],
        },
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: true,
        isUnique: false,
        uniqueName: "agents_plugins_unique",
        uniqueType: undefined,
        dataType: "json",
        columnType: "PgJsonb",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "plugins",
          keyAsName: false,
          notNull: false,
          default: SQL {
            decoder: {
              mapFromDriverValue: [Function: mapFromDriverValue],
            },
            shouldInlineParams: false,
            queryChunks: [
              StringChunk {
                value: [ "'[]'::jsonb" ],
                getSQL: [Function: getSQL],
              }
            ],
            append: [Function: append],
            toQuery: [Function: toQuery],
            buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
            mapInlineParam: [Function: mapInlineParam],
            getSQL: [Function: getSQL],
            as: [Function: as],
            mapWith: [Function: mapWith],
            inlineParams: [Function: inlineParams],
            if: [Function: if],
          },
          hasDefault: true,
          primaryKey: false,
          isUnique: false,
          uniqueName: "agents_plugins_unique",
          uniqueType: undefined,
          dataType: "json",
          columnType: "PgJsonb",
          generated: undefined,
        },
        table: [Circular],
        getSQLType: [Function: getSQLType],
        mapToDriverValue: [Function: mapToDriverValue],
        mapFromDriverValue: [Function: mapFromDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      settings: PgJsonb {
        name: "settings",
        keyAsName: false,
        primary: false,
        notNull: false,
        default: SQL {
          decoder: {
            mapFromDriverValue: [Function: mapFromDriverValue],
          },
          shouldInlineParams: false,
          queryChunks: [
            StringChunk {
              value: [ "'{}'::jsonb" ],
              getSQL: [Function: getSQL],
            }
          ],
          append: [Function: append],
          toQuery: [Function: toQuery],
          buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
          mapInlineParam: [Function: mapInlineParam],
          getSQL: [Function: getSQL],
          as: [Function: as],
          mapWith: [Function: mapWith],
          inlineParams: [Function: inlineParams],
          if: [Function: if],
        },
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: true,
        isUnique: false,
        uniqueName: "agents_settings_unique",
        uniqueType: undefined,
        dataType: "json",
        columnType: "PgJsonb",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "settings",
          keyAsName: false,
          notNull: false,
          default: SQL {
            decoder: {
              mapFromDriverValue: [Function: mapFromDriverValue],
            },
            shouldInlineParams: false,
            queryChunks: [
              StringChunk {
                value: [ "'{}'::jsonb" ],
                getSQL: [Function: getSQL],
              }
            ],
            append: [Function: append],
            toQuery: [Function: toQuery],
            buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
            mapInlineParam: [Function: mapInlineParam],
            getSQL: [Function: getSQL],
            as: [Function: as],
            mapWith: [Function: mapWith],
            inlineParams: [Function: inlineParams],
            if: [Function: if],
          },
          hasDefault: true,
          primaryKey: false,
          isUnique: false,
          uniqueName: "agents_settings_unique",
          uniqueType: undefined,
          dataType: "json",
          columnType: "PgJsonb",
          generated: undefined,
        },
        table: [Circular],
        getSQLType: [Function: getSQLType],
        mapToDriverValue: [Function: mapToDriverValue],
        mapFromDriverValue: [Function: mapFromDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      style: PgJsonb {
        name: "style",
        keyAsName: false,
        primary: false,
        notNull: false,
        default: SQL {
          decoder: {
            mapFromDriverValue: [Function: mapFromDriverValue],
          },
          shouldInlineParams: false,
          queryChunks: [
            StringChunk {
              value: [ "'{}'::jsonb" ],
              getSQL: [Function: getSQL],
            }
          ],
          append: [Function: append],
          toQuery: [Function: toQuery],
          buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
          mapInlineParam: [Function: mapInlineParam],
          getSQL: [Function: getSQL],
          as: [Function: as],
          mapWith: [Function: mapWith],
          inlineParams: [Function: inlineParams],
          if: [Function: if],
        },
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: true,
        isUnique: false,
        uniqueName: "agents_style_unique",
        uniqueType: undefined,
        dataType: "json",
        columnType: "PgJsonb",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "style",
          keyAsName: false,
          notNull: false,
          default: SQL {
            decoder: {
              mapFromDriverValue: [Function: mapFromDriverValue],
            },
            shouldInlineParams: false,
            queryChunks: [
              StringChunk {
                value: [ "'{}'::jsonb" ],
                getSQL: [Function: getSQL],
              }
            ],
            append: [Function: append],
            toQuery: [Function: toQuery],
            buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
            mapInlineParam: [Function: mapInlineParam],
            getSQL: [Function: getSQL],
            as: [Function: as],
            mapWith: [Function: mapWith],
            inlineParams: [Function: inlineParams],
            if: [Function: if],
          },
          hasDefault: true,
          primaryKey: false,
          isUnique: false,
          uniqueName: "agents_style_unique",
          uniqueType: undefined,
          dataType: "json",
          columnType: "PgJsonb",
          generated: undefined,
        },
        table: [Circular],
        getSQLType: [Function: getSQLType],
        mapToDriverValue: [Function: mapToDriverValue],
        mapFromDriverValue: [Function: mapFromDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
    },
    [Symbol(drizzle:ExtraConfigColumns)]: {
      id: ExtraConfigColumn {
        name: "id",
        keyAsName: false,
        primary: true,
        notNull: true,
        default: SQL {
          decoder: {
            mapFromDriverValue: [Function: mapFromDriverValue],
          },
          shouldInlineParams: false,
          queryChunks: [
            StringChunk {
              value: [ "gen_random_uuid()" ],
              getSQL: [Function: getSQL],
            }
          ],
          append: [Function: append],
          toQuery: [Function: toQuery],
          buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
          mapInlineParam: [Function: mapInlineParam],
          getSQL: [Function: getSQL],
          as: [Function: as],
          mapWith: [Function: mapWith],
          inlineParams: [Function: inlineParams],
          if: [Function: if],
        },
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: true,
        isUnique: false,
        uniqueName: "agents_id_unique",
        uniqueType: undefined,
        dataType: "string",
        columnType: "PgUUID",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "id",
          keyAsName: false,
          notNull: true,
          default: SQL {
            decoder: {
              mapFromDriverValue: [Function: mapFromDriverValue],
            },
            shouldInlineParams: false,
            queryChunks: [
              StringChunk {
                value: [ "gen_random_uuid()" ],
                getSQL: [Function: getSQL],
              }
            ],
            append: [Function: append],
            toQuery: [Function: toQuery],
            buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
            mapInlineParam: [Function: mapInlineParam],
            getSQL: [Function: getSQL],
            as: [Function: as],
            mapWith: [Function: mapWith],
            inlineParams: [Function: inlineParams],
            if: [Function: if],
          },
          hasDefault: true,
          primaryKey: true,
          isUnique: false,
          uniqueName: "agents_id_unique",
          uniqueType: undefined,
          dataType: "string",
          columnType: "PgUUID",
          generated: undefined,
        },
        table: [Circular],
        indexConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        defaultConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        getSQLType: [Function: getSQLType],
        asc: [Function: asc],
        desc: [Function: desc],
        nullsFirst: [Function: nullsFirst],
        nullsLast: [Function: nullsLast],
        op: [Function: op],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      enabled: ExtraConfigColumn {
        name: "enabled",
        keyAsName: false,
        primary: false,
        notNull: true,
        default: true,
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: true,
        isUnique: false,
        uniqueName: "agents_enabled_unique",
        uniqueType: undefined,
        dataType: "boolean",
        columnType: "PgBoolean",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "enabled",
          keyAsName: false,
          notNull: true,
          default: true,
          hasDefault: true,
          primaryKey: false,
          isUnique: false,
          uniqueName: "agents_enabled_unique",
          uniqueType: undefined,
          dataType: "boolean",
          columnType: "PgBoolean",
          generated: undefined,
        },
        table: [Circular],
        indexConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        defaultConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        getSQLType: [Function: getSQLType],
        asc: [Function: asc],
        desc: [Function: desc],
        nullsFirst: [Function: nullsFirst],
        nullsLast: [Function: nullsLast],
        op: [Function: op],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      createdAt: ExtraConfigColumn {
        name: "createdAt",
        keyAsName: false,
        primary: false,
        notNull: true,
        default: SQL {
          decoder: {
            mapFromDriverValue: [Function: mapFromDriverValue],
          },
          shouldInlineParams: false,
          queryChunks: [
            StringChunk {
              value: [ "now()" ],
              getSQL: [Function: getSQL],
            }
          ],
          append: [Function: append],
          toQuery: [Function: toQuery],
          buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
          mapInlineParam: [Function: mapInlineParam],
          getSQL: [Function: getSQL],
          as: [Function: as],
          mapWith: [Function: mapWith],
          inlineParams: [Function: inlineParams],
          if: [Function: if],
        },
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: true,
        isUnique: false,
        uniqueName: "agents_createdAt_unique",
        uniqueType: undefined,
        dataType: "custom",
        columnType: "PgCustomColumn",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "createdAt",
          keyAsName: false,
          notNull: true,
          default: SQL {
            decoder: {
              mapFromDriverValue: [Function: mapFromDriverValue],
            },
            shouldInlineParams: false,
            queryChunks: [
              StringChunk {
                value: [ "now()" ],
                getSQL: [Function: getSQL],
              }
            ],
            append: [Function: append],
            toQuery: [Function: toQuery],
            buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
            mapInlineParam: [Function: mapInlineParam],
            getSQL: [Function: getSQL],
            as: [Function: as],
            mapWith: [Function: mapWith],
            inlineParams: [Function: inlineParams],
            if: [Function: if],
          },
          hasDefault: true,
          primaryKey: false,
          isUnique: false,
          uniqueName: "agents_createdAt_unique",
          uniqueType: undefined,
          dataType: "custom",
          columnType: "PgCustomColumn",
          generated: undefined,
          fieldConfig: undefined,
          customTypeParams: {
            dataType: [Function: dataType],
            toDriver: [Function: toDriver],
            fromDriver: [Function: fromDriver],
          },
        },
        table: [Circular],
        indexConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        defaultConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        getSQLType: [Function: getSQLType],
        asc: [Function: asc],
        desc: [Function: desc],
        nullsFirst: [Function: nullsFirst],
        nullsLast: [Function: nullsLast],
        op: [Function: op],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      updatedAt: ExtraConfigColumn {
        name: "updatedAt",
        keyAsName: false,
        primary: false,
        notNull: true,
        default: SQL {
          decoder: {
            mapFromDriverValue: [Function: mapFromDriverValue],
          },
          shouldInlineParams: false,
          queryChunks: [
            StringChunk {
              value: [ "now()" ],
              getSQL: [Function: getSQL],
            }
          ],
          append: [Function: append],
          toQuery: [Function: toQuery],
          buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
          mapInlineParam: [Function: mapInlineParam],
          getSQL: [Function: getSQL],
          as: [Function: as],
          mapWith: [Function: mapWith],
          inlineParams: [Function: inlineParams],
          if: [Function: if],
        },
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: true,
        isUnique: false,
        uniqueName: "agents_updatedAt_unique",
        uniqueType: undefined,
        dataType: "custom",
        columnType: "PgCustomColumn",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "updatedAt",
          keyAsName: false,
          notNull: true,
          default: SQL {
            decoder: {
              mapFromDriverValue: [Function: mapFromDriverValue],
            },
            shouldInlineParams: false,
            queryChunks: [
              StringChunk {
                value: [ "now()" ],
                getSQL: [Function: getSQL],
              }
            ],
            append: [Function: append],
            toQuery: [Function: toQuery],
            buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
            mapInlineParam: [Function: mapInlineParam],
            getSQL: [Function: getSQL],
            as: [Function: as],
            mapWith: [Function: mapWith],
            inlineParams: [Function: inlineParams],
            if: [Function: if],
          },
          hasDefault: true,
          primaryKey: false,
          isUnique: false,
          uniqueName: "agents_updatedAt_unique",
          uniqueType: undefined,
          dataType: "custom",
          columnType: "PgCustomColumn",
          generated: undefined,
          fieldConfig: undefined,
          customTypeParams: {
            dataType: [Function: dataType],
            toDriver: [Function: toDriver],
            fromDriver: [Function: fromDriver],
          },
        },
        table: [Circular],
        indexConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        defaultConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        getSQLType: [Function: getSQLType],
        asc: [Function: asc],
        desc: [Function: desc],
        nullsFirst: [Function: nullsFirst],
        nullsLast: [Function: nullsLast],
        op: [Function: op],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      name: ExtraConfigColumn {
        name: "name",
        keyAsName: false,
        primary: false,
        notNull: false,
        default: undefined,
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: false,
        isUnique: false,
        uniqueName: "agents_name_unique",
        uniqueType: undefined,
        dataType: "string",
        columnType: "PgText",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "name",
          keyAsName: false,
          notNull: false,
          default: undefined,
          hasDefault: false,
          primaryKey: false,
          isUnique: false,
          uniqueName: "agents_name_unique",
          uniqueType: undefined,
          dataType: "string",
          columnType: "PgText",
          generated: undefined,
          enumValues: undefined,
        },
        table: [Circular],
        indexConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        defaultConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        getSQLType: [Function: getSQLType],
        asc: [Function: asc],
        desc: [Function: desc],
        nullsFirst: [Function: nullsFirst],
        nullsLast: [Function: nullsLast],
        op: [Function: op],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      username: ExtraConfigColumn {
        name: "username",
        keyAsName: false,
        primary: false,
        notNull: false,
        default: undefined,
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: false,
        isUnique: false,
        uniqueName: "agents_username_unique",
        uniqueType: undefined,
        dataType: "string",
        columnType: "PgText",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "username",
          keyAsName: false,
          notNull: false,
          default: undefined,
          hasDefault: false,
          primaryKey: false,
          isUnique: false,
          uniqueName: "agents_username_unique",
          uniqueType: undefined,
          dataType: "string",
          columnType: "PgText",
          generated: undefined,
          enumValues: undefined,
        },
        table: [Circular],
        indexConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        defaultConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        getSQLType: [Function: getSQLType],
        asc: [Function: asc],
        desc: [Function: desc],
        nullsFirst: [Function: nullsFirst],
        nullsLast: [Function: nullsLast],
        op: [Function: op],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      system: ExtraConfigColumn {
        name: "system",
        keyAsName: false,
        primary: false,
        notNull: false,
        default: undefined,
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: false,
        isUnique: false,
        uniqueName: "agents_system_unique",
        uniqueType: undefined,
        dataType: "string",
        columnType: "PgText",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "system",
          keyAsName: false,
          notNull: false,
          default: undefined,
          hasDefault: false,
          primaryKey: false,
          isUnique: false,
          uniqueName: "agents_system_unique",
          uniqueType: undefined,
          dataType: "string",
          columnType: "PgText",
          generated: undefined,
          enumValues: undefined,
        },
        table: [Circular],
        indexConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        defaultConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        getSQLType: [Function: getSQLType],
        asc: [Function: asc],
        desc: [Function: desc],
        nullsFirst: [Function: nullsFirst],
        nullsLast: [Function: nullsLast],
        op: [Function: op],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      bio: ExtraConfigColumn {
        name: "bio",
        keyAsName: false,
        primary: false,
        notNull: true,
        default: undefined,
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: false,
        isUnique: false,
        uniqueName: "agents_bio_unique",
        uniqueType: undefined,
        dataType: "json",
        columnType: "PgJsonb",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "bio",
          keyAsName: false,
          notNull: true,
          default: undefined,
          hasDefault: false,
          primaryKey: false,
          isUnique: false,
          uniqueName: "agents_bio_unique",
          uniqueType: undefined,
          dataType: "json",
          columnType: "PgJsonb",
          generated: undefined,
        },
        table: [Circular],
        indexConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        defaultConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        getSQLType: [Function: getSQLType],
        asc: [Function: asc],
        desc: [Function: desc],
        nullsFirst: [Function: nullsFirst],
        nullsLast: [Function: nullsLast],
        op: [Function: op],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      messageExamples: ExtraConfigColumn {
        name: "message_examples",
        keyAsName: false,
        primary: false,
        notNull: false,
        default: SQL {
          decoder: {
            mapFromDriverValue: [Function: mapFromDriverValue],
          },
          shouldInlineParams: false,
          queryChunks: [
            StringChunk {
              value: [ "'[]'::jsonb" ],
              getSQL: [Function: getSQL],
            }
          ],
          append: [Function: append],
          toQuery: [Function: toQuery],
          buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
          mapInlineParam: [Function: mapInlineParam],
          getSQL: [Function: getSQL],
          as: [Function: as],
          mapWith: [Function: mapWith],
          inlineParams: [Function: inlineParams],
          if: [Function: if],
        },
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: true,
        isUnique: false,
        uniqueName: "agents_message_examples_unique",
        uniqueType: undefined,
        dataType: "json",
        columnType: "PgJsonb",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "message_examples",
          keyAsName: false,
          notNull: false,
          default: SQL {
            decoder: {
              mapFromDriverValue: [Function: mapFromDriverValue],
            },
            shouldInlineParams: false,
            queryChunks: [
              StringChunk {
                value: [ "'[]'::jsonb" ],
                getSQL: [Function: getSQL],
              }
            ],
            append: [Function: append],
            toQuery: [Function: toQuery],
            buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
            mapInlineParam: [Function: mapInlineParam],
            getSQL: [Function: getSQL],
            as: [Function: as],
            mapWith: [Function: mapWith],
            inlineParams: [Function: inlineParams],
            if: [Function: if],
          },
          hasDefault: true,
          primaryKey: false,
          isUnique: false,
          uniqueName: "agents_message_examples_unique",
          uniqueType: undefined,
          dataType: "json",
          columnType: "PgJsonb",
          generated: undefined,
        },
        table: [Circular],
        indexConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        defaultConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        getSQLType: [Function: getSQLType],
        asc: [Function: asc],
        desc: [Function: desc],
        nullsFirst: [Function: nullsFirst],
        nullsLast: [Function: nullsLast],
        op: [Function: op],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      postExamples: ExtraConfigColumn {
        name: "post_examples",
        keyAsName: false,
        primary: false,
        notNull: false,
        default: SQL {
          decoder: {
            mapFromDriverValue: [Function: mapFromDriverValue],
          },
          shouldInlineParams: false,
          queryChunks: [
            StringChunk {
              value: [ "'[]'::jsonb" ],
              getSQL: [Function: getSQL],
            }
          ],
          append: [Function: append],
          toQuery: [Function: toQuery],
          buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
          mapInlineParam: [Function: mapInlineParam],
          getSQL: [Function: getSQL],
          as: [Function: as],
          mapWith: [Function: mapWith],
          inlineParams: [Function: inlineParams],
          if: [Function: if],
        },
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: true,
        isUnique: false,
        uniqueName: "agents_post_examples_unique",
        uniqueType: undefined,
        dataType: "json",
        columnType: "PgJsonb",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "post_examples",
          keyAsName: false,
          notNull: false,
          default: SQL {
            decoder: {
              mapFromDriverValue: [Function: mapFromDriverValue],
            },
            shouldInlineParams: false,
            queryChunks: [
              StringChunk {
                value: [ "'[]'::jsonb" ],
                getSQL: [Function: getSQL],
              }
            ],
            append: [Function: append],
            toQuery: [Function: toQuery],
            buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
            mapInlineParam: [Function: mapInlineParam],
            getSQL: [Function: getSQL],
            as: [Function: as],
            mapWith: [Function: mapWith],
            inlineParams: [Function: inlineParams],
            if: [Function: if],
          },
          hasDefault: true,
          primaryKey: false,
          isUnique: false,
          uniqueName: "agents_post_examples_unique",
          uniqueType: undefined,
          dataType: "json",
          columnType: "PgJsonb",
          generated: undefined,
        },
        table: [Circular],
        indexConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        defaultConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        getSQLType: [Function: getSQLType],
        asc: [Function: asc],
        desc: [Function: desc],
        nullsFirst: [Function: nullsFirst],
        nullsLast: [Function: nullsLast],
        op: [Function: op],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      topics: ExtraConfigColumn {
        name: "topics",
        keyAsName: false,
        primary: false,
        notNull: false,
        default: SQL {
          decoder: {
            mapFromDriverValue: [Function: mapFromDriverValue],
          },
          shouldInlineParams: false,
          queryChunks: [
            StringChunk {
              value: [ "'[]'::jsonb" ],
              getSQL: [Function: getSQL],
            }
          ],
          append: [Function: append],
          toQuery: [Function: toQuery],
          buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
          mapInlineParam: [Function: mapInlineParam],
          getSQL: [Function: getSQL],
          as: [Function: as],
          mapWith: [Function: mapWith],
          inlineParams: [Function: inlineParams],
          if: [Function: if],
        },
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: true,
        isUnique: false,
        uniqueName: "agents_topics_unique",
        uniqueType: undefined,
        dataType: "json",
        columnType: "PgJsonb",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "topics",
          keyAsName: false,
          notNull: false,
          default: SQL {
            decoder: {
              mapFromDriverValue: [Function: mapFromDriverValue],
            },
            shouldInlineParams: false,
            queryChunks: [
              StringChunk {
                value: [ "'[]'::jsonb" ],
                getSQL: [Function: getSQL],
              }
            ],
            append: [Function: append],
            toQuery: [Function: toQuery],
            buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
            mapInlineParam: [Function: mapInlineParam],
            getSQL: [Function: getSQL],
            as: [Function: as],
            mapWith: [Function: mapWith],
            inlineParams: [Function: inlineParams],
            if: [Function: if],
          },
          hasDefault: true,
          primaryKey: false,
          isUnique: false,
          uniqueName: "agents_topics_unique",
          uniqueType: undefined,
          dataType: "json",
          columnType: "PgJsonb",
          generated: undefined,
        },
        table: [Circular],
        indexConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        defaultConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        getSQLType: [Function: getSQLType],
        asc: [Function: asc],
        desc: [Function: desc],
        nullsFirst: [Function: nullsFirst],
        nullsLast: [Function: nullsLast],
        op: [Function: op],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      adjectives: ExtraConfigColumn {
        name: "adjectives",
        keyAsName: false,
        primary: false,
        notNull: false,
        default: SQL {
          decoder: {
            mapFromDriverValue: [Function: mapFromDriverValue],
          },
          shouldInlineParams: false,
          queryChunks: [
            StringChunk {
              value: [ "'[]'::jsonb" ],
              getSQL: [Function: getSQL],
            }
          ],
          append: [Function: append],
          toQuery: [Function: toQuery],
          buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
          mapInlineParam: [Function: mapInlineParam],
          getSQL: [Function: getSQL],
          as: [Function: as],
          mapWith: [Function: mapWith],
          inlineParams: [Function: inlineParams],
          if: [Function: if],
        },
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: true,
        isUnique: false,
        uniqueName: "agents_adjectives_unique",
        uniqueType: undefined,
        dataType: "json",
        columnType: "PgJsonb",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "adjectives",
          keyAsName: false,
          notNull: false,
          default: SQL {
            decoder: {
              mapFromDriverValue: [Function: mapFromDriverValue],
            },
            shouldInlineParams: false,
            queryChunks: [
              StringChunk {
                value: [ "'[]'::jsonb" ],
                getSQL: [Function: getSQL],
              }
            ],
            append: [Function: append],
            toQuery: [Function: toQuery],
            buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
            mapInlineParam: [Function: mapInlineParam],
            getSQL: [Function: getSQL],
            as: [Function: as],
            mapWith: [Function: mapWith],
            inlineParams: [Function: inlineParams],
            if: [Function: if],
          },
          hasDefault: true,
          primaryKey: false,
          isUnique: false,
          uniqueName: "agents_adjectives_unique",
          uniqueType: undefined,
          dataType: "json",
          columnType: "PgJsonb",
          generated: undefined,
        },
        table: [Circular],
        indexConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        defaultConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        getSQLType: [Function: getSQLType],
        asc: [Function: asc],
        desc: [Function: desc],
        nullsFirst: [Function: nullsFirst],
        nullsLast: [Function: nullsLast],
        op: [Function: op],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      knowledge: ExtraConfigColumn {
        name: "knowledge",
        keyAsName: false,
        primary: false,
        notNull: false,
        default: SQL {
          decoder: {
            mapFromDriverValue: [Function: mapFromDriverValue],
          },
          shouldInlineParams: false,
          queryChunks: [
            StringChunk {
              value: [ "'[]'::jsonb" ],
              getSQL: [Function: getSQL],
            }
          ],
          append: [Function: append],
          toQuery: [Function: toQuery],
          buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
          mapInlineParam: [Function: mapInlineParam],
          getSQL: [Function: getSQL],
          as: [Function: as],
          mapWith: [Function: mapWith],
          inlineParams: [Function: inlineParams],
          if: [Function: if],
        },
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: true,
        isUnique: false,
        uniqueName: "agents_knowledge_unique",
        uniqueType: undefined,
        dataType: "json",
        columnType: "PgJsonb",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "knowledge",
          keyAsName: false,
          notNull: false,
          default: SQL {
            decoder: {
              mapFromDriverValue: [Function: mapFromDriverValue],
            },
            shouldInlineParams: false,
            queryChunks: [
              StringChunk {
                value: [ "'[]'::jsonb" ],
                getSQL: [Function: getSQL],
              }
            ],
            append: [Function: append],
            toQuery: [Function: toQuery],
            buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
            mapInlineParam: [Function: mapInlineParam],
            getSQL: [Function: getSQL],
            as: [Function: as],
            mapWith: [Function: mapWith],
            inlineParams: [Function: inlineParams],
            if: [Function: if],
          },
          hasDefault: true,
          primaryKey: false,
          isUnique: false,
          uniqueName: "agents_knowledge_unique",
          uniqueType: undefined,
          dataType: "json",
          columnType: "PgJsonb",
          generated: undefined,
        },
        table: [Circular],
        indexConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        defaultConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        getSQLType: [Function: getSQLType],
        asc: [Function: asc],
        desc: [Function: desc],
        nullsFirst: [Function: nullsFirst],
        nullsLast: [Function: nullsLast],
        op: [Function: op],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      plugins: ExtraConfigColumn {
        name: "plugins",
        keyAsName: false,
        primary: false,
        notNull: false,
        default: SQL {
          decoder: {
            mapFromDriverValue: [Function: mapFromDriverValue],
          },
          shouldInlineParams: false,
          queryChunks: [
            StringChunk {
              value: [ "'[]'::jsonb" ],
              getSQL: [Function: getSQL],
            }
          ],
          append: [Function: append],
          toQuery: [Function: toQuery],
          buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
          mapInlineParam: [Function: mapInlineParam],
          getSQL: [Function: getSQL],
          as: [Function: as],
          mapWith: [Function: mapWith],
          inlineParams: [Function: inlineParams],
          if: [Function: if],
        },
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: true,
        isUnique: false,
        uniqueName: "agents_plugins_unique",
        uniqueType: undefined,
        dataType: "json",
        columnType: "PgJsonb",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "plugins",
          keyAsName: false,
          notNull: false,
          default: SQL {
            decoder: {
              mapFromDriverValue: [Function: mapFromDriverValue],
            },
            shouldInlineParams: false,
            queryChunks: [
              StringChunk {
                value: [ "'[]'::jsonb" ],
                getSQL: [Function: getSQL],
              }
            ],
            append: [Function: append],
            toQuery: [Function: toQuery],
            buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
            mapInlineParam: [Function: mapInlineParam],
            getSQL: [Function: getSQL],
            as: [Function: as],
            mapWith: [Function: mapWith],
            inlineParams: [Function: inlineParams],
            if: [Function: if],
          },
          hasDefault: true,
          primaryKey: false,
          isUnique: false,
          uniqueName: "agents_plugins_unique",
          uniqueType: undefined,
          dataType: "json",
          columnType: "PgJsonb",
          generated: undefined,
        },
        table: [Circular],
        indexConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        defaultConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        getSQLType: [Function: getSQLType],
        asc: [Function: asc],
        desc: [Function: desc],
        nullsFirst: [Function: nullsFirst],
        nullsLast: [Function: nullsLast],
        op: [Function: op],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      settings: ExtraConfigColumn {
        name: "settings",
        keyAsName: false,
        primary: false,
        notNull: false,
        default: SQL {
          decoder: {
            mapFromDriverValue: [Function: mapFromDriverValue],
          },
          shouldInlineParams: false,
          queryChunks: [
            StringChunk {
              value: [ "'{}'::jsonb" ],
              getSQL: [Function: getSQL],
            }
          ],
          append: [Function: append],
          toQuery: [Function: toQuery],
          buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
          mapInlineParam: [Function: mapInlineParam],
          getSQL: [Function: getSQL],
          as: [Function: as],
          mapWith: [Function: mapWith],
          inlineParams: [Function: inlineParams],
          if: [Function: if],
        },
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: true,
        isUnique: false,
        uniqueName: "agents_settings_unique",
        uniqueType: undefined,
        dataType: "json",
        columnType: "PgJsonb",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "settings",
          keyAsName: false,
          notNull: false,
          default: SQL {
            decoder: {
              mapFromDriverValue: [Function: mapFromDriverValue],
            },
            shouldInlineParams: false,
            queryChunks: [
              StringChunk {
                value: [ "'{}'::jsonb" ],
                getSQL: [Function: getSQL],
              }
            ],
            append: [Function: append],
            toQuery: [Function: toQuery],
            buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
            mapInlineParam: [Function: mapInlineParam],
            getSQL: [Function: getSQL],
            as: [Function: as],
            mapWith: [Function: mapWith],
            inlineParams: [Function: inlineParams],
            if: [Function: if],
          },
          hasDefault: true,
          primaryKey: false,
          isUnique: false,
          uniqueName: "agents_settings_unique",
          uniqueType: undefined,
          dataType: "json",
          columnType: "PgJsonb",
          generated: undefined,
        },
        table: [Circular],
        indexConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        defaultConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        getSQLType: [Function: getSQLType],
        asc: [Function: asc],
        desc: [Function: desc],
        nullsFirst: [Function: nullsFirst],
        nullsLast: [Function: nullsLast],
        op: [Function: op],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      style: ExtraConfigColumn {
        name: "style",
        keyAsName: false,
        primary: false,
        notNull: false,
        default: SQL {
          decoder: {
            mapFromDriverValue: [Function: mapFromDriverValue],
          },
          shouldInlineParams: false,
          queryChunks: [
            StringChunk {
              value: [ "'{}'::jsonb" ],
              getSQL: [Function: getSQL],
            }
          ],
          append: [Function: append],
          toQuery: [Function: toQuery],
          buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
          mapInlineParam: [Function: mapInlineParam],
          getSQL: [Function: getSQL],
          as: [Function: as],
          mapWith: [Function: mapWith],
          inlineParams: [Function: inlineParams],
          if: [Function: if],
        },
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: true,
        isUnique: false,
        uniqueName: "agents_style_unique",
        uniqueType: undefined,
        dataType: "json",
        columnType: "PgJsonb",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "style",
          keyAsName: false,
          notNull: false,
          default: SQL {
            decoder: {
              mapFromDriverValue: [Function: mapFromDriverValue],
            },
            shouldInlineParams: false,
            queryChunks: [
              StringChunk {
                value: [ "'{}'::jsonb" ],
                getSQL: [Function: getSQL],
              }
            ],
            append: [Function: append],
            toQuery: [Function: toQuery],
            buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
            mapInlineParam: [Function: mapInlineParam],
            getSQL: [Function: getSQL],
            as: [Function: as],
            mapWith: [Function: mapWith],
            inlineParams: [Function: inlineParams],
            if: [Function: if],
          },
          hasDefault: true,
          primaryKey: false,
          isUnique: false,
          uniqueName: "agents_style_unique",
          uniqueType: undefined,
          dataType: "json",
          columnType: "PgJsonb",
          generated: undefined,
        },
        table: [Circular],
        indexConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        defaultConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        getSQLType: [Function: getSQLType],
        asc: [Function: asc],
        desc: [Function: desc],
        nullsFirst: [Function: nullsFirst],
        nullsLast: [Function: nullsLast],
        op: [Function: op],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
    },
    [Symbol(drizzle:BaseName)]: "agents",
    [Symbol(drizzle:IsAlias)]: false,
    [Symbol(drizzle:IsDrizzleTable)]: true,
    [Symbol(drizzle:ExtraConfigBuilder)]: [Function],
    [Symbol(drizzle:PgInlineForeignKeys)]: [],
    [Symbol(drizzle:EnableRLS)]: false,
    id: PgUUID {
      name: "id",
      keyAsName: false,
      primary: true,
      notNull: true,
      default: SQL {
        decoder: {
          mapFromDriverValue: [Function: mapFromDriverValue],
        },
        shouldInlineParams: false,
        queryChunks: [
          StringChunk {
            value: [ "gen_random_uuid()" ],
            getSQL: [Function: getSQL],
          }
        ],
        append: [Function: append],
        toQuery: [Function: toQuery],
        buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
        mapInlineParam: [Function: mapInlineParam],
        getSQL: [Function: getSQL],
        as: [Function: as],
        mapWith: [Function: mapWith],
        inlineParams: [Function: inlineParams],
        if: [Function: if],
      },
      defaultFn: undefined,
      onUpdateFn: undefined,
      hasDefault: true,
      isUnique: false,
      uniqueName: "agents_id_unique",
      uniqueType: undefined,
      dataType: "string",
      columnType: "PgUUID",
      enumValues: undefined,
      generated: undefined,
      generatedIdentity: undefined,
      config: {
        name: "id",
        keyAsName: false,
        notNull: true,
        default: SQL {
          decoder: {
            mapFromDriverValue: [Function: mapFromDriverValue],
          },
          shouldInlineParams: false,
          queryChunks: [
            StringChunk {
              value: [ "gen_random_uuid()" ],
              getSQL: [Function: getSQL],
            }
          ],
          append: [Function: append],
          toQuery: [Function: toQuery],
          buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
          mapInlineParam: [Function: mapInlineParam],
          getSQL: [Function: getSQL],
          as: [Function: as],
          mapWith: [Function: mapWith],
          inlineParams: [Function: inlineParams],
          if: [Function: if],
        },
        hasDefault: true,
        primaryKey: true,
        isUnique: false,
        uniqueName: "agents_id_unique",
        uniqueType: undefined,
        dataType: "string",
        columnType: "PgUUID",
        generated: undefined,
      },
      table: [Circular],
      getSQLType: [Function: getSQLType],
      mapFromDriverValue: [Function: mapFromDriverValue],
      mapToDriverValue: [Function: mapToDriverValue],
      shouldDisableInsert: [Function: shouldDisableInsert],
      getSQL: [Function],
    },
    enabled: PgBoolean {
      name: "enabled",
      keyAsName: false,
      primary: false,
      notNull: true,
      default: true,
      defaultFn: undefined,
      onUpdateFn: undefined,
      hasDefault: true,
      isUnique: false,
      uniqueName: "agents_enabled_unique",
      uniqueType: undefined,
      dataType: "boolean",
      columnType: "PgBoolean",
      enumValues: undefined,
      generated: undefined,
      generatedIdentity: undefined,
      config: {
        name: "enabled",
        keyAsName: false,
        notNull: true,
        default: true,
        hasDefault: true,
        primaryKey: false,
        isUnique: false,
        uniqueName: "agents_enabled_unique",
        uniqueType: undefined,
        dataType: "boolean",
        columnType: "PgBoolean",
        generated: undefined,
      },
      table: [Circular],
      getSQLType: [Function: getSQLType],
      mapFromDriverValue: [Function: mapFromDriverValue],
      mapToDriverValue: [Function: mapToDriverValue],
      shouldDisableInsert: [Function: shouldDisableInsert],
      getSQL: [Function],
    },
    createdAt: PgCustomColumn {
      name: "createdAt",
      keyAsName: false,
      primary: false,
      notNull: true,
      default: SQL {
        decoder: {
          mapFromDriverValue: [Function: mapFromDriverValue],
        },
        shouldInlineParams: false,
        queryChunks: [
          StringChunk {
            value: [ "now()" ],
            getSQL: [Function: getSQL],
          }
        ],
        append: [Function: append],
        toQuery: [Function: toQuery],
        buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
        mapInlineParam: [Function: mapInlineParam],
        getSQL: [Function: getSQL],
        as: [Function: as],
        mapWith: [Function: mapWith],
        inlineParams: [Function: inlineParams],
        if: [Function: if],
      },
      defaultFn: undefined,
      onUpdateFn: undefined,
      hasDefault: true,
      isUnique: false,
      uniqueName: "agents_createdAt_unique",
      uniqueType: undefined,
      dataType: "custom",
      columnType: "PgCustomColumn",
      enumValues: undefined,
      generated: undefined,
      generatedIdentity: undefined,
      config: {
        name: "createdAt",
        keyAsName: false,
        notNull: true,
        default: SQL {
          decoder: {
            mapFromDriverValue: [Function: mapFromDriverValue],
          },
          shouldInlineParams: false,
          queryChunks: [
            StringChunk {
              value: [ "now()" ],
              getSQL: [Function: getSQL],
            }
          ],
          append: [Function: append],
          toQuery: [Function: toQuery],
          buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
          mapInlineParam: [Function: mapInlineParam],
          getSQL: [Function: getSQL],
          as: [Function: as],
          mapWith: [Function: mapWith],
          inlineParams: [Function: inlineParams],
          if: [Function: if],
        },
        hasDefault: true,
        primaryKey: false,
        isUnique: false,
        uniqueName: "agents_createdAt_unique",
        uniqueType: undefined,
        dataType: "custom",
        columnType: "PgCustomColumn",
        generated: undefined,
        fieldConfig: undefined,
        customTypeParams: {
          dataType: [Function: dataType],
          toDriver: [Function: toDriver],
          fromDriver: [Function: fromDriver],
        },
      },
      table: [Circular],
      sqlName: "timestamptz",
      mapTo: [Function: toDriver],
      mapFrom: [Function: fromDriver],
      getSQLType: [Function: getSQLType],
      mapFromDriverValue: [Function: mapFromDriverValue],
      mapToDriverValue: [Function: mapToDriverValue],
      shouldDisableInsert: [Function: shouldDisableInsert],
      getSQL: [Function],
    },
    updatedAt: PgCustomColumn {
      name: "updatedAt",
      keyAsName: false,
      primary: false,
      notNull: true,
      default: SQL {
        decoder: {
          mapFromDriverValue: [Function: mapFromDriverValue],
        },
        shouldInlineParams: false,
        queryChunks: [
          StringChunk {
            value: [ "now()" ],
            getSQL: [Function: getSQL],
          }
        ],
        append: [Function: append],
        toQuery: [Function: toQuery],
        buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
        mapInlineParam: [Function: mapInlineParam],
        getSQL: [Function: getSQL],
        as: [Function: as],
        mapWith: [Function: mapWith],
        inlineParams: [Function: inlineParams],
        if: [Function: if],
      },
      defaultFn: undefined,
      onUpdateFn: undefined,
      hasDefault: true,
      isUnique: false,
      uniqueName: "agents_updatedAt_unique",
      uniqueType: undefined,
      dataType: "custom",
      columnType: "PgCustomColumn",
      enumValues: undefined,
      generated: undefined,
      generatedIdentity: undefined,
      config: {
        name: "updatedAt",
        keyAsName: false,
        notNull: true,
        default: SQL {
          decoder: {
            mapFromDriverValue: [Function: mapFromDriverValue],
          },
          shouldInlineParams: false,
          queryChunks: [
            StringChunk {
              value: [ "now()" ],
              getSQL: [Function: getSQL],
            }
          ],
          append: [Function: append],
          toQuery: [Function: toQuery],
          buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
          mapInlineParam: [Function: mapInlineParam],
          getSQL: [Function: getSQL],
          as: [Function: as],
          mapWith: [Function: mapWith],
          inlineParams: [Function: inlineParams],
          if: [Function: if],
        },
        hasDefault: true,
        primaryKey: false,
        isUnique: false,
        uniqueName: "agents_updatedAt_unique",
        uniqueType: undefined,
        dataType: "custom",
        columnType: "PgCustomColumn",
        generated: undefined,
        fieldConfig: undefined,
        customTypeParams: {
          dataType: [Function: dataType],
          toDriver: [Function: toDriver],
          fromDriver: [Function: fromDriver],
        },
      },
      table: [Circular],
      sqlName: "timestamptz",
      mapTo: [Function: toDriver],
      mapFrom: [Function: fromDriver],
      getSQLType: [Function: getSQLType],
      mapFromDriverValue: [Function: mapFromDriverValue],
      mapToDriverValue: [Function: mapToDriverValue],
      shouldDisableInsert: [Function: shouldDisableInsert],
      getSQL: [Function],
    },
    name: PgText {
      name: "name",
      keyAsName: false,
      primary: false,
      notNull: false,
      default: undefined,
      defaultFn: undefined,
      onUpdateFn: undefined,
      hasDefault: false,
      isUnique: false,
      uniqueName: "agents_name_unique",
      uniqueType: undefined,
      dataType: "string",
      columnType: "PgText",
      enumValues: undefined,
      generated: undefined,
      generatedIdentity: undefined,
      config: {
        name: "name",
        keyAsName: false,
        notNull: false,
        default: undefined,
        hasDefault: false,
        primaryKey: false,
        isUnique: false,
        uniqueName: "agents_name_unique",
        uniqueType: undefined,
        dataType: "string",
        columnType: "PgText",
        generated: undefined,
        enumValues: undefined,
      },
      table: [Circular],
      getSQLType: [Function: getSQLType],
      mapFromDriverValue: [Function: mapFromDriverValue],
      mapToDriverValue: [Function: mapToDriverValue],
      shouldDisableInsert: [Function: shouldDisableInsert],
      getSQL: [Function],
    },
    username: PgText {
      name: "username",
      keyAsName: false,
      primary: false,
      notNull: false,
      default: undefined,
      defaultFn: undefined,
      onUpdateFn: undefined,
      hasDefault: false,
      isUnique: false,
      uniqueName: "agents_username_unique",
      uniqueType: undefined,
      dataType: "string",
      columnType: "PgText",
      enumValues: undefined,
      generated: undefined,
      generatedIdentity: undefined,
      config: {
        name: "username",
        keyAsName: false,
        notNull: false,
        default: undefined,
        hasDefault: false,
        primaryKey: false,
        isUnique: false,
        uniqueName: "agents_username_unique",
        uniqueType: undefined,
        dataType: "string",
        columnType: "PgText",
        generated: undefined,
        enumValues: undefined,
      },
      table: [Circular],
      getSQLType: [Function: getSQLType],
      mapFromDriverValue: [Function: mapFromDriverValue],
      mapToDriverValue: [Function: mapToDriverValue],
      shouldDisableInsert: [Function: shouldDisableInsert],
      getSQL: [Function],
    },
    system: PgText {
      name: "system",
      keyAsName: false,
      primary: false,
      notNull: false,
      default: undefined,
      defaultFn: undefined,
      onUpdateFn: undefined,
      hasDefault: false,
      isUnique: false,
      uniqueName: "agents_system_unique",
      uniqueType: undefined,
      dataType: "string",
      columnType: "PgText",
      enumValues: undefined,
      generated: undefined,
      generatedIdentity: undefined,
      config: {
        name: "system",
        keyAsName: false,
        notNull: false,
        default: undefined,
        hasDefault: false,
        primaryKey: false,
        isUnique: false,
        uniqueName: "agents_system_unique",
        uniqueType: undefined,
        dataType: "string",
        columnType: "PgText",
        generated: undefined,
        enumValues: undefined,
      },
      table: [Circular],
      getSQLType: [Function: getSQLType],
      mapFromDriverValue: [Function: mapFromDriverValue],
      mapToDriverValue: [Function: mapToDriverValue],
      shouldDisableInsert: [Function: shouldDisableInsert],
      getSQL: [Function],
    },
    bio: PgJsonb {
      name: "bio",
      keyAsName: false,
      primary: false,
      notNull: true,
      default: undefined,
      defaultFn: undefined,
      onUpdateFn: undefined,
      hasDefault: false,
      isUnique: false,
      uniqueName: "agents_bio_unique",
      uniqueType: undefined,
      dataType: "json",
      columnType: "PgJsonb",
      enumValues: undefined,
      generated: undefined,
      generatedIdentity: undefined,
      config: {
        name: "bio",
        keyAsName: false,
        notNull: true,
        default: undefined,
        hasDefault: false,
        primaryKey: false,
        isUnique: false,
        uniqueName: "agents_bio_unique",
        uniqueType: undefined,
        dataType: "json",
        columnType: "PgJsonb",
        generated: undefined,
      },
      table: [Circular],
      getSQLType: [Function: getSQLType],
      mapToDriverValue: [Function: mapToDriverValue],
      mapFromDriverValue: [Function: mapFromDriverValue],
      shouldDisableInsert: [Function: shouldDisableInsert],
      getSQL: [Function],
    },
    messageExamples: PgJsonb {
      name: "message_examples",
      keyAsName: false,
      primary: false,
      notNull: false,
      default: SQL {
        decoder: {
          mapFromDriverValue: [Function: mapFromDriverValue],
        },
        shouldInlineParams: false,
        queryChunks: [
          StringChunk {
            value: [ "'[]'::jsonb" ],
            getSQL: [Function: getSQL],
          }
        ],
        append: [Function: append],
        toQuery: [Function: toQuery],
        buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
        mapInlineParam: [Function: mapInlineParam],
        getSQL: [Function: getSQL],
        as: [Function: as],
        mapWith: [Function: mapWith],
        inlineParams: [Function: inlineParams],
        if: [Function: if],
      },
      defaultFn: undefined,
      onUpdateFn: undefined,
      hasDefault: true,
      isUnique: false,
      uniqueName: "agents_message_examples_unique",
      uniqueType: undefined,
      dataType: "json",
      columnType: "PgJsonb",
      enumValues: undefined,
      generated: undefined,
      generatedIdentity: undefined,
      config: {
        name: "message_examples",
        keyAsName: false,
        notNull: false,
        default: SQL {
          decoder: {
            mapFromDriverValue: [Function: mapFromDriverValue],
          },
          shouldInlineParams: false,
          queryChunks: [
            StringChunk {
              value: [ "'[]'::jsonb" ],
              getSQL: [Function: getSQL],
            }
          ],
          append: [Function: append],
          toQuery: [Function: toQuery],
          buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
          mapInlineParam: [Function: mapInlineParam],
          getSQL: [Function: getSQL],
          as: [Function: as],
          mapWith: [Function: mapWith],
          inlineParams: [Function: inlineParams],
          if: [Function: if],
        },
        hasDefault: true,
        primaryKey: false,
        isUnique: false,
        uniqueName: "agents_message_examples_unique",
        uniqueType: undefined,
        dataType: "json",
        columnType: "PgJsonb",
        generated: undefined,
      },
      table: [Circular],
      getSQLType: [Function: getSQLType],
      mapToDriverValue: [Function: mapToDriverValue],
      mapFromDriverValue: [Function: mapFromDriverValue],
      shouldDisableInsert: [Function: shouldDisableInsert],
      getSQL: [Function],
    },
    postExamples: PgJsonb {
      name: "post_examples",
      keyAsName: false,
      primary: false,
      notNull: false,
      default: SQL {
        decoder: {
          mapFromDriverValue: [Function: mapFromDriverValue],
        },
        shouldInlineParams: false,
        queryChunks: [
          StringChunk {
            value: [ "'[]'::jsonb" ],
            getSQL: [Function: getSQL],
          }
        ],
        append: [Function: append],
        toQuery: [Function: toQuery],
        buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
        mapInlineParam: [Function: mapInlineParam],
        getSQL: [Function: getSQL],
        as: [Function: as],
        mapWith: [Function: mapWith],
        inlineParams: [Function: inlineParams],
        if: [Function: if],
      },
      defaultFn: undefined,
      onUpdateFn: undefined,
      hasDefault: true,
      isUnique: false,
      uniqueName: "agents_post_examples_unique",
      uniqueType: undefined,
      dataType: "json",
      columnType: "PgJsonb",
      enumValues: undefined,
      generated: undefined,
      generatedIdentity: undefined,
      config: {
        name: "post_examples",
        keyAsName: false,
        notNull: false,
        default: SQL {
          decoder: {
            mapFromDriverValue: [Function: mapFromDriverValue],
          },
          shouldInlineParams: false,
          queryChunks: [
            StringChunk {
              value: [ "'[]'::jsonb" ],
              getSQL: [Function: getSQL],
            }
          ],
          append: [Function: append],
          toQuery: [Function: toQuery],
          buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
          mapInlineParam: [Function: mapInlineParam],
          getSQL: [Function: getSQL],
          as: [Function: as],
          mapWith: [Function: mapWith],
          inlineParams: [Function: inlineParams],
          if: [Function: if],
        },
        hasDefault: true,
        primaryKey: false,
        isUnique: false,
        uniqueName: "agents_post_examples_unique",
        uniqueType: undefined,
        dataType: "json",
        columnType: "PgJsonb",
        generated: undefined,
      },
      table: [Circular],
      getSQLType: [Function: getSQLType],
      mapToDriverValue: [Function: mapToDriverValue],
      mapFromDriverValue: [Function: mapFromDriverValue],
      shouldDisableInsert: [Function: shouldDisableInsert],
      getSQL: [Function],
    },
    topics: PgJsonb {
      name: "topics",
      keyAsName: false,
      primary: false,
      notNull: false,
      default: SQL {
        decoder: {
          mapFromDriverValue: [Function: mapFromDriverValue],
        },
        shouldInlineParams: false,
        queryChunks: [
          StringChunk {
            value: [ "'[]'::jsonb" ],
            getSQL: [Function: getSQL],
          }
        ],
        append: [Function: append],
        toQuery: [Function: toQuery],
        buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
        mapInlineParam: [Function: mapInlineParam],
        getSQL: [Function: getSQL],
        as: [Function: as],
        mapWith: [Function: mapWith],
        inlineParams: [Function: inlineParams],
        if: [Function: if],
      },
      defaultFn: undefined,
      onUpdateFn: undefined,
      hasDefault: true,
      isUnique: false,
      uniqueName: "agents_topics_unique",
      uniqueType: undefined,
      dataType: "json",
      columnType: "PgJsonb",
      enumValues: undefined,
      generated: undefined,
      generatedIdentity: undefined,
      config: {
        name: "topics",
        keyAsName: false,
        notNull: false,
        default: SQL {
          decoder: {
            mapFromDriverValue: [Function: mapFromDriverValue],
          },
          shouldInlineParams: false,
          queryChunks: [
            StringChunk {
              value: [ "'[]'::jsonb" ],
              getSQL: [Function: getSQL],
            }
          ],
          append: [Function: append],
          toQuery: [Function: toQuery],
          buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
          mapInlineParam: [Function: mapInlineParam],
          getSQL: [Function: getSQL],
          as: [Function: as],
          mapWith: [Function: mapWith],
          inlineParams: [Function: inlineParams],
          if: [Function: if],
        },
        hasDefault: true,
        primaryKey: false,
        isUnique: false,
        uniqueName: "agents_topics_unique",
        uniqueType: undefined,
        dataType: "json",
        columnType: "PgJsonb",
        generated: undefined,
      },
      table: [Circular],
      getSQLType: [Function: getSQLType],
      mapToDriverValue: [Function: mapToDriverValue],
      mapFromDriverValue: [Function: mapFromDriverValue],
      shouldDisableInsert: [Function: shouldDisableInsert],
      getSQL: [Function],
    },
    adjectives: PgJsonb {
      name: "adjectives",
      keyAsName: false,
      primary: false,
      notNull: false,
      default: SQL {
        decoder: {
          mapFromDriverValue: [Function: mapFromDriverValue],
        },
        shouldInlineParams: false,
        queryChunks: [
          StringChunk {
            value: [ "'[]'::jsonb" ],
            getSQL: [Function: getSQL],
          }
        ],
        append: [Function: append],
        toQuery: [Function: toQuery],
        buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
        mapInlineParam: [Function: mapInlineParam],
        getSQL: [Function: getSQL],
        as: [Function: as],
        mapWith: [Function: mapWith],
        inlineParams: [Function: inlineParams],
        if: [Function: if],
      },
      defaultFn: undefined,
      onUpdateFn: undefined,
      hasDefault: true,
      isUnique: false,
      uniqueName: "agents_adjectives_unique",
      uniqueType: undefined,
      dataType: "json",
      columnType: "PgJsonb",
      enumValues: undefined,
      generated: undefined,
      generatedIdentity: undefined,
      config: {
        name: "adjectives",
        keyAsName: false,
        notNull: false,
        default: SQL {
          decoder: {
            mapFromDriverValue: [Function: mapFromDriverValue],
          },
          shouldInlineParams: false,
          queryChunks: [
            StringChunk {
              value: [ "'[]'::jsonb" ],
              getSQL: [Function: getSQL],
            }
          ],
          append: [Function: append],
          toQuery: [Function: toQuery],
          buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
          mapInlineParam: [Function: mapInlineParam],
          getSQL: [Function: getSQL],
          as: [Function: as],
          mapWith: [Function: mapWith],
          inlineParams: [Function: inlineParams],
          if: [Function: if],
        },
        hasDefault: true,
        primaryKey: false,
        isUnique: false,
        uniqueName: "agents_adjectives_unique",
        uniqueType: undefined,
        dataType: "json",
        columnType: "PgJsonb",
        generated: undefined,
      },
      table: [Circular],
      getSQLType: [Function: getSQLType],
      mapToDriverValue: [Function: mapToDriverValue],
      mapFromDriverValue: [Function: mapFromDriverValue],
      shouldDisableInsert: [Function: shouldDisableInsert],
      getSQL: [Function],
    },
    knowledge: PgJsonb {
      name: "knowledge",
      keyAsName: false,
      primary: false,
      notNull: false,
      default: SQL {
        decoder: {
          mapFromDriverValue: [Function: mapFromDriverValue],
        },
        shouldInlineParams: false,
        queryChunks: [
          StringChunk {
            value: [ "'[]'::jsonb" ],
            getSQL: [Function: getSQL],
          }
        ],
        append: [Function: append],
        toQuery: [Function: toQuery],
        buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
        mapInlineParam: [Function: mapInlineParam],
        getSQL: [Function: getSQL],
        as: [Function: as],
        mapWith: [Function: mapWith],
        inlineParams: [Function: inlineParams],
        if: [Function: if],
      },
      defaultFn: undefined,
      onUpdateFn: undefined,
      hasDefault: true,
      isUnique: false,
      uniqueName: "agents_knowledge_unique",
      uniqueType: undefined,
      dataType: "json",
      columnType: "PgJsonb",
      enumValues: undefined,
      generated: undefined,
      generatedIdentity: undefined,
      config: {
        name: "knowledge",
        keyAsName: false,
        notNull: false,
        default: SQL {
          decoder: {
            mapFromDriverValue: [Function: mapFromDriverValue],
          },
          shouldInlineParams: false,
          queryChunks: [
            StringChunk {
              value: [ "'[]'::jsonb" ],
              getSQL: [Function: getSQL],
            }
          ],
          append: [Function: append],
          toQuery: [Function: toQuery],
          buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
          mapInlineParam: [Function: mapInlineParam],
          getSQL: [Function: getSQL],
          as: [Function: as],
          mapWith: [Function: mapWith],
          inlineParams: [Function: inlineParams],
          if: [Function: if],
        },
        hasDefault: true,
        primaryKey: false,
        isUnique: false,
        uniqueName: "agents_knowledge_unique",
        uniqueType: undefined,
        dataType: "json",
        columnType: "PgJsonb",
        generated: undefined,
      },
      table: [Circular],
      getSQLType: [Function: getSQLType],
      mapToDriverValue: [Function: mapToDriverValue],
      mapFromDriverValue: [Function: mapFromDriverValue],
      shouldDisableInsert: [Function: shouldDisableInsert],
      getSQL: [Function],
    },
    plugins: PgJsonb {
      name: "plugins",
      keyAsName: false,
      primary: false,
      notNull: false,
      default: SQL {
        decoder: {
          mapFromDriverValue: [Function: mapFromDriverValue],
        },
        shouldInlineParams: false,
        queryChunks: [
          StringChunk {
            value: [ "'[]'::jsonb" ],
            getSQL: [Function: getSQL],
          }
        ],
        append: [Function: append],
        toQuery: [Function: toQuery],
        buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
        mapInlineParam: [Function: mapInlineParam],
        getSQL: [Function: getSQL],
        as: [Function: as],
        mapWith: [Function: mapWith],
        inlineParams: [Function: inlineParams],
        if: [Function: if],
      },
      defaultFn: undefined,
      onUpdateFn: undefined,
      hasDefault: true,
      isUnique: false,
      uniqueName: "agents_plugins_unique",
      uniqueType: undefined,
      dataType: "json",
      columnType: "PgJsonb",
      enumValues: undefined,
      generated: undefined,
      generatedIdentity: undefined,
      config: {
        name: "plugins",
        keyAsName: false,
        notNull: false,
        default: SQL {
          decoder: {
            mapFromDriverValue: [Function: mapFromDriverValue],
          },
          shouldInlineParams: false,
          queryChunks: [
            StringChunk {
              value: [ "'[]'::jsonb" ],
              getSQL: [Function: getSQL],
            }
          ],
          append: [Function: append],
          toQuery: [Function: toQuery],
          buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
          mapInlineParam: [Function: mapInlineParam],
          getSQL: [Function: getSQL],
          as: [Function: as],
          mapWith: [Function: mapWith],
          inlineParams: [Function: inlineParams],
          if: [Function: if],
        },
        hasDefault: true,
        primaryKey: false,
        isUnique: false,
        uniqueName: "agents_plugins_unique",
        uniqueType: undefined,
        dataType: "json",
        columnType: "PgJsonb",
        generated: undefined,
      },
      table: [Circular],
      getSQLType: [Function: getSQLType],
      mapToDriverValue: [Function: mapToDriverValue],
      mapFromDriverValue: [Function: mapFromDriverValue],
      shouldDisableInsert: [Function: shouldDisableInsert],
      getSQL: [Function],
    },
    settings: PgJsonb {
      name: "settings",
      keyAsName: false,
      primary: false,
      notNull: false,
      default: SQL {
        decoder: {
          mapFromDriverValue: [Function: mapFromDriverValue],
        },
        shouldInlineParams: false,
        queryChunks: [
          StringChunk {
            value: [ "'{}'::jsonb" ],
            getSQL: [Function: getSQL],
          }
        ],
        append: [Function: append],
        toQuery: [Function: toQuery],
        buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
        mapInlineParam: [Function: mapInlineParam],
        getSQL: [Function: getSQL],
        as: [Function: as],
        mapWith: [Function: mapWith],
        inlineParams: [Function: inlineParams],
        if: [Function: if],
      },
      defaultFn: undefined,
      onUpdateFn: undefined,
      hasDefault: true,
      isUnique: false,
      uniqueName: "agents_settings_unique",
      uniqueType: undefined,
      dataType: "json",
      columnType: "PgJsonb",
      enumValues: undefined,
      generated: undefined,
      generatedIdentity: undefined,
      config: {
        name: "settings",
        keyAsName: false,
        notNull: false,
        default: SQL {
          decoder: {
            mapFromDriverValue: [Function: mapFromDriverValue],
          },
          shouldInlineParams: false,
          queryChunks: [
            StringChunk {
              value: [ "'{}'::jsonb" ],
              getSQL: [Function: getSQL],
            }
          ],
          append: [Function: append],
          toQuery: [Function: toQuery],
          buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
          mapInlineParam: [Function: mapInlineParam],
          getSQL: [Function: getSQL],
          as: [Function: as],
          mapWith: [Function: mapWith],
          inlineParams: [Function: inlineParams],
          if: [Function: if],
        },
        hasDefault: true,
        primaryKey: false,
        isUnique: false,
        uniqueName: "agents_settings_unique",
        uniqueType: undefined,
        dataType: "json",
        columnType: "PgJsonb",
        generated: undefined,
      },
      table: [Circular],
      getSQLType: [Function: getSQLType],
      mapToDriverValue: [Function: mapToDriverValue],
      mapFromDriverValue: [Function: mapFromDriverValue],
      shouldDisableInsert: [Function: shouldDisableInsert],
      getSQL: [Function],
    },
    style: PgJsonb {
      name: "style",
      keyAsName: false,
      primary: false,
      notNull: false,
      default: SQL {
        decoder: {
          mapFromDriverValue: [Function: mapFromDriverValue],
        },
        shouldInlineParams: false,
        queryChunks: [
          StringChunk {
            value: [ "'{}'::jsonb" ],
            getSQL: [Function: getSQL],
          }
        ],
        append: [Function: append],
        toQuery: [Function: toQuery],
        buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
        mapInlineParam: [Function: mapInlineParam],
        getSQL: [Function: getSQL],
        as: [Function: as],
        mapWith: [Function: mapWith],
        inlineParams: [Function: inlineParams],
        if: [Function: if],
      },
      defaultFn: undefined,
      onUpdateFn: undefined,
      hasDefault: true,
      isUnique: false,
      uniqueName: "agents_style_unique",
      uniqueType: undefined,
      dataType: "json",
      columnType: "PgJsonb",
      enumValues: undefined,
      generated: undefined,
      generatedIdentity: undefined,
      config: {
        name: "style",
        keyAsName: false,
        notNull: false,
        default: SQL {
          decoder: {
            mapFromDriverValue: [Function: mapFromDriverValue],
          },
          shouldInlineParams: false,
          queryChunks: [
            StringChunk {
              value: [ "'{}'::jsonb" ],
              getSQL: [Function: getSQL],
            }
          ],
          append: [Function: append],
          toQuery: [Function: toQuery],
          buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
          mapInlineParam: [Function: mapInlineParam],
          getSQL: [Function: getSQL],
          as: [Function: as],
          mapWith: [Function: mapWith],
          inlineParams: [Function: inlineParams],
          if: [Function: if],
        },
        hasDefault: true,
        primaryKey: false,
        isUnique: false,
        uniqueName: "agents_style_unique",
        uniqueType: undefined,
        dataType: "json",
        columnType: "PgJsonb",
        generated: undefined,
      },
      table: [Circular],
      getSQLType: [Function: getSQLType],
      mapToDriverValue: [Function: mapToDriverValue],
      mapFromDriverValue: [Function: mapFromDriverValue],
      shouldDisableInsert: [Function: shouldDisableInsert],
      getSQL: [Function],
    },
    enableRLS: [Function: enableRLS],
    getSQL: [Function],
  }, PgTable {
    [Symbol(drizzle:Name)]: "cache",
    [Symbol(drizzle:OriginalName)]: "cache",
    [Symbol(drizzle:Schema)]: undefined,
    [Symbol(drizzle:Columns)]: {
      id: PgUUID {
        name: "id",
        keyAsName: false,
        primary: true,
        notNull: true,
        default: SQL {
          decoder: {
            mapFromDriverValue: [Function: mapFromDriverValue],
          },
          shouldInlineParams: false,
          queryChunks: [
            StringChunk {
              value: [ "gen_random_uuid()" ],
              getSQL: [Function: getSQL],
            }
          ],
          append: [Function: append],
          toQuery: [Function: toQuery],
          buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
          mapInlineParam: [Function: mapInlineParam],
          getSQL: [Function: getSQL],
          as: [Function: as],
          mapWith: [Function: mapWith],
          inlineParams: [Function: inlineParams],
          if: [Function: if],
        },
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: true,
        isUnique: false,
        uniqueName: "cache_id_unique",
        uniqueType: undefined,
        dataType: "string",
        columnType: "PgUUID",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "id",
          keyAsName: false,
          notNull: true,
          default: SQL {
            decoder: {
              mapFromDriverValue: [Function: mapFromDriverValue],
            },
            shouldInlineParams: false,
            queryChunks: [
              StringChunk {
                value: [ "gen_random_uuid()" ],
                getSQL: [Function: getSQL],
              }
            ],
            append: [Function: append],
            toQuery: [Function: toQuery],
            buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
            mapInlineParam: [Function: mapInlineParam],
            getSQL: [Function: getSQL],
            as: [Function: as],
            mapWith: [Function: mapWith],
            inlineParams: [Function: inlineParams],
            if: [Function: if],
          },
          hasDefault: true,
          primaryKey: true,
          isUnique: false,
          uniqueName: "cache_id_unique",
          uniqueType: undefined,
          dataType: "string",
          columnType: "PgUUID",
          generated: undefined,
        },
        table: [Circular],
        getSQLType: [Function: getSQLType],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      key: PgText {
        name: "key",
        keyAsName: false,
        primary: false,
        notNull: true,
        default: undefined,
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: false,
        isUnique: false,
        uniqueName: "cache_key_unique",
        uniqueType: undefined,
        dataType: "string",
        columnType: "PgText",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "key",
          keyAsName: false,
          notNull: true,
          default: undefined,
          hasDefault: false,
          primaryKey: false,
          isUnique: false,
          uniqueName: "cache_key_unique",
          uniqueType: undefined,
          dataType: "string",
          columnType: "PgText",
          generated: undefined,
          enumValues: undefined,
        },
        table: [Circular],
        getSQLType: [Function: getSQLType],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      agentId: PgUUID {
        name: "agentId",
        keyAsName: false,
        primary: false,
        notNull: true,
        default: undefined,
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: false,
        isUnique: false,
        uniqueName: "cache_agentId_unique",
        uniqueType: undefined,
        dataType: "string",
        columnType: "PgUUID",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "agentId",
          keyAsName: false,
          notNull: true,
          default: undefined,
          hasDefault: false,
          primaryKey: false,
          isUnique: false,
          uniqueName: "cache_agentId_unique",
          uniqueType: undefined,
          dataType: "string",
          columnType: "PgUUID",
          generated: undefined,
        },
        table: [Circular],
        getSQLType: [Function: getSQLType],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      value: PgJsonb {
        name: "value",
        keyAsName: false,
        primary: false,
        notNull: true,
        default: undefined,
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: false,
        isUnique: false,
        uniqueName: "cache_value_unique",
        uniqueType: undefined,
        dataType: "json",
        columnType: "PgJsonb",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "value",
          keyAsName: false,
          notNull: true,
          default: undefined,
          hasDefault: false,
          primaryKey: false,
          isUnique: false,
          uniqueName: "cache_value_unique",
          uniqueType: undefined,
          dataType: "json",
          columnType: "PgJsonb",
          generated: undefined,
        },
        table: [Circular],
        getSQLType: [Function: getSQLType],
        mapToDriverValue: [Function: mapToDriverValue],
        mapFromDriverValue: [Function: mapFromDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      createdAt: PgCustomColumn {
        name: "createdAt",
        keyAsName: false,
        primary: false,
        notNull: true,
        default: SQL {
          decoder: {
            mapFromDriverValue: [Function: mapFromDriverValue],
          },
          shouldInlineParams: false,
          queryChunks: [
            StringChunk {
              value: [ "now()" ],
              getSQL: [Function: getSQL],
            }
          ],
          append: [Function: append],
          toQuery: [Function: toQuery],
          buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
          mapInlineParam: [Function: mapInlineParam],
          getSQL: [Function: getSQL],
          as: [Function: as],
          mapWith: [Function: mapWith],
          inlineParams: [Function: inlineParams],
          if: [Function: if],
        },
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: true,
        isUnique: false,
        uniqueName: "cache_createdAt_unique",
        uniqueType: undefined,
        dataType: "custom",
        columnType: "PgCustomColumn",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "createdAt",
          keyAsName: false,
          notNull: true,
          default: SQL {
            decoder: {
              mapFromDriverValue: [Function: mapFromDriverValue],
            },
            shouldInlineParams: false,
            queryChunks: [
              StringChunk {
                value: [ "now()" ],
                getSQL: [Function: getSQL],
              }
            ],
            append: [Function: append],
            toQuery: [Function: toQuery],
            buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
            mapInlineParam: [Function: mapInlineParam],
            getSQL: [Function: getSQL],
            as: [Function: as],
            mapWith: [Function: mapWith],
            inlineParams: [Function: inlineParams],
            if: [Function: if],
          },
          hasDefault: true,
          primaryKey: false,
          isUnique: false,
          uniqueName: "cache_createdAt_unique",
          uniqueType: undefined,
          dataType: "custom",
          columnType: "PgCustomColumn",
          generated: undefined,
          fieldConfig: undefined,
          customTypeParams: {
            dataType: [Function: dataType],
            toDriver: [Function: toDriver],
            fromDriver: [Function: fromDriver],
          },
        },
        table: [Circular],
        sqlName: "timestamptz",
        mapTo: [Function: toDriver],
        mapFrom: [Function: fromDriver],
        getSQLType: [Function: getSQLType],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      expiresAt: PgCustomColumn {
        name: "expiresAt",
        keyAsName: false,
        primary: false,
        notNull: false,
        default: undefined,
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: false,
        isUnique: false,
        uniqueName: "cache_expiresAt_unique",
        uniqueType: undefined,
        dataType: "custom",
        columnType: "PgCustomColumn",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "expiresAt",
          keyAsName: false,
          notNull: false,
          default: undefined,
          hasDefault: false,
          primaryKey: false,
          isUnique: false,
          uniqueName: "cache_expiresAt_unique",
          uniqueType: undefined,
          dataType: "custom",
          columnType: "PgCustomColumn",
          generated: undefined,
          fieldConfig: undefined,
          customTypeParams: {
            dataType: [Function: dataType],
            toDriver: [Function: toDriver],
            fromDriver: [Function: fromDriver],
          },
        },
        table: [Circular],
        sqlName: "timestamptz",
        mapTo: [Function: toDriver],
        mapFrom: [Function: fromDriver],
        getSQLType: [Function: getSQLType],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
    },
    [Symbol(drizzle:ExtraConfigColumns)]: {
      id: ExtraConfigColumn {
        name: "id",
        keyAsName: false,
        primary: true,
        notNull: true,
        default: SQL {
          decoder: {
            mapFromDriverValue: [Function: mapFromDriverValue],
          },
          shouldInlineParams: false,
          queryChunks: [
            StringChunk {
              value: [ "gen_random_uuid()" ],
              getSQL: [Function: getSQL],
            }
          ],
          append: [Function: append],
          toQuery: [Function: toQuery],
          buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
          mapInlineParam: [Function: mapInlineParam],
          getSQL: [Function: getSQL],
          as: [Function: as],
          mapWith: [Function: mapWith],
          inlineParams: [Function: inlineParams],
          if: [Function: if],
        },
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: true,
        isUnique: false,
        uniqueName: "cache_id_unique",
        uniqueType: undefined,
        dataType: "string",
        columnType: "PgUUID",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "id",
          keyAsName: false,
          notNull: true,
          default: SQL {
            decoder: {
              mapFromDriverValue: [Function: mapFromDriverValue],
            },
            shouldInlineParams: false,
            queryChunks: [
              StringChunk {
                value: [ "gen_random_uuid()" ],
                getSQL: [Function: getSQL],
              }
            ],
            append: [Function: append],
            toQuery: [Function: toQuery],
            buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
            mapInlineParam: [Function: mapInlineParam],
            getSQL: [Function: getSQL],
            as: [Function: as],
            mapWith: [Function: mapWith],
            inlineParams: [Function: inlineParams],
            if: [Function: if],
          },
          hasDefault: true,
          primaryKey: true,
          isUnique: false,
          uniqueName: "cache_id_unique",
          uniqueType: undefined,
          dataType: "string",
          columnType: "PgUUID",
          generated: undefined,
        },
        table: [Circular],
        indexConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        defaultConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        getSQLType: [Function: getSQLType],
        asc: [Function: asc],
        desc: [Function: desc],
        nullsFirst: [Function: nullsFirst],
        nullsLast: [Function: nullsLast],
        op: [Function: op],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      key: ExtraConfigColumn {
        name: "key",
        keyAsName: false,
        primary: false,
        notNull: true,
        default: undefined,
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: false,
        isUnique: false,
        uniqueName: "cache_key_unique",
        uniqueType: undefined,
        dataType: "string",
        columnType: "PgText",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "key",
          keyAsName: false,
          notNull: true,
          default: undefined,
          hasDefault: false,
          primaryKey: false,
          isUnique: false,
          uniqueName: "cache_key_unique",
          uniqueType: undefined,
          dataType: "string",
          columnType: "PgText",
          generated: undefined,
          enumValues: undefined,
        },
        table: [Circular],
        indexConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        defaultConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        getSQLType: [Function: getSQLType],
        asc: [Function: asc],
        desc: [Function: desc],
        nullsFirst: [Function: nullsFirst],
        nullsLast: [Function: nullsLast],
        op: [Function: op],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      agentId: ExtraConfigColumn {
        name: "agentId",
        keyAsName: false,
        primary: false,
        notNull: true,
        default: undefined,
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: false,
        isUnique: false,
        uniqueName: "cache_agentId_unique",
        uniqueType: undefined,
        dataType: "string",
        columnType: "PgUUID",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "agentId",
          keyAsName: false,
          notNull: true,
          default: undefined,
          hasDefault: false,
          primaryKey: false,
          isUnique: false,
          uniqueName: "cache_agentId_unique",
          uniqueType: undefined,
          dataType: "string",
          columnType: "PgUUID",
          generated: undefined,
        },
        table: [Circular],
        indexConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        defaultConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        getSQLType: [Function: getSQLType],
        asc: [Function: asc],
        desc: [Function: desc],
        nullsFirst: [Function: nullsFirst],
        nullsLast: [Function: nullsLast],
        op: [Function: op],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      value: ExtraConfigColumn {
        name: "value",
        keyAsName: false,
        primary: false,
        notNull: true,
        default: undefined,
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: false,
        isUnique: false,
        uniqueName: "cache_value_unique",
        uniqueType: undefined,
        dataType: "json",
        columnType: "PgJsonb",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "value",
          keyAsName: false,
          notNull: true,
          default: undefined,
          hasDefault: false,
          primaryKey: false,
          isUnique: false,
          uniqueName: "cache_value_unique",
          uniqueType: undefined,
          dataType: "json",
          columnType: "PgJsonb",
          generated: undefined,
        },
        table: [Circular],
        indexConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        defaultConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        getSQLType: [Function: getSQLType],
        asc: [Function: asc],
        desc: [Function: desc],
        nullsFirst: [Function: nullsFirst],
        nullsLast: [Function: nullsLast],
        op: [Function: op],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      createdAt: ExtraConfigColumn {
        name: "createdAt",
        keyAsName: false,
        primary: false,
        notNull: true,
        default: SQL {
          decoder: {
            mapFromDriverValue: [Function: mapFromDriverValue],
          },
          shouldInlineParams: false,
          queryChunks: [
            StringChunk {
              value: [ "now()" ],
              getSQL: [Function: getSQL],
            }
          ],
          append: [Function: append],
          toQuery: [Function: toQuery],
          buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
          mapInlineParam: [Function: mapInlineParam],
          getSQL: [Function: getSQL],
          as: [Function: as],
          mapWith: [Function: mapWith],
          inlineParams: [Function: inlineParams],
          if: [Function: if],
        },
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: true,
        isUnique: false,
        uniqueName: "cache_createdAt_unique",
        uniqueType: undefined,
        dataType: "custom",
        columnType: "PgCustomColumn",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "createdAt",
          keyAsName: false,
          notNull: true,
          default: SQL {
            decoder: {
              mapFromDriverValue: [Function: mapFromDriverValue],
            },
            shouldInlineParams: false,
            queryChunks: [
              StringChunk {
                value: [ "now()" ],
                getSQL: [Function: getSQL],
              }
            ],
            append: [Function: append],
            toQuery: [Function: toQuery],
            buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
            mapInlineParam: [Function: mapInlineParam],
            getSQL: [Function: getSQL],
            as: [Function: as],
            mapWith: [Function: mapWith],
            inlineParams: [Function: inlineParams],
            if: [Function: if],
          },
          hasDefault: true,
          primaryKey: false,
          isUnique: false,
          uniqueName: "cache_createdAt_unique",
          uniqueType: undefined,
          dataType: "custom",
          columnType: "PgCustomColumn",
          generated: undefined,
          fieldConfig: undefined,
          customTypeParams: {
            dataType: [Function: dataType],
            toDriver: [Function: toDriver],
            fromDriver: [Function: fromDriver],
          },
        },
        table: [Circular],
        indexConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        defaultConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        getSQLType: [Function: getSQLType],
        asc: [Function: asc],
        desc: [Function: desc],
        nullsFirst: [Function: nullsFirst],
        nullsLast: [Function: nullsLast],
        op: [Function: op],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      expiresAt: ExtraConfigColumn {
        name: "expiresAt",
        keyAsName: false,
        primary: false,
        notNull: false,
        default: undefined,
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: false,
        isUnique: false,
        uniqueName: "cache_expiresAt_unique",
        uniqueType: undefined,
        dataType: "custom",
        columnType: "PgCustomColumn",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "expiresAt",
          keyAsName: false,
          notNull: false,
          default: undefined,
          hasDefault: false,
          primaryKey: false,
          isUnique: false,
          uniqueName: "cache_expiresAt_unique",
          uniqueType: undefined,
          dataType: "custom",
          columnType: "PgCustomColumn",
          generated: undefined,
          fieldConfig: undefined,
          customTypeParams: {
            dataType: [Function: dataType],
            toDriver: [Function: toDriver],
            fromDriver: [Function: fromDriver],
          },
        },
        table: [Circular],
        indexConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        defaultConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        getSQLType: [Function: getSQLType],
        asc: [Function: asc],
        desc: [Function: desc],
        nullsFirst: [Function: nullsFirst],
        nullsLast: [Function: nullsLast],
        op: [Function: op],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
    },
    [Symbol(drizzle:BaseName)]: "cache",
    [Symbol(drizzle:IsAlias)]: false,
    [Symbol(drizzle:IsDrizzleTable)]: true,
    [Symbol(drizzle:ExtraConfigBuilder)]: [Function],
    [Symbol(drizzle:PgInlineForeignKeys)]: [
      ForeignKey {
        reference: [Function],
        onUpdate: "no action",
        onDelete: "cascade",
        table: [Circular],
        getName: [Function: getName],
      }
    ],
    [Symbol(drizzle:EnableRLS)]: false,
    id: PgUUID {
      name: "id",
      keyAsName: false,
      primary: true,
      notNull: true,
      default: SQL {
        decoder: {
          mapFromDriverValue: [Function: mapFromDriverValue],
        },
        shouldInlineParams: false,
        queryChunks: [
          StringChunk {
            value: [ "gen_random_uuid()" ],
            getSQL: [Function: getSQL],
          }
        ],
        append: [Function: append],
        toQuery: [Function: toQuery],
        buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
        mapInlineParam: [Function: mapInlineParam],
        getSQL: [Function: getSQL],
        as: [Function: as],
        mapWith: [Function: mapWith],
        inlineParams: [Function: inlineParams],
        if: [Function: if],
      },
      defaultFn: undefined,
      onUpdateFn: undefined,
      hasDefault: true,
      isUnique: false,
      uniqueName: "cache_id_unique",
      uniqueType: undefined,
      dataType: "string",
      columnType: "PgUUID",
      enumValues: undefined,
      generated: undefined,
      generatedIdentity: undefined,
      config: {
        name: "id",
        keyAsName: false,
        notNull: true,
        default: SQL {
          decoder: {
            mapFromDriverValue: [Function: mapFromDriverValue],
          },
          shouldInlineParams: false,
          queryChunks: [
            StringChunk {
              value: [ "gen_random_uuid()" ],
              getSQL: [Function: getSQL],
            }
          ],
          append: [Function: append],
          toQuery: [Function: toQuery],
          buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
          mapInlineParam: [Function: mapInlineParam],
          getSQL: [Function: getSQL],
          as: [Function: as],
          mapWith: [Function: mapWith],
          inlineParams: [Function: inlineParams],
          if: [Function: if],
        },
        hasDefault: true,
        primaryKey: true,
        isUnique: false,
        uniqueName: "cache_id_unique",
        uniqueType: undefined,
        dataType: "string",
        columnType: "PgUUID",
        generated: undefined,
      },
      table: [Circular],
      getSQLType: [Function: getSQLType],
      mapFromDriverValue: [Function: mapFromDriverValue],
      mapToDriverValue: [Function: mapToDriverValue],
      shouldDisableInsert: [Function: shouldDisableInsert],
      getSQL: [Function],
    },
    key: PgText {
      name: "key",
      keyAsName: false,
      primary: false,
      notNull: true,
      default: undefined,
      defaultFn: undefined,
      onUpdateFn: undefined,
      hasDefault: false,
      isUnique: false,
      uniqueName: "cache_key_unique",
      uniqueType: undefined,
      dataType: "string",
      columnType: "PgText",
      enumValues: undefined,
      generated: undefined,
      generatedIdentity: undefined,
      config: {
        name: "key",
        keyAsName: false,
        notNull: true,
        default: undefined,
        hasDefault: false,
        primaryKey: false,
        isUnique: false,
        uniqueName: "cache_key_unique",
        uniqueType: undefined,
        dataType: "string",
        columnType: "PgText",
        generated: undefined,
        enumValues: undefined,
      },
      table: [Circular],
      getSQLType: [Function: getSQLType],
      mapFromDriverValue: [Function: mapFromDriverValue],
      mapToDriverValue: [Function: mapToDriverValue],
      shouldDisableInsert: [Function: shouldDisableInsert],
      getSQL: [Function],
    },
    agentId: PgUUID {
      name: "agentId",
      keyAsName: false,
      primary: false,
      notNull: true,
      default: undefined,
      defaultFn: undefined,
      onUpdateFn: undefined,
      hasDefault: false,
      isUnique: false,
      uniqueName: "cache_agentId_unique",
      uniqueType: undefined,
      dataType: "string",
      columnType: "PgUUID",
      enumValues: undefined,
      generated: undefined,
      generatedIdentity: undefined,
      config: {
        name: "agentId",
        keyAsName: false,
        notNull: true,
        default: undefined,
        hasDefault: false,
        primaryKey: false,
        isUnique: false,
        uniqueName: "cache_agentId_unique",
        uniqueType: undefined,
        dataType: "string",
        columnType: "PgUUID",
        generated: undefined,
      },
      table: [Circular],
      getSQLType: [Function: getSQLType],
      mapFromDriverValue: [Function: mapFromDriverValue],
      mapToDriverValue: [Function: mapToDriverValue],
      shouldDisableInsert: [Function: shouldDisableInsert],
      getSQL: [Function],
    },
    value: PgJsonb {
      name: "value",
      keyAsName: false,
      primary: false,
      notNull: true,
      default: undefined,
      defaultFn: undefined,
      onUpdateFn: undefined,
      hasDefault: false,
      isUnique: false,
      uniqueName: "cache_value_unique",
      uniqueType: undefined,
      dataType: "json",
      columnType: "PgJsonb",
      enumValues: undefined,
      generated: undefined,
      generatedIdentity: undefined,
      config: {
        name: "value",
        keyAsName: false,
        notNull: true,
        default: undefined,
        hasDefault: false,
        primaryKey: false,
        isUnique: false,
        uniqueName: "cache_value_unique",
        uniqueType: undefined,
        dataType: "json",
        columnType: "PgJsonb",
        generated: undefined,
      },
      table: [Circular],
      getSQLType: [Function: getSQLType],
      mapToDriverValue: [Function: mapToDriverValue],
      mapFromDriverValue: [Function: mapFromDriverValue],
      shouldDisableInsert: [Function: shouldDisableInsert],
      getSQL: [Function],
    },
    createdAt: PgCustomColumn {
      name: "createdAt",
      keyAsName: false,
      primary: false,
      notNull: true,
      default: SQL {
        decoder: {
          mapFromDriverValue: [Function: mapFromDriverValue],
        },
        shouldInlineParams: false,
        queryChunks: [
          StringChunk {
            value: [ "now()" ],
            getSQL: [Function: getSQL],
          }
        ],
        append: [Function: append],
        toQuery: [Function: toQuery],
        buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
        mapInlineParam: [Function: mapInlineParam],
        getSQL: [Function: getSQL],
        as: [Function: as],
        mapWith: [Function: mapWith],
        inlineParams: [Function: inlineParams],
        if: [Function: if],
      },
      defaultFn: undefined,
      onUpdateFn: undefined,
      hasDefault: true,
      isUnique: false,
      uniqueName: "cache_createdAt_unique",
      uniqueType: undefined,
      dataType: "custom",
      columnType: "PgCustomColumn",
      enumValues: undefined,
      generated: undefined,
      generatedIdentity: undefined,
      config: {
        name: "createdAt",
        keyAsName: false,
        notNull: true,
        default: SQL {
          decoder: {
            mapFromDriverValue: [Function: mapFromDriverValue],
          },
          shouldInlineParams: false,
          queryChunks: [
            StringChunk {
              value: [ "now()" ],
              getSQL: [Function: getSQL],
            }
          ],
          append: [Function: append],
          toQuery: [Function: toQuery],
          buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
          mapInlineParam: [Function: mapInlineParam],
          getSQL: [Function: getSQL],
          as: [Function: as],
          mapWith: [Function: mapWith],
          inlineParams: [Function: inlineParams],
          if: [Function: if],
        },
        hasDefault: true,
        primaryKey: false,
        isUnique: false,
        uniqueName: "cache_createdAt_unique",
        uniqueType: undefined,
        dataType: "custom",
        columnType: "PgCustomColumn",
        generated: undefined,
        fieldConfig: undefined,
        customTypeParams: {
          dataType: [Function: dataType],
          toDriver: [Function: toDriver],
          fromDriver: [Function: fromDriver],
        },
      },
      table: [Circular],
      sqlName: "timestamptz",
      mapTo: [Function: toDriver],
      mapFrom: [Function: fromDriver],
      getSQLType: [Function: getSQLType],
      mapFromDriverValue: [Function: mapFromDriverValue],
      mapToDriverValue: [Function: mapToDriverValue],
      shouldDisableInsert: [Function: shouldDisableInsert],
      getSQL: [Function],
    },
    expiresAt: PgCustomColumn {
      name: "expiresAt",
      keyAsName: false,
      primary: false,
      notNull: false,
      default: undefined,
      defaultFn: undefined,
      onUpdateFn: undefined,
      hasDefault: false,
      isUnique: false,
      uniqueName: "cache_expiresAt_unique",
      uniqueType: undefined,
      dataType: "custom",
      columnType: "PgCustomColumn",
      enumValues: undefined,
      generated: undefined,
      generatedIdentity: undefined,
      config: {
        name: "expiresAt",
        keyAsName: false,
        notNull: false,
        default: undefined,
        hasDefault: false,
        primaryKey: false,
        isUnique: false,
        uniqueName: "cache_expiresAt_unique",
        uniqueType: undefined,
        dataType: "custom",
        columnType: "PgCustomColumn",
        generated: undefined,
        fieldConfig: undefined,
        customTypeParams: {
          dataType: [Function: dataType],
          toDriver: [Function: toDriver],
          fromDriver: [Function: fromDriver],
        },
      },
      table: [Circular],
      sqlName: "timestamptz",
      mapTo: [Function: toDriver],
      mapFrom: [Function: fromDriver],
      getSQLType: [Function: getSQLType],
      mapFromDriverValue: [Function: mapFromDriverValue],
      mapToDriverValue: [Function: mapToDriverValue],
      shouldDisableInsert: [Function: shouldDisableInsert],
      getSQL: [Function],
    },
    enableRLS: [Function: enableRLS],
    getSQL: [Function],
  }, PgTable {
    [Symbol(drizzle:Name)]: "components",
    [Symbol(drizzle:OriginalName)]: "components",
    [Symbol(drizzle:Schema)]: undefined,
    [Symbol(drizzle:Columns)]: {
      id: PgUUID {
        name: "id",
        keyAsName: false,
        primary: true,
        notNull: true,
        default: SQL {
          decoder: {
            mapFromDriverValue: [Function: mapFromDriverValue],
          },
          shouldInlineParams: false,
          queryChunks: [
            StringChunk {
              value: [ "gen_random_uuid()" ],
              getSQL: [Function: getSQL],
            }
          ],
          append: [Function: append],
          toQuery: [Function: toQuery],
          buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
          mapInlineParam: [Function: mapInlineParam],
          getSQL: [Function: getSQL],
          as: [Function: as],
          mapWith: [Function: mapWith],
          inlineParams: [Function: inlineParams],
          if: [Function: if],
        },
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: true,
        isUnique: false,
        uniqueName: "components_id_unique",
        uniqueType: undefined,
        dataType: "string",
        columnType: "PgUUID",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "id",
          keyAsName: false,
          notNull: true,
          default: SQL {
            decoder: {
              mapFromDriverValue: [Function: mapFromDriverValue],
            },
            shouldInlineParams: false,
            queryChunks: [
              StringChunk {
                value: [ "gen_random_uuid()" ],
                getSQL: [Function: getSQL],
              }
            ],
            append: [Function: append],
            toQuery: [Function: toQuery],
            buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
            mapInlineParam: [Function: mapInlineParam],
            getSQL: [Function: getSQL],
            as: [Function: as],
            mapWith: [Function: mapWith],
            inlineParams: [Function: inlineParams],
            if: [Function: if],
          },
          hasDefault: true,
          primaryKey: true,
          isUnique: false,
          uniqueName: "components_id_unique",
          uniqueType: undefined,
          dataType: "string",
          columnType: "PgUUID",
          generated: undefined,
        },
        table: [Circular],
        getSQLType: [Function: getSQLType],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      entityId: PgUUID {
        name: "entityId",
        keyAsName: false,
        primary: false,
        notNull: true,
        default: undefined,
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: false,
        isUnique: false,
        uniqueName: "components_entityId_unique",
        uniqueType: undefined,
        dataType: "string",
        columnType: "PgUUID",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "entityId",
          keyAsName: false,
          notNull: true,
          default: undefined,
          hasDefault: false,
          primaryKey: false,
          isUnique: false,
          uniqueName: "components_entityId_unique",
          uniqueType: undefined,
          dataType: "string",
          columnType: "PgUUID",
          generated: undefined,
        },
        table: [Circular],
        getSQLType: [Function: getSQLType],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      agentId: PgUUID {
        name: "agentId",
        keyAsName: false,
        primary: false,
        notNull: true,
        default: undefined,
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: false,
        isUnique: false,
        uniqueName: "components_agentId_unique",
        uniqueType: undefined,
        dataType: "string",
        columnType: "PgUUID",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "agentId",
          keyAsName: false,
          notNull: true,
          default: undefined,
          hasDefault: false,
          primaryKey: false,
          isUnique: false,
          uniqueName: "components_agentId_unique",
          uniqueType: undefined,
          dataType: "string",
          columnType: "PgUUID",
          generated: undefined,
        },
        table: [Circular],
        getSQLType: [Function: getSQLType],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      roomId: PgUUID {
        name: "roomId",
        keyAsName: false,
        primary: false,
        notNull: true,
        default: undefined,
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: false,
        isUnique: false,
        uniqueName: "components_roomId_unique",
        uniqueType: undefined,
        dataType: "string",
        columnType: "PgUUID",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "roomId",
          keyAsName: false,
          notNull: true,
          default: undefined,
          hasDefault: false,
          primaryKey: false,
          isUnique: false,
          uniqueName: "components_roomId_unique",
          uniqueType: undefined,
          dataType: "string",
          columnType: "PgUUID",
          generated: undefined,
        },
        table: [Circular],
        getSQLType: [Function: getSQLType],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      worldId: PgUUID {
        name: "worldId",
        keyAsName: false,
        primary: false,
        notNull: false,
        default: undefined,
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: false,
        isUnique: false,
        uniqueName: "components_worldId_unique",
        uniqueType: undefined,
        dataType: "string",
        columnType: "PgUUID",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "worldId",
          keyAsName: false,
          notNull: false,
          default: undefined,
          hasDefault: false,
          primaryKey: false,
          isUnique: false,
          uniqueName: "components_worldId_unique",
          uniqueType: undefined,
          dataType: "string",
          columnType: "PgUUID",
          generated: undefined,
        },
        table: [Circular],
        getSQLType: [Function: getSQLType],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      sourceEntityId: PgUUID {
        name: "sourceEntityId",
        keyAsName: false,
        primary: false,
        notNull: false,
        default: undefined,
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: false,
        isUnique: false,
        uniqueName: "components_sourceEntityId_unique",
        uniqueType: undefined,
        dataType: "string",
        columnType: "PgUUID",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "sourceEntityId",
          keyAsName: false,
          notNull: false,
          default: undefined,
          hasDefault: false,
          primaryKey: false,
          isUnique: false,
          uniqueName: "components_sourceEntityId_unique",
          uniqueType: undefined,
          dataType: "string",
          columnType: "PgUUID",
          generated: undefined,
        },
        table: [Circular],
        getSQLType: [Function: getSQLType],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      type: PgText {
        name: "type",
        keyAsName: false,
        primary: false,
        notNull: true,
        default: undefined,
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: false,
        isUnique: false,
        uniqueName: "components_type_unique",
        uniqueType: undefined,
        dataType: "string",
        columnType: "PgText",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "type",
          keyAsName: false,
          notNull: true,
          default: undefined,
          hasDefault: false,
          primaryKey: false,
          isUnique: false,
          uniqueName: "components_type_unique",
          uniqueType: undefined,
          dataType: "string",
          columnType: "PgText",
          generated: undefined,
          enumValues: undefined,
        },
        table: [Circular],
        getSQLType: [Function: getSQLType],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      data: PgJsonb {
        name: "data",
        keyAsName: false,
        primary: false,
        notNull: false,
        default: SQL {
          decoder: {
            mapFromDriverValue: [Function: mapFromDriverValue],
          },
          shouldInlineParams: false,
          queryChunks: [
            StringChunk {
              value: [ "'{}'::jsonb" ],
              getSQL: [Function: getSQL],
            }
          ],
          append: [Function: append],
          toQuery: [Function: toQuery],
          buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
          mapInlineParam: [Function: mapInlineParam],
          getSQL: [Function: getSQL],
          as: [Function: as],
          mapWith: [Function: mapWith],
          inlineParams: [Function: inlineParams],
          if: [Function: if],
        },
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: true,
        isUnique: false,
        uniqueName: "components_data_unique",
        uniqueType: undefined,
        dataType: "json",
        columnType: "PgJsonb",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "data",
          keyAsName: false,
          notNull: false,
          default: SQL {
            decoder: {
              mapFromDriverValue: [Function: mapFromDriverValue],
            },
            shouldInlineParams: false,
            queryChunks: [
              StringChunk {
                value: [ "'{}'::jsonb" ],
                getSQL: [Function: getSQL],
              }
            ],
            append: [Function: append],
            toQuery: [Function: toQuery],
            buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
            mapInlineParam: [Function: mapInlineParam],
            getSQL: [Function: getSQL],
            as: [Function: as],
            mapWith: [Function: mapWith],
            inlineParams: [Function: inlineParams],
            if: [Function: if],
          },
          hasDefault: true,
          primaryKey: false,
          isUnique: false,
          uniqueName: "components_data_unique",
          uniqueType: undefined,
          dataType: "json",
          columnType: "PgJsonb",
          generated: undefined,
        },
        table: [Circular],
        getSQLType: [Function: getSQLType],
        mapToDriverValue: [Function: mapToDriverValue],
        mapFromDriverValue: [Function: mapFromDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      createdAt: PgCustomColumn {
        name: "createdAt",
        keyAsName: false,
        primary: false,
        notNull: true,
        default: SQL {
          decoder: {
            mapFromDriverValue: [Function: mapFromDriverValue],
          },
          shouldInlineParams: false,
          queryChunks: [
            StringChunk {
              value: [ "now()" ],
              getSQL: [Function: getSQL],
            }
          ],
          append: [Function: append],
          toQuery: [Function: toQuery],
          buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
          mapInlineParam: [Function: mapInlineParam],
          getSQL: [Function: getSQL],
          as: [Function: as],
          mapWith: [Function: mapWith],
          inlineParams: [Function: inlineParams],
          if: [Function: if],
        },
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: true,
        isUnique: false,
        uniqueName: "components_createdAt_unique",
        uniqueType: undefined,
        dataType: "custom",
        columnType: "PgCustomColumn",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "createdAt",
          keyAsName: false,
          notNull: true,
          default: SQL {
            decoder: {
              mapFromDriverValue: [Function: mapFromDriverValue],
            },
            shouldInlineParams: false,
            queryChunks: [
              StringChunk {
                value: [ "now()" ],
                getSQL: [Function: getSQL],
              }
            ],
            append: [Function: append],
            toQuery: [Function: toQuery],
            buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
            mapInlineParam: [Function: mapInlineParam],
            getSQL: [Function: getSQL],
            as: [Function: as],
            mapWith: [Function: mapWith],
            inlineParams: [Function: inlineParams],
            if: [Function: if],
          },
          hasDefault: true,
          primaryKey: false,
          isUnique: false,
          uniqueName: "components_createdAt_unique",
          uniqueType: undefined,
          dataType: "custom",
          columnType: "PgCustomColumn",
          generated: undefined,
          fieldConfig: undefined,
          customTypeParams: {
            dataType: [Function: dataType],
            toDriver: [Function: toDriver],
            fromDriver: [Function: fromDriver],
          },
        },
        table: [Circular],
        sqlName: "timestamptz",
        mapTo: [Function: toDriver],
        mapFrom: [Function: fromDriver],
        getSQLType: [Function: getSQLType],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
    },
    [Symbol(drizzle:ExtraConfigColumns)]: {
      id: ExtraConfigColumn {
        name: "id",
        keyAsName: false,
        primary: true,
        notNull: true,
        default: SQL {
          decoder: {
            mapFromDriverValue: [Function: mapFromDriverValue],
          },
          shouldInlineParams: false,
          queryChunks: [
            StringChunk {
              value: [ "gen_random_uuid()" ],
              getSQL: [Function: getSQL],
            }
          ],
          append: [Function: append],
          toQuery: [Function: toQuery],
          buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
          mapInlineParam: [Function: mapInlineParam],
          getSQL: [Function: getSQL],
          as: [Function: as],
          mapWith: [Function: mapWith],
          inlineParams: [Function: inlineParams],
          if: [Function: if],
        },
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: true,
        isUnique: false,
        uniqueName: "components_id_unique",
        uniqueType: undefined,
        dataType: "string",
        columnType: "PgUUID",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "id",
          keyAsName: false,
          notNull: true,
          default: SQL {
            decoder: {
              mapFromDriverValue: [Function: mapFromDriverValue],
            },
            shouldInlineParams: false,
            queryChunks: [
              StringChunk {
                value: [ "gen_random_uuid()" ],
                getSQL: [Function: getSQL],
              }
            ],
            append: [Function: append],
            toQuery: [Function: toQuery],
            buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
            mapInlineParam: [Function: mapInlineParam],
            getSQL: [Function: getSQL],
            as: [Function: as],
            mapWith: [Function: mapWith],
            inlineParams: [Function: inlineParams],
            if: [Function: if],
          },
          hasDefault: true,
          primaryKey: true,
          isUnique: false,
          uniqueName: "components_id_unique",
          uniqueType: undefined,
          dataType: "string",
          columnType: "PgUUID",
          generated: undefined,
        },
        table: [Circular],
        indexConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        defaultConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        getSQLType: [Function: getSQLType],
        asc: [Function: asc],
        desc: [Function: desc],
        nullsFirst: [Function: nullsFirst],
        nullsLast: [Function: nullsLast],
        op: [Function: op],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      entityId: ExtraConfigColumn {
        name: "entityId",
        keyAsName: false,
        primary: false,
        notNull: true,
        default: undefined,
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: false,
        isUnique: false,
        uniqueName: "components_entityId_unique",
        uniqueType: undefined,
        dataType: "string",
        columnType: "PgUUID",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "entityId",
          keyAsName: false,
          notNull: true,
          default: undefined,
          hasDefault: false,
          primaryKey: false,
          isUnique: false,
          uniqueName: "components_entityId_unique",
          uniqueType: undefined,
          dataType: "string",
          columnType: "PgUUID",
          generated: undefined,
        },
        table: [Circular],
        indexConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        defaultConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        getSQLType: [Function: getSQLType],
        asc: [Function: asc],
        desc: [Function: desc],
        nullsFirst: [Function: nullsFirst],
        nullsLast: [Function: nullsLast],
        op: [Function: op],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      agentId: ExtraConfigColumn {
        name: "agentId",
        keyAsName: false,
        primary: false,
        notNull: true,
        default: undefined,
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: false,
        isUnique: false,
        uniqueName: "components_agentId_unique",
        uniqueType: undefined,
        dataType: "string",
        columnType: "PgUUID",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "agentId",
          keyAsName: false,
          notNull: true,
          default: undefined,
          hasDefault: false,
          primaryKey: false,
          isUnique: false,
          uniqueName: "components_agentId_unique",
          uniqueType: undefined,
          dataType: "string",
          columnType: "PgUUID",
          generated: undefined,
        },
        table: [Circular],
        indexConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        defaultConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        getSQLType: [Function: getSQLType],
        asc: [Function: asc],
        desc: [Function: desc],
        nullsFirst: [Function: nullsFirst],
        nullsLast: [Function: nullsLast],
        op: [Function: op],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      roomId: ExtraConfigColumn {
        name: "roomId",
        keyAsName: false,
        primary: false,
        notNull: true,
        default: undefined,
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: false,
        isUnique: false,
        uniqueName: "components_roomId_unique",
        uniqueType: undefined,
        dataType: "string",
        columnType: "PgUUID",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "roomId",
          keyAsName: false,
          notNull: true,
          default: undefined,
          hasDefault: false,
          primaryKey: false,
          isUnique: false,
          uniqueName: "components_roomId_unique",
          uniqueType: undefined,
          dataType: "string",
          columnType: "PgUUID",
          generated: undefined,
        },
        table: [Circular],
        indexConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        defaultConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        getSQLType: [Function: getSQLType],
        asc: [Function: asc],
        desc: [Function: desc],
        nullsFirst: [Function: nullsFirst],
        nullsLast: [Function: nullsLast],
        op: [Function: op],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      worldId: ExtraConfigColumn {
        name: "worldId",
        keyAsName: false,
        primary: false,
        notNull: false,
        default: undefined,
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: false,
        isUnique: false,
        uniqueName: "components_worldId_unique",
        uniqueType: undefined,
        dataType: "string",
        columnType: "PgUUID",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "worldId",
          keyAsName: false,
          notNull: false,
          default: undefined,
          hasDefault: false,
          primaryKey: false,
          isUnique: false,
          uniqueName: "components_worldId_unique",
          uniqueType: undefined,
          dataType: "string",
          columnType: "PgUUID",
          generated: undefined,
        },
        table: [Circular],
        indexConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        defaultConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        getSQLType: [Function: getSQLType],
        asc: [Function: asc],
        desc: [Function: desc],
        nullsFirst: [Function: nullsFirst],
        nullsLast: [Function: nullsLast],
        op: [Function: op],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      sourceEntityId: ExtraConfigColumn {
        name: "sourceEntityId",
        keyAsName: false,
        primary: false,
        notNull: false,
        default: undefined,
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: false,
        isUnique: false,
        uniqueName: "components_sourceEntityId_unique",
        uniqueType: undefined,
        dataType: "string",
        columnType: "PgUUID",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "sourceEntityId",
          keyAsName: false,
          notNull: false,
          default: undefined,
          hasDefault: false,
          primaryKey: false,
          isUnique: false,
          uniqueName: "components_sourceEntityId_unique",
          uniqueType: undefined,
          dataType: "string",
          columnType: "PgUUID",
          generated: undefined,
        },
        table: [Circular],
        indexConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        defaultConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        getSQLType: [Function: getSQLType],
        asc: [Function: asc],
        desc: [Function: desc],
        nullsFirst: [Function: nullsFirst],
        nullsLast: [Function: nullsLast],
        op: [Function: op],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      type: ExtraConfigColumn {
        name: "type",
        keyAsName: false,
        primary: false,
        notNull: true,
        default: undefined,
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: false,
        isUnique: false,
        uniqueName: "components_type_unique",
        uniqueType: undefined,
        dataType: "string",
        columnType: "PgText",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "type",
          keyAsName: false,
          notNull: true,
          default: undefined,
          hasDefault: false,
          primaryKey: false,
          isUnique: false,
          uniqueName: "components_type_unique",
          uniqueType: undefined,
          dataType: "string",
          columnType: "PgText",
          generated: undefined,
          enumValues: undefined,
        },
        table: [Circular],
        indexConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        defaultConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        getSQLType: [Function: getSQLType],
        asc: [Function: asc],
        desc: [Function: desc],
        nullsFirst: [Function: nullsFirst],
        nullsLast: [Function: nullsLast],
        op: [Function: op],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      data: ExtraConfigColumn {
        name: "data",
        keyAsName: false,
        primary: false,
        notNull: false,
        default: SQL {
          decoder: {
            mapFromDriverValue: [Function: mapFromDriverValue],
          },
          shouldInlineParams: false,
          queryChunks: [
            StringChunk {
              value: [ "'{}'::jsonb" ],
              getSQL: [Function: getSQL],
            }
          ],
          append: [Function: append],
          toQuery: [Function: toQuery],
          buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
          mapInlineParam: [Function: mapInlineParam],
          getSQL: [Function: getSQL],
          as: [Function: as],
          mapWith: [Function: mapWith],
          inlineParams: [Function: inlineParams],
          if: [Function: if],
        },
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: true,
        isUnique: false,
        uniqueName: "components_data_unique",
        uniqueType: undefined,
        dataType: "json",
        columnType: "PgJsonb",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "data",
          keyAsName: false,
          notNull: false,
          default: SQL {
            decoder: {
              mapFromDriverValue: [Function: mapFromDriverValue],
            },
            shouldInlineParams: false,
            queryChunks: [
              StringChunk {
                value: [ "'{}'::jsonb" ],
                getSQL: [Function: getSQL],
              }
            ],
            append: [Function: append],
            toQuery: [Function: toQuery],
            buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
            mapInlineParam: [Function: mapInlineParam],
            getSQL: [Function: getSQL],
            as: [Function: as],
            mapWith: [Function: mapWith],
            inlineParams: [Function: inlineParams],
            if: [Function: if],
          },
          hasDefault: true,
          primaryKey: false,
          isUnique: false,
          uniqueName: "components_data_unique",
          uniqueType: undefined,
          dataType: "json",
          columnType: "PgJsonb",
          generated: undefined,
        },
        table: [Circular],
        indexConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        defaultConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        getSQLType: [Function: getSQLType],
        asc: [Function: asc],
        desc: [Function: desc],
        nullsFirst: [Function: nullsFirst],
        nullsLast: [Function: nullsLast],
        op: [Function: op],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      createdAt: ExtraConfigColumn {
        name: "createdAt",
        keyAsName: false,
        primary: false,
        notNull: true,
        default: SQL {
          decoder: {
            mapFromDriverValue: [Function: mapFromDriverValue],
          },
          shouldInlineParams: false,
          queryChunks: [
            StringChunk {
              value: [ "now()" ],
              getSQL: [Function: getSQL],
            }
          ],
          append: [Function: append],
          toQuery: [Function: toQuery],
          buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
          mapInlineParam: [Function: mapInlineParam],
          getSQL: [Function: getSQL],
          as: [Function: as],
          mapWith: [Function: mapWith],
          inlineParams: [Function: inlineParams],
          if: [Function: if],
        },
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: true,
        isUnique: false,
        uniqueName: "components_createdAt_unique",
        uniqueType: undefined,
        dataType: "custom",
        columnType: "PgCustomColumn",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "createdAt",
          keyAsName: false,
          notNull: true,
          default: SQL {
            decoder: {
              mapFromDriverValue: [Function: mapFromDriverValue],
            },
            shouldInlineParams: false,
            queryChunks: [
              StringChunk {
                value: [ "now()" ],
                getSQL: [Function: getSQL],
              }
            ],
            append: [Function: append],
            toQuery: [Function: toQuery],
            buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
            mapInlineParam: [Function: mapInlineParam],
            getSQL: [Function: getSQL],
            as: [Function: as],
            mapWith: [Function: mapWith],
            inlineParams: [Function: inlineParams],
            if: [Function: if],
          },
          hasDefault: true,
          primaryKey: false,
          isUnique: false,
          uniqueName: "components_createdAt_unique",
          uniqueType: undefined,
          dataType: "custom",
          columnType: "PgCustomColumn",
          generated: undefined,
          fieldConfig: undefined,
          customTypeParams: {
            dataType: [Function: dataType],
            toDriver: [Function: toDriver],
            fromDriver: [Function: fromDriver],
          },
        },
        table: [Circular],
        indexConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        defaultConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        getSQLType: [Function: getSQLType],
        asc: [Function: asc],
        desc: [Function: desc],
        nullsFirst: [Function: nullsFirst],
        nullsLast: [Function: nullsLast],
        op: [Function: op],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
    },
    [Symbol(drizzle:BaseName)]: "components",
    [Symbol(drizzle:IsAlias)]: false,
    [Symbol(drizzle:IsDrizzleTable)]: true,
    [Symbol(drizzle:ExtraConfigBuilder)]: undefined,
    [Symbol(drizzle:PgInlineForeignKeys)]: [
      ForeignKey {
        reference: [Function],
        onUpdate: "no action",
        onDelete: "cascade",
        table: [Circular],
        getName: [Function: getName],
      }, ForeignKey {
        reference: [Function],
        onUpdate: "no action",
        onDelete: "cascade",
        table: [Circular],
        getName: [Function: getName],
      }, ForeignKey {
        reference: [Function],
        onUpdate: "no action",
        onDelete: "cascade",
        table: [Circular],
        getName: [Function: getName],
      }, ForeignKey {
        reference: [Function],
        onUpdate: "no action",
        onDelete: "cascade",
        table: [Circular],
        getName: [Function: getName],
      }, ForeignKey {
        reference: [Function],
        onUpdate: "no action",
        onDelete: "cascade",
        table: [Circular],
        getName: [Function: getName],
      }
    ],
    [Symbol(drizzle:EnableRLS)]: false,
    id: PgUUID {
      name: "id",
      keyAsName: false,
      primary: true,
      notNull: true,
      default: SQL {
        decoder: {
          mapFromDriverValue: [Function: mapFromDriverValue],
        },
        shouldInlineParams: false,
        queryChunks: [
          StringChunk {
            value: [ "gen_random_uuid()" ],
            getSQL: [Function: getSQL],
          }
        ],
        append: [Function: append],
        toQuery: [Function: toQuery],
        buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
        mapInlineParam: [Function: mapInlineParam],
        getSQL: [Function: getSQL],
        as: [Function: as],
        mapWith: [Function: mapWith],
        inlineParams: [Function: inlineParams],
        if: [Function: if],
      },
      defaultFn: undefined,
      onUpdateFn: undefined,
      hasDefault: true,
      isUnique: false,
      uniqueName: "components_id_unique",
      uniqueType: undefined,
      dataType: "string",
      columnType: "PgUUID",
      enumValues: undefined,
      generated: undefined,
      generatedIdentity: undefined,
      config: {
        name: "id",
        keyAsName: false,
        notNull: true,
        default: SQL {
          decoder: {
            mapFromDriverValue: [Function: mapFromDriverValue],
          },
          shouldInlineParams: false,
          queryChunks: [
            StringChunk {
              value: [ "gen_random_uuid()" ],
              getSQL: [Function: getSQL],
            }
          ],
          append: [Function: append],
          toQuery: [Function: toQuery],
          buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
          mapInlineParam: [Function: mapInlineParam],
          getSQL: [Function: getSQL],
          as: [Function: as],
          mapWith: [Function: mapWith],
          inlineParams: [Function: inlineParams],
          if: [Function: if],
        },
        hasDefault: true,
        primaryKey: true,
        isUnique: false,
        uniqueName: "components_id_unique",
        uniqueType: undefined,
        dataType: "string",
        columnType: "PgUUID",
        generated: undefined,
      },
      table: [Circular],
      getSQLType: [Function: getSQLType],
      mapFromDriverValue: [Function: mapFromDriverValue],
      mapToDriverValue: [Function: mapToDriverValue],
      shouldDisableInsert: [Function: shouldDisableInsert],
      getSQL: [Function],
    },
    entityId: PgUUID {
      name: "entityId",
      keyAsName: false,
      primary: false,
      notNull: true,
      default: undefined,
      defaultFn: undefined,
      onUpdateFn: undefined,
      hasDefault: false,
      isUnique: false,
      uniqueName: "components_entityId_unique",
      uniqueType: undefined,
      dataType: "string",
      columnType: "PgUUID",
      enumValues: undefined,
      generated: undefined,
      generatedIdentity: undefined,
      config: {
        name: "entityId",
        keyAsName: false,
        notNull: true,
        default: undefined,
        hasDefault: false,
        primaryKey: false,
        isUnique: false,
        uniqueName: "components_entityId_unique",
        uniqueType: undefined,
        dataType: "string",
        columnType: "PgUUID",
        generated: undefined,
      },
      table: [Circular],
      getSQLType: [Function: getSQLType],
      mapFromDriverValue: [Function: mapFromDriverValue],
      mapToDriverValue: [Function: mapToDriverValue],
      shouldDisableInsert: [Function: shouldDisableInsert],
      getSQL: [Function],
    },
    agentId: PgUUID {
      name: "agentId",
      keyAsName: false,
      primary: false,
      notNull: true,
      default: undefined,
      defaultFn: undefined,
      onUpdateFn: undefined,
      hasDefault: false,
      isUnique: false,
      uniqueName: "components_agentId_unique",
      uniqueType: undefined,
      dataType: "string",
      columnType: "PgUUID",
      enumValues: undefined,
      generated: undefined,
      generatedIdentity: undefined,
      config: {
        name: "agentId",
        keyAsName: false,
        notNull: true,
        default: undefined,
        hasDefault: false,
        primaryKey: false,
        isUnique: false,
        uniqueName: "components_agentId_unique",
        uniqueType: undefined,
        dataType: "string",
        columnType: "PgUUID",
        generated: undefined,
      },
      table: [Circular],
      getSQLType: [Function: getSQLType],
      mapFromDriverValue: [Function: mapFromDriverValue],
      mapToDriverValue: [Function: mapToDriverValue],
      shouldDisableInsert: [Function: shouldDisableInsert],
      getSQL: [Function],
    },
    roomId: PgUUID {
      name: "roomId",
      keyAsName: false,
      primary: false,
      notNull: true,
      default: undefined,
      defaultFn: undefined,
      onUpdateFn: undefined,
      hasDefault: false,
      isUnique: false,
      uniqueName: "components_roomId_unique",
      uniqueType: undefined,
      dataType: "string",
      columnType: "PgUUID",
      enumValues: undefined,
      generated: undefined,
      generatedIdentity: undefined,
      config: {
        name: "roomId",
        keyAsName: false,
        notNull: true,
        default: undefined,
        hasDefault: false,
        primaryKey: false,
        isUnique: false,
        uniqueName: "components_roomId_unique",
        uniqueType: undefined,
        dataType: "string",
        columnType: "PgUUID",
        generated: undefined,
      },
      table: [Circular],
      getSQLType: [Function: getSQLType],
      mapFromDriverValue: [Function: mapFromDriverValue],
      mapToDriverValue: [Function: mapToDriverValue],
      shouldDisableInsert: [Function: shouldDisableInsert],
      getSQL: [Function],
    },
    worldId: PgUUID {
      name: "worldId",
      keyAsName: false,
      primary: false,
      notNull: false,
      default: undefined,
      defaultFn: undefined,
      onUpdateFn: undefined,
      hasDefault: false,
      isUnique: false,
      uniqueName: "components_worldId_unique",
      uniqueType: undefined,
      dataType: "string",
      columnType: "PgUUID",
      enumValues: undefined,
      generated: undefined,
      generatedIdentity: undefined,
      config: {
        name: "worldId",
        keyAsName: false,
        notNull: false,
        default: undefined,
        hasDefault: false,
        primaryKey: false,
        isUnique: false,
        uniqueName: "components_worldId_unique",
        uniqueType: undefined,
        dataType: "string",
        columnType: "PgUUID",
        generated: undefined,
      },
      table: [Circular],
      getSQLType: [Function: getSQLType],
      mapFromDriverValue: [Function: mapFromDriverValue],
      mapToDriverValue: [Function: mapToDriverValue],
      shouldDisableInsert: [Function: shouldDisableInsert],
      getSQL: [Function],
    },
    sourceEntityId: PgUUID {
      name: "sourceEntityId",
      keyAsName: false,
      primary: false,
      notNull: false,
      default: undefined,
      defaultFn: undefined,
      onUpdateFn: undefined,
      hasDefault: false,
      isUnique: false,
      uniqueName: "components_sourceEntityId_unique",
      uniqueType: undefined,
      dataType: "string",
      columnType: "PgUUID",
      enumValues: undefined,
      generated: undefined,
      generatedIdentity: undefined,
      config: {
        name: "sourceEntityId",
        keyAsName: false,
        notNull: false,
        default: undefined,
        hasDefault: false,
        primaryKey: false,
        isUnique: false,
        uniqueName: "components_sourceEntityId_unique",
        uniqueType: undefined,
        dataType: "string",
        columnType: "PgUUID",
        generated: undefined,
      },
      table: [Circular],
      getSQLType: [Function: getSQLType],
      mapFromDriverValue: [Function: mapFromDriverValue],
      mapToDriverValue: [Function: mapToDriverValue],
      shouldDisableInsert: [Function: shouldDisableInsert],
      getSQL: [Function],
    },
    type: PgText {
      name: "type",
      keyAsName: false,
      primary: false,
      notNull: true,
      default: undefined,
      defaultFn: undefined,
      onUpdateFn: undefined,
      hasDefault: false,
      isUnique: false,
      uniqueName: "components_type_unique",
      uniqueType: undefined,
      dataType: "string",
      columnType: "PgText",
      enumValues: undefined,
      generated: undefined,
      generatedIdentity: undefined,
      config: {
        name: "type",
        keyAsName: false,
        notNull: true,
        default: undefined,
        hasDefault: false,
        primaryKey: false,
        isUnique: false,
        uniqueName: "components_type_unique",
        uniqueType: undefined,
        dataType: "string",
        columnType: "PgText",
        generated: undefined,
        enumValues: undefined,
      },
      table: [Circular],
      getSQLType: [Function: getSQLType],
      mapFromDriverValue: [Function: mapFromDriverValue],
      mapToDriverValue: [Function: mapToDriverValue],
      shouldDisableInsert: [Function: shouldDisableInsert],
      getSQL: [Function],
    },
    data: PgJsonb {
      name: "data",
      keyAsName: false,
      primary: false,
      notNull: false,
      default: SQL {
        decoder: {
          mapFromDriverValue: [Function: mapFromDriverValue],
        },
        shouldInlineParams: false,
        queryChunks: [
          StringChunk {
            value: [ "'{}'::jsonb" ],
            getSQL: [Function: getSQL],
          }
        ],
        append: [Function: append],
        toQuery: [Function: toQuery],
        buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
        mapInlineParam: [Function: mapInlineParam],
        getSQL: [Function: getSQL],
        as: [Function: as],
        mapWith: [Function: mapWith],
        inlineParams: [Function: inlineParams],
        if: [Function: if],
      },
      defaultFn: undefined,
      onUpdateFn: undefined,
      hasDefault: true,
      isUnique: false,
      uniqueName: "components_data_unique",
      uniqueType: undefined,
      dataType: "json",
      columnType: "PgJsonb",
      enumValues: undefined,
      generated: undefined,
      generatedIdentity: undefined,
      config: {
        name: "data",
        keyAsName: false,
        notNull: false,
        default: SQL {
          decoder: {
            mapFromDriverValue: [Function: mapFromDriverValue],
          },
          shouldInlineParams: false,
          queryChunks: [
            StringChunk {
              value: [ "'{}'::jsonb" ],
              getSQL: [Function: getSQL],
            }
          ],
          append: [Function: append],
          toQuery: [Function: toQuery],
          buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
          mapInlineParam: [Function: mapInlineParam],
          getSQL: [Function: getSQL],
          as: [Function: as],
          mapWith: [Function: mapWith],
          inlineParams: [Function: inlineParams],
          if: [Function: if],
        },
        hasDefault: true,
        primaryKey: false,
        isUnique: false,
        uniqueName: "components_data_unique",
        uniqueType: undefined,
        dataType: "json",
        columnType: "PgJsonb",
        generated: undefined,
      },
      table: [Circular],
      getSQLType: [Function: getSQLType],
      mapToDriverValue: [Function: mapToDriverValue],
      mapFromDriverValue: [Function: mapFromDriverValue],
      shouldDisableInsert: [Function: shouldDisableInsert],
      getSQL: [Function],
    },
    createdAt: PgCustomColumn {
      name: "createdAt",
      keyAsName: false,
      primary: false,
      notNull: true,
      default: SQL {
        decoder: {
          mapFromDriverValue: [Function: mapFromDriverValue],
        },
        shouldInlineParams: false,
        queryChunks: [
          StringChunk {
            value: [ "now()" ],
            getSQL: [Function: getSQL],
          }
        ],
        append: [Function: append],
        toQuery: [Function: toQuery],
        buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
        mapInlineParam: [Function: mapInlineParam],
        getSQL: [Function: getSQL],
        as: [Function: as],
        mapWith: [Function: mapWith],
        inlineParams: [Function: inlineParams],
        if: [Function: if],
      },
      defaultFn: undefined,
      onUpdateFn: undefined,
      hasDefault: true,
      isUnique: false,
      uniqueName: "components_createdAt_unique",
      uniqueType: undefined,
      dataType: "custom",
      columnType: "PgCustomColumn",
      enumValues: undefined,
      generated: undefined,
      generatedIdentity: undefined,
      config: {
        name: "createdAt",
        keyAsName: false,
        notNull: true,
        default: SQL {
          decoder: {
            mapFromDriverValue: [Function: mapFromDriverValue],
          },
          shouldInlineParams: false,
          queryChunks: [
            StringChunk {
              value: [ "now()" ],
              getSQL: [Function: getSQL],
            }
          ],
          append: [Function: append],
          toQuery: [Function: toQuery],
          buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
          mapInlineParam: [Function: mapInlineParam],
          getSQL: [Function: getSQL],
          as: [Function: as],
          mapWith: [Function: mapWith],
          inlineParams: [Function: inlineParams],
          if: [Function: if],
        },
        hasDefault: true,
        primaryKey: false,
        isUnique: false,
        uniqueName: "components_createdAt_unique",
        uniqueType: undefined,
        dataType: "custom",
        columnType: "PgCustomColumn",
        generated: undefined,
        fieldConfig: undefined,
        customTypeParams: {
          dataType: [Function: dataType],
          toDriver: [Function: toDriver],
          fromDriver: [Function: fromDriver],
        },
      },
      table: [Circular],
      sqlName: "timestamptz",
      mapTo: [Function: toDriver],
      mapFrom: [Function: fromDriver],
      getSQLType: [Function: getSQLType],
      mapFromDriverValue: [Function: mapFromDriverValue],
      mapToDriverValue: [Function: mapToDriverValue],
      shouldDisableInsert: [Function: shouldDisableInsert],
      getSQL: [Function],
    },
    enableRLS: [Function: enableRLS],
    getSQL: [Function],
  }, PgTable {
    [Symbol(drizzle:Name)]: "embeddings",
    [Symbol(drizzle:OriginalName)]: "embeddings",
    [Symbol(drizzle:Schema)]: undefined,
    [Symbol(drizzle:Columns)]: {
      id: PgUUID {
        name: "id",
        keyAsName: false,
        primary: true,
        notNull: true,
        default: SQL {
          decoder: {
            mapFromDriverValue: [Function: mapFromDriverValue],
          },
          shouldInlineParams: false,
          queryChunks: [
            StringChunk {
              value: [ "gen_random_uuid()" ],
              getSQL: [Function: getSQL],
            }
          ],
          append: [Function: append],
          toQuery: [Function: toQuery],
          buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
          mapInlineParam: [Function: mapInlineParam],
          getSQL: [Function: getSQL],
          as: [Function: as],
          mapWith: [Function: mapWith],
          inlineParams: [Function: inlineParams],
          if: [Function: if],
        },
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: true,
        isUnique: false,
        uniqueName: "embeddings_id_unique",
        uniqueType: undefined,
        dataType: "string",
        columnType: "PgUUID",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "id",
          keyAsName: false,
          notNull: true,
          default: SQL {
            decoder: {
              mapFromDriverValue: [Function: mapFromDriverValue],
            },
            shouldInlineParams: false,
            queryChunks: [
              StringChunk {
                value: [ "gen_random_uuid()" ],
                getSQL: [Function: getSQL],
              }
            ],
            append: [Function: append],
            toQuery: [Function: toQuery],
            buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
            mapInlineParam: [Function: mapInlineParam],
            getSQL: [Function: getSQL],
            as: [Function: as],
            mapWith: [Function: mapWith],
            inlineParams: [Function: inlineParams],
            if: [Function: if],
          },
          hasDefault: true,
          primaryKey: true,
          isUnique: false,
          uniqueName: "embeddings_id_unique",
          uniqueType: undefined,
          dataType: "string",
          columnType: "PgUUID",
          generated: undefined,
        },
        table: [Circular],
        getSQLType: [Function: getSQLType],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      memoryId: PgUUID {
        name: "memory_id",
        keyAsName: false,
        primary: false,
        notNull: false,
        default: undefined,
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: false,
        isUnique: false,
        uniqueName: "embeddings_memory_id_unique",
        uniqueType: undefined,
        dataType: "string",
        columnType: "PgUUID",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "memory_id",
          keyAsName: false,
          notNull: false,
          default: undefined,
          hasDefault: false,
          primaryKey: false,
          isUnique: false,
          uniqueName: "embeddings_memory_id_unique",
          uniqueType: undefined,
          dataType: "string",
          columnType: "PgUUID",
          generated: undefined,
        },
        table: [Circular],
        getSQLType: [Function: getSQLType],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      createdAt: PgCustomColumn {
        name: "created_at",
        keyAsName: false,
        primary: false,
        notNull: true,
        default: SQL {
          decoder: {
            mapFromDriverValue: [Function: mapFromDriverValue],
          },
          shouldInlineParams: false,
          queryChunks: [
            StringChunk {
              value: [ "now()" ],
              getSQL: [Function: getSQL],
            }
          ],
          append: [Function: append],
          toQuery: [Function: toQuery],
          buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
          mapInlineParam: [Function: mapInlineParam],
          getSQL: [Function: getSQL],
          as: [Function: as],
          mapWith: [Function: mapWith],
          inlineParams: [Function: inlineParams],
          if: [Function: if],
        },
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: true,
        isUnique: false,
        uniqueName: "embeddings_created_at_unique",
        uniqueType: undefined,
        dataType: "custom",
        columnType: "PgCustomColumn",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "created_at",
          keyAsName: false,
          notNull: true,
          default: SQL {
            decoder: {
              mapFromDriverValue: [Function: mapFromDriverValue],
            },
            shouldInlineParams: false,
            queryChunks: [
              StringChunk {
                value: [ "now()" ],
                getSQL: [Function: getSQL],
              }
            ],
            append: [Function: append],
            toQuery: [Function: toQuery],
            buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
            mapInlineParam: [Function: mapInlineParam],
            getSQL: [Function: getSQL],
            as: [Function: as],
            mapWith: [Function: mapWith],
            inlineParams: [Function: inlineParams],
            if: [Function: if],
          },
          hasDefault: true,
          primaryKey: false,
          isUnique: false,
          uniqueName: "embeddings_created_at_unique",
          uniqueType: undefined,
          dataType: "custom",
          columnType: "PgCustomColumn",
          generated: undefined,
          fieldConfig: undefined,
          customTypeParams: {
            dataType: [Function: dataType],
            toDriver: [Function: toDriver],
            fromDriver: [Function: fromDriver],
          },
        },
        table: [Circular],
        sqlName: "timestamptz",
        mapTo: [Function: toDriver],
        mapFrom: [Function: fromDriver],
        getSQLType: [Function: getSQLType],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      dim384: PgVector {
        name: "dim_384",
        keyAsName: false,
        primary: false,
        notNull: false,
        default: undefined,
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: false,
        isUnique: false,
        uniqueName: "embeddings_dim_384_unique",
        uniqueType: undefined,
        dataType: "array",
        columnType: "PgVector",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "dim_384",
          keyAsName: false,
          notNull: false,
          default: undefined,
          hasDefault: false,
          primaryKey: false,
          isUnique: false,
          uniqueName: "embeddings_dim_384_unique",
          uniqueType: undefined,
          dataType: "array",
          columnType: "PgVector",
          generated: undefined,
          dimensions: 384,
        },
        table: [Circular],
        dimensions: 384,
        getSQLType: [Function: getSQLType],
        mapToDriverValue: [Function: mapToDriverValue],
        mapFromDriverValue: [Function: mapFromDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      dim512: PgVector {
        name: "dim_512",
        keyAsName: false,
        primary: false,
        notNull: false,
        default: undefined,
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: false,
        isUnique: false,
        uniqueName: "embeddings_dim_512_unique",
        uniqueType: undefined,
        dataType: "array",
        columnType: "PgVector",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "dim_512",
          keyAsName: false,
          notNull: false,
          default: undefined,
          hasDefault: false,
          primaryKey: false,
          isUnique: false,
          uniqueName: "embeddings_dim_512_unique",
          uniqueType: undefined,
          dataType: "array",
          columnType: "PgVector",
          generated: undefined,
          dimensions: 512,
        },
        table: [Circular],
        dimensions: 512,
        getSQLType: [Function: getSQLType],
        mapToDriverValue: [Function: mapToDriverValue],
        mapFromDriverValue: [Function: mapFromDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      dim768: PgVector {
        name: "dim_768",
        keyAsName: false,
        primary: false,
        notNull: false,
        default: undefined,
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: false,
        isUnique: false,
        uniqueName: "embeddings_dim_768_unique",
        uniqueType: undefined,
        dataType: "array",
        columnType: "PgVector",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "dim_768",
          keyAsName: false,
          notNull: false,
          default: undefined,
          hasDefault: false,
          primaryKey: false,
          isUnique: false,
          uniqueName: "embeddings_dim_768_unique",
          uniqueType: undefined,
          dataType: "array",
          columnType: "PgVector",
          generated: undefined,
          dimensions: 768,
        },
        table: [Circular],
        dimensions: 768,
        getSQLType: [Function: getSQLType],
        mapToDriverValue: [Function: mapToDriverValue],
        mapFromDriverValue: [Function: mapFromDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      dim1024: PgVector {
        name: "dim_1024",
        keyAsName: false,
        primary: false,
        notNull: false,
        default: undefined,
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: false,
        isUnique: false,
        uniqueName: "embeddings_dim_1024_unique",
        uniqueType: undefined,
        dataType: "array",
        columnType: "PgVector",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "dim_1024",
          keyAsName: false,
          notNull: false,
          default: undefined,
          hasDefault: false,
          primaryKey: false,
          isUnique: false,
          uniqueName: "embeddings_dim_1024_unique",
          uniqueType: undefined,
          dataType: "array",
          columnType: "PgVector",
          generated: undefined,
          dimensions: 1024,
        },
        table: [Circular],
        dimensions: 1024,
        getSQLType: [Function: getSQLType],
        mapToDriverValue: [Function: mapToDriverValue],
        mapFromDriverValue: [Function: mapFromDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      dim1536: PgVector {
        name: "dim_1536",
        keyAsName: false,
        primary: false,
        notNull: false,
        default: undefined,
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: false,
        isUnique: false,
        uniqueName: "embeddings_dim_1536_unique",
        uniqueType: undefined,
        dataType: "array",
        columnType: "PgVector",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "dim_1536",
          keyAsName: false,
          notNull: false,
          default: undefined,
          hasDefault: false,
          primaryKey: false,
          isUnique: false,
          uniqueName: "embeddings_dim_1536_unique",
          uniqueType: undefined,
          dataType: "array",
          columnType: "PgVector",
          generated: undefined,
          dimensions: 1536,
        },
        table: [Circular],
        dimensions: 1536,
        getSQLType: [Function: getSQLType],
        mapToDriverValue: [Function: mapToDriverValue],
        mapFromDriverValue: [Function: mapFromDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      dim3072: PgVector {
        name: "dim_3072",
        keyAsName: false,
        primary: false,
        notNull: false,
        default: undefined,
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: false,
        isUnique: false,
        uniqueName: "embeddings_dim_3072_unique",
        uniqueType: undefined,
        dataType: "array",
        columnType: "PgVector",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "dim_3072",
          keyAsName: false,
          notNull: false,
          default: undefined,
          hasDefault: false,
          primaryKey: false,
          isUnique: false,
          uniqueName: "embeddings_dim_3072_unique",
          uniqueType: undefined,
          dataType: "array",
          columnType: "PgVector",
          generated: undefined,
          dimensions: 3072,
        },
        table: [Circular],
        dimensions: 3072,
        getSQLType: [Function: getSQLType],
        mapToDriverValue: [Function: mapToDriverValue],
        mapFromDriverValue: [Function: mapFromDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
    },
    [Symbol(drizzle:ExtraConfigColumns)]: {
      id: ExtraConfigColumn {
        name: "id",
        keyAsName: false,
        primary: true,
        notNull: true,
        default: SQL {
          decoder: {
            mapFromDriverValue: [Function: mapFromDriverValue],
          },
          shouldInlineParams: false,
          queryChunks: [
            StringChunk {
              value: [ "gen_random_uuid()" ],
              getSQL: [Function: getSQL],
            }
          ],
          append: [Function: append],
          toQuery: [Function: toQuery],
          buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
          mapInlineParam: [Function: mapInlineParam],
          getSQL: [Function: getSQL],
          as: [Function: as],
          mapWith: [Function: mapWith],
          inlineParams: [Function: inlineParams],
          if: [Function: if],
        },
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: true,
        isUnique: false,
        uniqueName: "embeddings_id_unique",
        uniqueType: undefined,
        dataType: "string",
        columnType: "PgUUID",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "id",
          keyAsName: false,
          notNull: true,
          default: SQL {
            decoder: {
              mapFromDriverValue: [Function: mapFromDriverValue],
            },
            shouldInlineParams: false,
            queryChunks: [
              StringChunk {
                value: [ "gen_random_uuid()" ],
                getSQL: [Function: getSQL],
              }
            ],
            append: [Function: append],
            toQuery: [Function: toQuery],
            buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
            mapInlineParam: [Function: mapInlineParam],
            getSQL: [Function: getSQL],
            as: [Function: as],
            mapWith: [Function: mapWith],
            inlineParams: [Function: inlineParams],
            if: [Function: if],
          },
          hasDefault: true,
          primaryKey: true,
          isUnique: false,
          uniqueName: "embeddings_id_unique",
          uniqueType: undefined,
          dataType: "string",
          columnType: "PgUUID",
          generated: undefined,
        },
        table: [Circular],
        indexConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        defaultConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        getSQLType: [Function: getSQLType],
        asc: [Function: asc],
        desc: [Function: desc],
        nullsFirst: [Function: nullsFirst],
        nullsLast: [Function: nullsLast],
        op: [Function: op],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      memoryId: ExtraConfigColumn {
        name: "memory_id",
        keyAsName: false,
        primary: false,
        notNull: false,
        default: undefined,
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: false,
        isUnique: false,
        uniqueName: "embeddings_memory_id_unique",
        uniqueType: undefined,
        dataType: "string",
        columnType: "PgUUID",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "memory_id",
          keyAsName: false,
          notNull: false,
          default: undefined,
          hasDefault: false,
          primaryKey: false,
          isUnique: false,
          uniqueName: "embeddings_memory_id_unique",
          uniqueType: undefined,
          dataType: "string",
          columnType: "PgUUID",
          generated: undefined,
        },
        table: [Circular],
        indexConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        defaultConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        getSQLType: [Function: getSQLType],
        asc: [Function: asc],
        desc: [Function: desc],
        nullsFirst: [Function: nullsFirst],
        nullsLast: [Function: nullsLast],
        op: [Function: op],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      createdAt: ExtraConfigColumn {
        name: "created_at",
        keyAsName: false,
        primary: false,
        notNull: true,
        default: SQL {
          decoder: {
            mapFromDriverValue: [Function: mapFromDriverValue],
          },
          shouldInlineParams: false,
          queryChunks: [
            StringChunk {
              value: [ "now()" ],
              getSQL: [Function: getSQL],
            }
          ],
          append: [Function: append],
          toQuery: [Function: toQuery],
          buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
          mapInlineParam: [Function: mapInlineParam],
          getSQL: [Function: getSQL],
          as: [Function: as],
          mapWith: [Function: mapWith],
          inlineParams: [Function: inlineParams],
          if: [Function: if],
        },
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: true,
        isUnique: false,
        uniqueName: "embeddings_created_at_unique",
        uniqueType: undefined,
        dataType: "custom",
        columnType: "PgCustomColumn",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "created_at",
          keyAsName: false,
          notNull: true,
          default: SQL {
            decoder: {
              mapFromDriverValue: [Function: mapFromDriverValue],
            },
            shouldInlineParams: false,
            queryChunks: [
              StringChunk {
                value: [ "now()" ],
                getSQL: [Function: getSQL],
              }
            ],
            append: [Function: append],
            toQuery: [Function: toQuery],
            buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
            mapInlineParam: [Function: mapInlineParam],
            getSQL: [Function: getSQL],
            as: [Function: as],
            mapWith: [Function: mapWith],
            inlineParams: [Function: inlineParams],
            if: [Function: if],
          },
          hasDefault: true,
          primaryKey: false,
          isUnique: false,
          uniqueName: "embeddings_created_at_unique",
          uniqueType: undefined,
          dataType: "custom",
          columnType: "PgCustomColumn",
          generated: undefined,
          fieldConfig: undefined,
          customTypeParams: {
            dataType: [Function: dataType],
            toDriver: [Function: toDriver],
            fromDriver: [Function: fromDriver],
          },
        },
        table: [Circular],
        indexConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        defaultConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        getSQLType: [Function: getSQLType],
        asc: [Function: asc],
        desc: [Function: desc],
        nullsFirst: [Function: nullsFirst],
        nullsLast: [Function: nullsLast],
        op: [Function: op],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      dim384: ExtraConfigColumn {
        name: "dim_384",
        keyAsName: false,
        primary: false,
        notNull: false,
        default: undefined,
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: false,
        isUnique: false,
        uniqueName: "embeddings_dim_384_unique",
        uniqueType: undefined,
        dataType: "array",
        columnType: "PgVector",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "dim_384",
          keyAsName: false,
          notNull: false,
          default: undefined,
          hasDefault: false,
          primaryKey: false,
          isUnique: false,
          uniqueName: "embeddings_dim_384_unique",
          uniqueType: undefined,
          dataType: "array",
          columnType: "PgVector",
          generated: undefined,
          dimensions: 384,
        },
        table: [Circular],
        indexConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        defaultConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        getSQLType: [Function: getSQLType],
        asc: [Function: asc],
        desc: [Function: desc],
        nullsFirst: [Function: nullsFirst],
        nullsLast: [Function: nullsLast],
        op: [Function: op],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      dim512: ExtraConfigColumn {
        name: "dim_512",
        keyAsName: false,
        primary: false,
        notNull: false,
        default: undefined,
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: false,
        isUnique: false,
        uniqueName: "embeddings_dim_512_unique",
        uniqueType: undefined,
        dataType: "array",
        columnType: "PgVector",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "dim_512",
          keyAsName: false,
          notNull: false,
          default: undefined,
          hasDefault: false,
          primaryKey: false,
          isUnique: false,
          uniqueName: "embeddings_dim_512_unique",
          uniqueType: undefined,
          dataType: "array",
          columnType: "PgVector",
          generated: undefined,
          dimensions: 512,
        },
        table: [Circular],
        indexConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        defaultConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        getSQLType: [Function: getSQLType],
        asc: [Function: asc],
        desc: [Function: desc],
        nullsFirst: [Function: nullsFirst],
        nullsLast: [Function: nullsLast],
        op: [Function: op],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      dim768: ExtraConfigColumn {
        name: "dim_768",
        keyAsName: false,
        primary: false,
        notNull: false,
        default: undefined,
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: false,
        isUnique: false,
        uniqueName: "embeddings_dim_768_unique",
        uniqueType: undefined,
        dataType: "array",
        columnType: "PgVector",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "dim_768",
          keyAsName: false,
          notNull: false,
          default: undefined,
          hasDefault: false,
          primaryKey: false,
          isUnique: false,
          uniqueName: "embeddings_dim_768_unique",
          uniqueType: undefined,
          dataType: "array",
          columnType: "PgVector",
          generated: undefined,
          dimensions: 768,
        },
        table: [Circular],
        indexConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        defaultConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        getSQLType: [Function: getSQLType],
        asc: [Function: asc],
        desc: [Function: desc],
        nullsFirst: [Function: nullsFirst],
        nullsLast: [Function: nullsLast],
        op: [Function: op],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      dim1024: ExtraConfigColumn {
        name: "dim_1024",
        keyAsName: false,
        primary: false,
        notNull: false,
        default: undefined,
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: false,
        isUnique: false,
        uniqueName: "embeddings_dim_1024_unique",
        uniqueType: undefined,
        dataType: "array",
        columnType: "PgVector",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "dim_1024",
          keyAsName: false,
          notNull: false,
          default: undefined,
          hasDefault: false,
          primaryKey: false,
          isUnique: false,
          uniqueName: "embeddings_dim_1024_unique",
          uniqueType: undefined,
          dataType: "array",
          columnType: "PgVector",
          generated: undefined,
          dimensions: 1024,
        },
        table: [Circular],
        indexConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        defaultConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        getSQLType: [Function: getSQLType],
        asc: [Function: asc],
        desc: [Function: desc],
        nullsFirst: [Function: nullsFirst],
        nullsLast: [Function: nullsLast],
        op: [Function: op],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      dim1536: ExtraConfigColumn {
        name: "dim_1536",
        keyAsName: false,
        primary: false,
        notNull: false,
        default: undefined,
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: false,
        isUnique: false,
        uniqueName: "embeddings_dim_1536_unique",
        uniqueType: undefined,
        dataType: "array",
        columnType: "PgVector",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "dim_1536",
          keyAsName: false,
          notNull: false,
          default: undefined,
          hasDefault: false,
          primaryKey: false,
          isUnique: false,
          uniqueName: "embeddings_dim_1536_unique",
          uniqueType: undefined,
          dataType: "array",
          columnType: "PgVector",
          generated: undefined,
          dimensions: 1536,
        },
        table: [Circular],
        indexConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        defaultConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        getSQLType: [Function: getSQLType],
        asc: [Function: asc],
        desc: [Function: desc],
        nullsFirst: [Function: nullsFirst],
        nullsLast: [Function: nullsLast],
        op: [Function: op],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      dim3072: ExtraConfigColumn {
        name: "dim_3072",
        keyAsName: false,
        primary: false,
        notNull: false,
        default: undefined,
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: false,
        isUnique: false,
        uniqueName: "embeddings_dim_3072_unique",
        uniqueType: undefined,
        dataType: "array",
        columnType: "PgVector",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "dim_3072",
          keyAsName: false,
          notNull: false,
          default: undefined,
          hasDefault: false,
          primaryKey: false,
          isUnique: false,
          uniqueName: "embeddings_dim_3072_unique",
          uniqueType: undefined,
          dataType: "array",
          columnType: "PgVector",
          generated: undefined,
          dimensions: 3072,
        },
        table: [Circular],
        indexConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        defaultConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        getSQLType: [Function: getSQLType],
        asc: [Function: asc],
        desc: [Function: desc],
        nullsFirst: [Function: nullsFirst],
        nullsLast: [Function: nullsLast],
        op: [Function: op],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
    },
    [Symbol(drizzle:BaseName)]: "embeddings",
    [Symbol(drizzle:IsAlias)]: false,
    [Symbol(drizzle:IsDrizzleTable)]: true,
    [Symbol(drizzle:ExtraConfigBuilder)]: [Function],
    [Symbol(drizzle:PgInlineForeignKeys)]: [
      ForeignKey {
        reference: [Function],
        onUpdate: "no action",
        onDelete: "no action",
        table: [Circular],
        getName: [Function: getName],
      }
    ],
    [Symbol(drizzle:EnableRLS)]: false,
    id: PgUUID {
      name: "id",
      keyAsName: false,
      primary: true,
      notNull: true,
      default: SQL {
        decoder: {
          mapFromDriverValue: [Function: mapFromDriverValue],
        },
        shouldInlineParams: false,
        queryChunks: [
          StringChunk {
            value: [ "gen_random_uuid()" ],
            getSQL: [Function: getSQL],
          }
        ],
        append: [Function: append],
        toQuery: [Function: toQuery],
        buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
        mapInlineParam: [Function: mapInlineParam],
        getSQL: [Function: getSQL],
        as: [Function: as],
        mapWith: [Function: mapWith],
        inlineParams: [Function: inlineParams],
        if: [Function: if],
      },
      defaultFn: undefined,
      onUpdateFn: undefined,
      hasDefault: true,
      isUnique: false,
      uniqueName: "embeddings_id_unique",
      uniqueType: undefined,
      dataType: "string",
      columnType: "PgUUID",
      enumValues: undefined,
      generated: undefined,
      generatedIdentity: undefined,
      config: {
        name: "id",
        keyAsName: false,
        notNull: true,
        default: SQL {
          decoder: {
            mapFromDriverValue: [Function: mapFromDriverValue],
          },
          shouldInlineParams: false,
          queryChunks: [
            StringChunk {
              value: [ "gen_random_uuid()" ],
              getSQL: [Function: getSQL],
            }
          ],
          append: [Function: append],
          toQuery: [Function: toQuery],
          buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
          mapInlineParam: [Function: mapInlineParam],
          getSQL: [Function: getSQL],
          as: [Function: as],
          mapWith: [Function: mapWith],
          inlineParams: [Function: inlineParams],
          if: [Function: if],
        },
        hasDefault: true,
        primaryKey: true,
        isUnique: false,
        uniqueName: "embeddings_id_unique",
        uniqueType: undefined,
        dataType: "string",
        columnType: "PgUUID",
        generated: undefined,
      },
      table: [Circular],
      getSQLType: [Function: getSQLType],
      mapFromDriverValue: [Function: mapFromDriverValue],
      mapToDriverValue: [Function: mapToDriverValue],
      shouldDisableInsert: [Function: shouldDisableInsert],
      getSQL: [Function],
    },
    memoryId: PgUUID {
      name: "memory_id",
      keyAsName: false,
      primary: false,
      notNull: false,
      default: undefined,
      defaultFn: undefined,
      onUpdateFn: undefined,
      hasDefault: false,
      isUnique: false,
      uniqueName: "embeddings_memory_id_unique",
      uniqueType: undefined,
      dataType: "string",
      columnType: "PgUUID",
      enumValues: undefined,
      generated: undefined,
      generatedIdentity: undefined,
      config: {
        name: "memory_id",
        keyAsName: false,
        notNull: false,
        default: undefined,
        hasDefault: false,
        primaryKey: false,
        isUnique: false,
        uniqueName: "embeddings_memory_id_unique",
        uniqueType: undefined,
        dataType: "string",
        columnType: "PgUUID",
        generated: undefined,
      },
      table: [Circular],
      getSQLType: [Function: getSQLType],
      mapFromDriverValue: [Function: mapFromDriverValue],
      mapToDriverValue: [Function: mapToDriverValue],
      shouldDisableInsert: [Function: shouldDisableInsert],
      getSQL: [Function],
    },
    createdAt: PgCustomColumn {
      name: "created_at",
      keyAsName: false,
      primary: false,
      notNull: true,
      default: SQL {
        decoder: {
          mapFromDriverValue: [Function: mapFromDriverValue],
        },
        shouldInlineParams: false,
        queryChunks: [
          StringChunk {
            value: [ "now()" ],
            getSQL: [Function: getSQL],
          }
        ],
        append: [Function: append],
        toQuery: [Function: toQuery],
        buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
        mapInlineParam: [Function: mapInlineParam],
        getSQL: [Function: getSQL],
        as: [Function: as],
        mapWith: [Function: mapWith],
        inlineParams: [Function: inlineParams],
        if: [Function: if],
      },
      defaultFn: undefined,
      onUpdateFn: undefined,
      hasDefault: true,
      isUnique: false,
      uniqueName: "embeddings_created_at_unique",
      uniqueType: undefined,
      dataType: "custom",
      columnType: "PgCustomColumn",
      enumValues: undefined,
      generated: undefined,
      generatedIdentity: undefined,
      config: {
        name: "created_at",
        keyAsName: false,
        notNull: true,
        default: SQL {
          decoder: {
            mapFromDriverValue: [Function: mapFromDriverValue],
          },
          shouldInlineParams: false,
          queryChunks: [
            StringChunk {
              value: [ "now()" ],
              getSQL: [Function: getSQL],
            }
          ],
          append: [Function: append],
          toQuery: [Function: toQuery],
          buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
          mapInlineParam: [Function: mapInlineParam],
          getSQL: [Function: getSQL],
          as: [Function: as],
          mapWith: [Function: mapWith],
          inlineParams: [Function: inlineParams],
          if: [Function: if],
        },
        hasDefault: true,
        primaryKey: false,
        isUnique: false,
        uniqueName: "embeddings_created_at_unique",
        uniqueType: undefined,
        dataType: "custom",
        columnType: "PgCustomColumn",
        generated: undefined,
        fieldConfig: undefined,
        customTypeParams: {
          dataType: [Function: dataType],
          toDriver: [Function: toDriver],
          fromDriver: [Function: fromDriver],
        },
      },
      table: [Circular],
      sqlName: "timestamptz",
      mapTo: [Function: toDriver],
      mapFrom: [Function: fromDriver],
      getSQLType: [Function: getSQLType],
      mapFromDriverValue: [Function: mapFromDriverValue],
      mapToDriverValue: [Function: mapToDriverValue],
      shouldDisableInsert: [Function: shouldDisableInsert],
      getSQL: [Function],
    },
    dim384: PgVector {
      name: "dim_384",
      keyAsName: false,
      primary: false,
      notNull: false,
      default: undefined,
      defaultFn: undefined,
      onUpdateFn: undefined,
      hasDefault: false,
      isUnique: false,
      uniqueName: "embeddings_dim_384_unique",
      uniqueType: undefined,
      dataType: "array",
      columnType: "PgVector",
      enumValues: undefined,
      generated: undefined,
      generatedIdentity: undefined,
      config: {
        name: "dim_384",
        keyAsName: false,
        notNull: false,
        default: undefined,
        hasDefault: false,
        primaryKey: false,
        isUnique: false,
        uniqueName: "embeddings_dim_384_unique",
        uniqueType: undefined,
        dataType: "array",
        columnType: "PgVector",
        generated: undefined,
        dimensions: 384,
      },
      table: [Circular],
      dimensions: 384,
      getSQLType: [Function: getSQLType],
      mapToDriverValue: [Function: mapToDriverValue],
      mapFromDriverValue: [Function: mapFromDriverValue],
      shouldDisableInsert: [Function: shouldDisableInsert],
      getSQL: [Function],
    },
    dim512: PgVector {
      name: "dim_512",
      keyAsName: false,
      primary: false,
      notNull: false,
      default: undefined,
      defaultFn: undefined,
      onUpdateFn: undefined,
      hasDefault: false,
      isUnique: false,
      uniqueName: "embeddings_dim_512_unique",
      uniqueType: undefined,
      dataType: "array",
      columnType: "PgVector",
      enumValues: undefined,
      generated: undefined,
      generatedIdentity: undefined,
      config: {
        name: "dim_512",
        keyAsName: false,
        notNull: false,
        default: undefined,
        hasDefault: false,
        primaryKey: false,
        isUnique: false,
        uniqueName: "embeddings_dim_512_unique",
        uniqueType: undefined,
        dataType: "array",
        columnType: "PgVector",
        generated: undefined,
        dimensions: 512,
      },
      table: [Circular],
      dimensions: 512,
      getSQLType: [Function: getSQLType],
      mapToDriverValue: [Function: mapToDriverValue],
      mapFromDriverValue: [Function: mapFromDriverValue],
      shouldDisableInsert: [Function: shouldDisableInsert],
      getSQL: [Function],
    },
    dim768: PgVector {
      name: "dim_768",
      keyAsName: false,
      primary: false,
      notNull: false,
      default: undefined,
      defaultFn: undefined,
      onUpdateFn: undefined,
      hasDefault: false,
      isUnique: false,
      uniqueName: "embeddings_dim_768_unique",
      uniqueType: undefined,
      dataType: "array",
      columnType: "PgVector",
      enumValues: undefined,
      generated: undefined,
      generatedIdentity: undefined,
      config: {
        name: "dim_768",
        keyAsName: false,
        notNull: false,
        default: undefined,
        hasDefault: false,
        primaryKey: false,
        isUnique: false,
        uniqueName: "embeddings_dim_768_unique",
        uniqueType: undefined,
        dataType: "array",
        columnType: "PgVector",
        generated: undefined,
        dimensions: 768,
      },
      table: [Circular],
      dimensions: 768,
      getSQLType: [Function: getSQLType],
      mapToDriverValue: [Function: mapToDriverValue],
      mapFromDriverValue: [Function: mapFromDriverValue],
      shouldDisableInsert: [Function: shouldDisableInsert],
      getSQL: [Function],
    },
    dim1024: PgVector {
      name: "dim_1024",
      keyAsName: false,
      primary: false,
      notNull: false,
      default: undefined,
      defaultFn: undefined,
      onUpdateFn: undefined,
      hasDefault: false,
      isUnique: false,
      uniqueName: "embeddings_dim_1024_unique",
      uniqueType: undefined,
      dataType: "array",
      columnType: "PgVector",
      enumValues: undefined,
      generated: undefined,
      generatedIdentity: undefined,
      config: {
        name: "dim_1024",
        keyAsName: false,
        notNull: false,
        default: undefined,
        hasDefault: false,
        primaryKey: false,
        isUnique: false,
        uniqueName: "embeddings_dim_1024_unique",
        uniqueType: undefined,
        dataType: "array",
        columnType: "PgVector",
        generated: undefined,
        dimensions: 1024,
      },
      table: [Circular],
      dimensions: 1024,
      getSQLType: [Function: getSQLType],
      mapToDriverValue: [Function: mapToDriverValue],
      mapFromDriverValue: [Function: mapFromDriverValue],
      shouldDisableInsert: [Function: shouldDisableInsert],
      getSQL: [Function],
    },
    dim1536: PgVector {
      name: "dim_1536",
      keyAsName: false,
      primary: false,
      notNull: false,
      default: undefined,
      defaultFn: undefined,
      onUpdateFn: undefined,
      hasDefault: false,
      isUnique: false,
      uniqueName: "embeddings_dim_1536_unique",
      uniqueType: undefined,
      dataType: "array",
      columnType: "PgVector",
      enumValues: undefined,
      generated: undefined,
      generatedIdentity: undefined,
      config: {
        name: "dim_1536",
        keyAsName: false,
        notNull: false,
        default: undefined,
        hasDefault: false,
        primaryKey: false,
        isUnique: false,
        uniqueName: "embeddings_dim_1536_unique",
        uniqueType: undefined,
        dataType: "array",
        columnType: "PgVector",
        generated: undefined,
        dimensions: 1536,
      },
      table: [Circular],
      dimensions: 1536,
      getSQLType: [Function: getSQLType],
      mapToDriverValue: [Function: mapToDriverValue],
      mapFromDriverValue: [Function: mapFromDriverValue],
      shouldDisableInsert: [Function: shouldDisableInsert],
      getSQL: [Function],
    },
    dim3072: PgVector {
      name: "dim_3072",
      keyAsName: false,
      primary: false,
      notNull: false,
      default: undefined,
      defaultFn: undefined,
      onUpdateFn: undefined,
      hasDefault: false,
      isUnique: false,
      uniqueName: "embeddings_dim_3072_unique",
      uniqueType: undefined,
      dataType: "array",
      columnType: "PgVector",
      enumValues: undefined,
      generated: undefined,
      generatedIdentity: undefined,
      config: {
        name: "dim_3072",
        keyAsName: false,
        notNull: false,
        default: undefined,
        hasDefault: false,
        primaryKey: false,
        isUnique: false,
        uniqueName: "embeddings_dim_3072_unique",
        uniqueType: undefined,
        dataType: "array",
        columnType: "PgVector",
        generated: undefined,
        dimensions: 3072,
      },
      table: [Circular],
      dimensions: 3072,
      getSQLType: [Function: getSQLType],
      mapToDriverValue: [Function: mapToDriverValue],
      mapFromDriverValue: [Function: mapFromDriverValue],
      shouldDisableInsert: [Function: shouldDisableInsert],
      getSQL: [Function],
    },
    enableRLS: [Function: enableRLS],
    getSQL: [Function],
  }, PgTable {
    [Symbol(drizzle:Name)]: "entities",
    [Symbol(drizzle:OriginalName)]: "entities",
    [Symbol(drizzle:Schema)]: undefined,
    [Symbol(drizzle:Columns)]: {
      id: PgUUID {
        name: "id",
        keyAsName: false,
        primary: true,
        notNull: true,
        default: undefined,
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: false,
        isUnique: false,
        uniqueName: "entities_id_unique",
        uniqueType: undefined,
        dataType: "string",
        columnType: "PgUUID",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "id",
          keyAsName: false,
          notNull: true,
          default: undefined,
          hasDefault: false,
          primaryKey: true,
          isUnique: false,
          uniqueName: "entities_id_unique",
          uniqueType: undefined,
          dataType: "string",
          columnType: "PgUUID",
          generated: undefined,
        },
        table: [Circular],
        getSQLType: [Function: getSQLType],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      agentId: PgUUID {
        name: "agentId",
        keyAsName: false,
        primary: false,
        notNull: true,
        default: undefined,
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: false,
        isUnique: false,
        uniqueName: "entities_agentId_unique",
        uniqueType: undefined,
        dataType: "string",
        columnType: "PgUUID",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "agentId",
          keyAsName: false,
          notNull: true,
          default: undefined,
          hasDefault: false,
          primaryKey: false,
          isUnique: false,
          uniqueName: "entities_agentId_unique",
          uniqueType: undefined,
          dataType: "string",
          columnType: "PgUUID",
          generated: undefined,
        },
        table: [Circular],
        getSQLType: [Function: getSQLType],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      createdAt: PgCustomColumn {
        name: "createdAt",
        keyAsName: false,
        primary: false,
        notNull: true,
        default: SQL {
          decoder: {
            mapFromDriverValue: [Function: mapFromDriverValue],
          },
          shouldInlineParams: false,
          queryChunks: [
            StringChunk {
              value: [ "now()" ],
              getSQL: [Function: getSQL],
            }
          ],
          append: [Function: append],
          toQuery: [Function: toQuery],
          buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
          mapInlineParam: [Function: mapInlineParam],
          getSQL: [Function: getSQL],
          as: [Function: as],
          mapWith: [Function: mapWith],
          inlineParams: [Function: inlineParams],
          if: [Function: if],
        },
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: true,
        isUnique: false,
        uniqueName: "entities_createdAt_unique",
        uniqueType: undefined,
        dataType: "custom",
        columnType: "PgCustomColumn",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "createdAt",
          keyAsName: false,
          notNull: true,
          default: SQL {
            decoder: {
              mapFromDriverValue: [Function: mapFromDriverValue],
            },
            shouldInlineParams: false,
            queryChunks: [
              StringChunk {
                value: [ "now()" ],
                getSQL: [Function: getSQL],
              }
            ],
            append: [Function: append],
            toQuery: [Function: toQuery],
            buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
            mapInlineParam: [Function: mapInlineParam],
            getSQL: [Function: getSQL],
            as: [Function: as],
            mapWith: [Function: mapWith],
            inlineParams: [Function: inlineParams],
            if: [Function: if],
          },
          hasDefault: true,
          primaryKey: false,
          isUnique: false,
          uniqueName: "entities_createdAt_unique",
          uniqueType: undefined,
          dataType: "custom",
          columnType: "PgCustomColumn",
          generated: undefined,
          fieldConfig: undefined,
          customTypeParams: {
            dataType: [Function: dataType],
            toDriver: [Function: toDriver],
            fromDriver: [Function: fromDriver],
          },
        },
        table: [Circular],
        sqlName: "timestamptz",
        mapTo: [Function: toDriver],
        mapFrom: [Function: fromDriver],
        getSQLType: [Function: getSQLType],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      names: PgArray {
        name: "names",
        keyAsName: false,
        primary: false,
        notNull: false,
        default: SQL {
          decoder: {
            mapFromDriverValue: [Function: mapFromDriverValue],
          },
          shouldInlineParams: false,
          queryChunks: [
            StringChunk {
              value: [ "'{}'::text[]" ],
              getSQL: [Function: getSQL],
            }
          ],
          append: [Function: append],
          toQuery: [Function: toQuery],
          buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
          mapInlineParam: [Function: mapInlineParam],
          getSQL: [Function: getSQL],
          as: [Function: as],
          mapWith: [Function: mapWith],
          inlineParams: [Function: inlineParams],
          if: [Function: if],
        },
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: true,
        isUnique: false,
        uniqueName: "entities_names_unique",
        uniqueType: undefined,
        dataType: "array",
        columnType: "PgArray",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "names",
          keyAsName: false,
          notNull: false,
          default: SQL {
            decoder: {
              mapFromDriverValue: [Function: mapFromDriverValue],
            },
            shouldInlineParams: false,
            queryChunks: [
              StringChunk {
                value: [ "'{}'::text[]" ],
                getSQL: [Function: getSQL],
              }
            ],
            append: [Function: append],
            toQuery: [Function: toQuery],
            buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
            mapInlineParam: [Function: mapInlineParam],
            getSQL: [Function: getSQL],
            as: [Function: as],
            mapWith: [Function: mapWith],
            inlineParams: [Function: inlineParams],
            if: [Function: if],
          },
          hasDefault: true,
          primaryKey: false,
          isUnique: false,
          uniqueName: "entities_names_unique",
          uniqueType: undefined,
          dataType: "array",
          columnType: "PgArray",
          generated: undefined,
          baseBuilder: PgTextBuilder {
            config: {
              name: "names",
              keyAsName: false,
              notNull: false,
              default: undefined,
              hasDefault: false,
              primaryKey: false,
              isUnique: false,
              uniqueName: "entities_names_unique",
              uniqueType: undefined,
              dataType: "string",
              columnType: "PgText",
              generated: undefined,
              enumValues: undefined,
            },
            $default: [Function: $defaultFn],
            $onUpdate: [Function: $onUpdateFn],
            foreignKeyConfigs: [],
            build: [Function: build],
            array: [Function: array],
            references: [Function: references],
            unique: [Function: unique],
            generatedAlwaysAs: [Function: generatedAlwaysAs],
            buildForeignKeys: [Function: buildForeignKeys],
            buildExtraConfigColumn: [Function: buildExtraConfigColumn],
            $type: [Function: $type],
            notNull: [Function: notNull],
            default: [Function: default],
            $defaultFn: [Function: $defaultFn],
            $onUpdateFn: [Function: $onUpdateFn],
            primaryKey: [Function: primaryKey],
            setName: [Function: setName],
          },
          size: undefined,
        },
        table: [Circular],
        size: undefined,
        baseColumn: PgText {
          name: "names",
          keyAsName: false,
          primary: false,
          notNull: false,
          default: undefined,
          defaultFn: undefined,
          onUpdateFn: undefined,
          hasDefault: false,
          isUnique: false,
          uniqueName: "entities_names_unique",
          uniqueType: undefined,
          dataType: "string",
          columnType: "PgText",
          enumValues: undefined,
          generated: undefined,
          generatedIdentity: undefined,
          config: {
            name: "names",
            keyAsName: false,
            notNull: false,
            default: undefined,
            hasDefault: false,
            primaryKey: false,
            isUnique: false,
            uniqueName: "entities_names_unique",
            uniqueType: undefined,
            dataType: "string",
            columnType: "PgText",
            generated: undefined,
            enumValues: undefined,
          },
          table: [Circular],
          getSQLType: [Function: getSQLType],
          mapFromDriverValue: [Function: mapFromDriverValue],
          mapToDriverValue: [Function: mapToDriverValue],
          shouldDisableInsert: [Function: shouldDisableInsert],
          getSQL: [Function],
        },
        range: undefined,
        getSQLType: [Function: getSQLType],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      metadata: PgJsonb {
        name: "metadata",
        keyAsName: false,
        primary: false,
        notNull: false,
        default: SQL {
          decoder: {
            mapFromDriverValue: [Function: mapFromDriverValue],
          },
          shouldInlineParams: false,
          queryChunks: [
            StringChunk {
              value: [ "'{}'::jsonb" ],
              getSQL: [Function: getSQL],
            }
          ],
          append: [Function: append],
          toQuery: [Function: toQuery],
          buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
          mapInlineParam: [Function: mapInlineParam],
          getSQL: [Function: getSQL],
          as: [Function: as],
          mapWith: [Function: mapWith],
          inlineParams: [Function: inlineParams],
          if: [Function: if],
        },
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: true,
        isUnique: false,
        uniqueName: "entities_metadata_unique",
        uniqueType: undefined,
        dataType: "json",
        columnType: "PgJsonb",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "metadata",
          keyAsName: false,
          notNull: false,
          default: SQL {
            decoder: {
              mapFromDriverValue: [Function: mapFromDriverValue],
            },
            shouldInlineParams: false,
            queryChunks: [
              StringChunk {
                value: [ "'{}'::jsonb" ],
                getSQL: [Function: getSQL],
              }
            ],
            append: [Function: append],
            toQuery: [Function: toQuery],
            buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
            mapInlineParam: [Function: mapInlineParam],
            getSQL: [Function: getSQL],
            as: [Function: as],
            mapWith: [Function: mapWith],
            inlineParams: [Function: inlineParams],
            if: [Function: if],
          },
          hasDefault: true,
          primaryKey: false,
          isUnique: false,
          uniqueName: "entities_metadata_unique",
          uniqueType: undefined,
          dataType: "json",
          columnType: "PgJsonb",
          generated: undefined,
        },
        table: [Circular],
        getSQLType: [Function: getSQLType],
        mapToDriverValue: [Function: mapToDriverValue],
        mapFromDriverValue: [Function: mapFromDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
    },
    [Symbol(drizzle:ExtraConfigColumns)]: {
      id: ExtraConfigColumn {
        name: "id",
        keyAsName: false,
        primary: true,
        notNull: true,
        default: undefined,
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: false,
        isUnique: false,
        uniqueName: "entities_id_unique",
        uniqueType: undefined,
        dataType: "string",
        columnType: "PgUUID",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "id",
          keyAsName: false,
          notNull: true,
          default: undefined,
          hasDefault: false,
          primaryKey: true,
          isUnique: false,
          uniqueName: "entities_id_unique",
          uniqueType: undefined,
          dataType: "string",
          columnType: "PgUUID",
          generated: undefined,
        },
        table: [Circular],
        indexConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        defaultConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        getSQLType: [Function: getSQLType],
        asc: [Function: asc],
        desc: [Function: desc],
        nullsFirst: [Function: nullsFirst],
        nullsLast: [Function: nullsLast],
        op: [Function: op],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      agentId: ExtraConfigColumn {
        name: "agentId",
        keyAsName: false,
        primary: false,
        notNull: true,
        default: undefined,
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: false,
        isUnique: false,
        uniqueName: "entities_agentId_unique",
        uniqueType: undefined,
        dataType: "string",
        columnType: "PgUUID",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "agentId",
          keyAsName: false,
          notNull: true,
          default: undefined,
          hasDefault: false,
          primaryKey: false,
          isUnique: false,
          uniqueName: "entities_agentId_unique",
          uniqueType: undefined,
          dataType: "string",
          columnType: "PgUUID",
          generated: undefined,
        },
        table: [Circular],
        indexConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        defaultConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        getSQLType: [Function: getSQLType],
        asc: [Function: asc],
        desc: [Function: desc],
        nullsFirst: [Function: nullsFirst],
        nullsLast: [Function: nullsLast],
        op: [Function: op],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      createdAt: ExtraConfigColumn {
        name: "createdAt",
        keyAsName: false,
        primary: false,
        notNull: true,
        default: SQL {
          decoder: {
            mapFromDriverValue: [Function: mapFromDriverValue],
          },
          shouldInlineParams: false,
          queryChunks: [
            StringChunk {
              value: [ "now()" ],
              getSQL: [Function: getSQL],
            }
          ],
          append: [Function: append],
          toQuery: [Function: toQuery],
          buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
          mapInlineParam: [Function: mapInlineParam],
          getSQL: [Function: getSQL],
          as: [Function: as],
          mapWith: [Function: mapWith],
          inlineParams: [Function: inlineParams],
          if: [Function: if],
        },
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: true,
        isUnique: false,
        uniqueName: "entities_createdAt_unique",
        uniqueType: undefined,
        dataType: "custom",
        columnType: "PgCustomColumn",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "createdAt",
          keyAsName: false,
          notNull: true,
          default: SQL {
            decoder: {
              mapFromDriverValue: [Function: mapFromDriverValue],
            },
            shouldInlineParams: false,
            queryChunks: [
              StringChunk {
                value: [ "now()" ],
                getSQL: [Function: getSQL],
              }
            ],
            append: [Function: append],
            toQuery: [Function: toQuery],
            buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
            mapInlineParam: [Function: mapInlineParam],
            getSQL: [Function: getSQL],
            as: [Function: as],
            mapWith: [Function: mapWith],
            inlineParams: [Function: inlineParams],
            if: [Function: if],
          },
          hasDefault: true,
          primaryKey: false,
          isUnique: false,
          uniqueName: "entities_createdAt_unique",
          uniqueType: undefined,
          dataType: "custom",
          columnType: "PgCustomColumn",
          generated: undefined,
          fieldConfig: undefined,
          customTypeParams: {
            dataType: [Function: dataType],
            toDriver: [Function: toDriver],
            fromDriver: [Function: fromDriver],
          },
        },
        table: [Circular],
        indexConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        defaultConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        getSQLType: [Function: getSQLType],
        asc: [Function: asc],
        desc: [Function: desc],
        nullsFirst: [Function: nullsFirst],
        nullsLast: [Function: nullsLast],
        op: [Function: op],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      names: ExtraConfigColumn {
        name: "names",
        keyAsName: false,
        primary: false,
        notNull: false,
        default: SQL {
          decoder: {
            mapFromDriverValue: [Function: mapFromDriverValue],
          },
          shouldInlineParams: false,
          queryChunks: [
            StringChunk {
              value: [ "'{}'::text[]" ],
              getSQL: [Function: getSQL],
            }
          ],
          append: [Function: append],
          toQuery: [Function: toQuery],
          buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
          mapInlineParam: [Function: mapInlineParam],
          getSQL: [Function: getSQL],
          as: [Function: as],
          mapWith: [Function: mapWith],
          inlineParams: [Function: inlineParams],
          if: [Function: if],
        },
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: true,
        isUnique: false,
        uniqueName: "entities_names_unique",
        uniqueType: undefined,
        dataType: "array",
        columnType: "PgArray",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "names",
          keyAsName: false,
          notNull: false,
          default: SQL {
            decoder: {
              mapFromDriverValue: [Function: mapFromDriverValue],
            },
            shouldInlineParams: false,
            queryChunks: [
              StringChunk {
                value: [ "'{}'::text[]" ],
                getSQL: [Function: getSQL],
              }
            ],
            append: [Function: append],
            toQuery: [Function: toQuery],
            buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
            mapInlineParam: [Function: mapInlineParam],
            getSQL: [Function: getSQL],
            as: [Function: as],
            mapWith: [Function: mapWith],
            inlineParams: [Function: inlineParams],
            if: [Function: if],
          },
          hasDefault: true,
          primaryKey: false,
          isUnique: false,
          uniqueName: "entities_names_unique",
          uniqueType: undefined,
          dataType: "array",
          columnType: "PgArray",
          generated: undefined,
          baseBuilder: PgTextBuilder {
            config: {
              name: "names",
              keyAsName: false,
              notNull: false,
              default: undefined,
              hasDefault: false,
              primaryKey: false,
              isUnique: false,
              uniqueName: "entities_names_unique",
              uniqueType: undefined,
              dataType: "string",
              columnType: "PgText",
              generated: undefined,
              enumValues: undefined,
            },
            $default: [Function: $defaultFn],
            $onUpdate: [Function: $onUpdateFn],
            foreignKeyConfigs: [],
            build: [Function: build],
            array: [Function: array],
            references: [Function: references],
            unique: [Function: unique],
            generatedAlwaysAs: [Function: generatedAlwaysAs],
            buildForeignKeys: [Function: buildForeignKeys],
            buildExtraConfigColumn: [Function: buildExtraConfigColumn],
            $type: [Function: $type],
            notNull: [Function: notNull],
            default: [Function: default],
            $defaultFn: [Function: $defaultFn],
            $onUpdateFn: [Function: $onUpdateFn],
            primaryKey: [Function: primaryKey],
            setName: [Function: setName],
          },
          size: undefined,
        },
        table: [Circular],
        indexConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        defaultConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        getSQLType: [Function: getSQLType],
        asc: [Function: asc],
        desc: [Function: desc],
        nullsFirst: [Function: nullsFirst],
        nullsLast: [Function: nullsLast],
        op: [Function: op],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      metadata: ExtraConfigColumn {
        name: "metadata",
        keyAsName: false,
        primary: false,
        notNull: false,
        default: SQL {
          decoder: {
            mapFromDriverValue: [Function: mapFromDriverValue],
          },
          shouldInlineParams: false,
          queryChunks: [
            StringChunk {
              value: [ "'{}'::jsonb" ],
              getSQL: [Function: getSQL],
            }
          ],
          append: [Function: append],
          toQuery: [Function: toQuery],
          buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
          mapInlineParam: [Function: mapInlineParam],
          getSQL: [Function: getSQL],
          as: [Function: as],
          mapWith: [Function: mapWith],
          inlineParams: [Function: inlineParams],
          if: [Function: if],
        },
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: true,
        isUnique: false,
        uniqueName: "entities_metadata_unique",
        uniqueType: undefined,
        dataType: "json",
        columnType: "PgJsonb",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "metadata",
          keyAsName: false,
          notNull: false,
          default: SQL {
            decoder: {
              mapFromDriverValue: [Function: mapFromDriverValue],
            },
            shouldInlineParams: false,
            queryChunks: [
              StringChunk {
                value: [ "'{}'::jsonb" ],
                getSQL: [Function: getSQL],
              }
            ],
            append: [Function: append],
            toQuery: [Function: toQuery],
            buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
            mapInlineParam: [Function: mapInlineParam],
            getSQL: [Function: getSQL],
            as: [Function: as],
            mapWith: [Function: mapWith],
            inlineParams: [Function: inlineParams],
            if: [Function: if],
          },
          hasDefault: true,
          primaryKey: false,
          isUnique: false,
          uniqueName: "entities_metadata_unique",
          uniqueType: undefined,
          dataType: "json",
          columnType: "PgJsonb",
          generated: undefined,
        },
        table: [Circular],
        indexConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        defaultConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        getSQLType: [Function: getSQLType],
        asc: [Function: asc],
        desc: [Function: desc],
        nullsFirst: [Function: nullsFirst],
        nullsLast: [Function: nullsLast],
        op: [Function: op],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
    },
    [Symbol(drizzle:BaseName)]: "entities",
    [Symbol(drizzle:IsAlias)]: false,
    [Symbol(drizzle:IsDrizzleTable)]: true,
    [Symbol(drizzle:ExtraConfigBuilder)]: [Function],
    [Symbol(drizzle:PgInlineForeignKeys)]: [
      ForeignKey {
        reference: [Function],
        onUpdate: "no action",
        onDelete: "cascade",
        table: [Circular],
        getName: [Function: getName],
      }
    ],
    [Symbol(drizzle:EnableRLS)]: false,
    id: PgUUID {
      name: "id",
      keyAsName: false,
      primary: true,
      notNull: true,
      default: undefined,
      defaultFn: undefined,
      onUpdateFn: undefined,
      hasDefault: false,
      isUnique: false,
      uniqueName: "entities_id_unique",
      uniqueType: undefined,
      dataType: "string",
      columnType: "PgUUID",
      enumValues: undefined,
      generated: undefined,
      generatedIdentity: undefined,
      config: {
        name: "id",
        keyAsName: false,
        notNull: true,
        default: undefined,
        hasDefault: false,
        primaryKey: true,
        isUnique: false,
        uniqueName: "entities_id_unique",
        uniqueType: undefined,
        dataType: "string",
        columnType: "PgUUID",
        generated: undefined,
      },
      table: [Circular],
      getSQLType: [Function: getSQLType],
      mapFromDriverValue: [Function: mapFromDriverValue],
      mapToDriverValue: [Function: mapToDriverValue],
      shouldDisableInsert: [Function: shouldDisableInsert],
      getSQL: [Function],
    },
    agentId: PgUUID {
      name: "agentId",
      keyAsName: false,
      primary: false,
      notNull: true,
      default: undefined,
      defaultFn: undefined,
      onUpdateFn: undefined,
      hasDefault: false,
      isUnique: false,
      uniqueName: "entities_agentId_unique",
      uniqueType: undefined,
      dataType: "string",
      columnType: "PgUUID",
      enumValues: undefined,
      generated: undefined,
      generatedIdentity: undefined,
      config: {
        name: "agentId",
        keyAsName: false,
        notNull: true,
        default: undefined,
        hasDefault: false,
        primaryKey: false,
        isUnique: false,
        uniqueName: "entities_agentId_unique",
        uniqueType: undefined,
        dataType: "string",
        columnType: "PgUUID",
        generated: undefined,
      },
      table: [Circular],
      getSQLType: [Function: getSQLType],
      mapFromDriverValue: [Function: mapFromDriverValue],
      mapToDriverValue: [Function: mapToDriverValue],
      shouldDisableInsert: [Function: shouldDisableInsert],
      getSQL: [Function],
    },
    createdAt: PgCustomColumn {
      name: "createdAt",
      keyAsName: false,
      primary: false,
      notNull: true,
      default: SQL {
        decoder: {
          mapFromDriverValue: [Function: mapFromDriverValue],
        },
        shouldInlineParams: false,
        queryChunks: [
          StringChunk {
            value: [ "now()" ],
            getSQL: [Function: getSQL],
          }
        ],
        append: [Function: append],
        toQuery: [Function: toQuery],
        buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
        mapInlineParam: [Function: mapInlineParam],
        getSQL: [Function: getSQL],
        as: [Function: as],
        mapWith: [Function: mapWith],
        inlineParams: [Function: inlineParams],
        if: [Function: if],
      },
      defaultFn: undefined,
      onUpdateFn: undefined,
      hasDefault: true,
      isUnique: false,
      uniqueName: "entities_createdAt_unique",
      uniqueType: undefined,
      dataType: "custom",
      columnType: "PgCustomColumn",
      enumValues: undefined,
      generated: undefined,
      generatedIdentity: undefined,
      config: {
        name: "createdAt",
        keyAsName: false,
        notNull: true,
        default: SQL {
          decoder: {
            mapFromDriverValue: [Function: mapFromDriverValue],
          },
          shouldInlineParams: false,
          queryChunks: [
            StringChunk {
              value: [ "now()" ],
              getSQL: [Function: getSQL],
            }
          ],
          append: [Function: append],
          toQuery: [Function: toQuery],
          buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
          mapInlineParam: [Function: mapInlineParam],
          getSQL: [Function: getSQL],
          as: [Function: as],
          mapWith: [Function: mapWith],
          inlineParams: [Function: inlineParams],
          if: [Function: if],
        },
        hasDefault: true,
        primaryKey: false,
        isUnique: false,
        uniqueName: "entities_createdAt_unique",
        uniqueType: undefined,
        dataType: "custom",
        columnType: "PgCustomColumn",
        generated: undefined,
        fieldConfig: undefined,
        customTypeParams: {
          dataType: [Function: dataType],
          toDriver: [Function: toDriver],
          fromDriver: [Function: fromDriver],
        },
      },
      table: [Circular],
      sqlName: "timestamptz",
      mapTo: [Function: toDriver],
      mapFrom: [Function: fromDriver],
      getSQLType: [Function: getSQLType],
      mapFromDriverValue: [Function: mapFromDriverValue],
      mapToDriverValue: [Function: mapToDriverValue],
      shouldDisableInsert: [Function: shouldDisableInsert],
      getSQL: [Function],
    },
    names: PgArray {
      name: "names",
      keyAsName: false,
      primary: false,
      notNull: false,
      default: SQL {
        decoder: {
          mapFromDriverValue: [Function: mapFromDriverValue],
        },
        shouldInlineParams: false,
        queryChunks: [
          StringChunk {
            value: [ "'{}'::text[]" ],
            getSQL: [Function: getSQL],
          }
        ],
        append: [Function: append],
        toQuery: [Function: toQuery],
        buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
        mapInlineParam: [Function: mapInlineParam],
        getSQL: [Function: getSQL],
        as: [Function: as],
        mapWith: [Function: mapWith],
        inlineParams: [Function: inlineParams],
        if: [Function: if],
      },
      defaultFn: undefined,
      onUpdateFn: undefined,
      hasDefault: true,
      isUnique: false,
      uniqueName: "entities_names_unique",
      uniqueType: undefined,
      dataType: "array",
      columnType: "PgArray",
      enumValues: undefined,
      generated: undefined,
      generatedIdentity: undefined,
      config: {
        name: "names",
        keyAsName: false,
        notNull: false,
        default: SQL {
          decoder: {
            mapFromDriverValue: [Function: mapFromDriverValue],
          },
          shouldInlineParams: false,
          queryChunks: [
            StringChunk {
              value: [ "'{}'::text[]" ],
              getSQL: [Function: getSQL],
            }
          ],
          append: [Function: append],
          toQuery: [Function: toQuery],
          buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
          mapInlineParam: [Function: mapInlineParam],
          getSQL: [Function: getSQL],
          as: [Function: as],
          mapWith: [Function: mapWith],
          inlineParams: [Function: inlineParams],
          if: [Function: if],
        },
        hasDefault: true,
        primaryKey: false,
        isUnique: false,
        uniqueName: "entities_names_unique",
        uniqueType: undefined,
        dataType: "array",
        columnType: "PgArray",
        generated: undefined,
        baseBuilder: PgTextBuilder {
          config: {
            name: "names",
            keyAsName: false,
            notNull: false,
            default: undefined,
            hasDefault: false,
            primaryKey: false,
            isUnique: false,
            uniqueName: "entities_names_unique",
            uniqueType: undefined,
            dataType: "string",
            columnType: "PgText",
            generated: undefined,
            enumValues: undefined,
          },
          $default: [Function: $defaultFn],
          $onUpdate: [Function: $onUpdateFn],
          foreignKeyConfigs: [],
          build: [Function: build],
          array: [Function: array],
          references: [Function: references],
          unique: [Function: unique],
          generatedAlwaysAs: [Function: generatedAlwaysAs],
          buildForeignKeys: [Function: buildForeignKeys],
          buildExtraConfigColumn: [Function: buildExtraConfigColumn],
          $type: [Function: $type],
          notNull: [Function: notNull],
          default: [Function: default],
          $defaultFn: [Function: $defaultFn],
          $onUpdateFn: [Function: $onUpdateFn],
          primaryKey: [Function: primaryKey],
          setName: [Function: setName],
        },
        size: undefined,
      },
      table: [Circular],
      size: undefined,
      baseColumn: PgText {
        name: "names",
        keyAsName: false,
        primary: false,
        notNull: false,
        default: undefined,
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: false,
        isUnique: false,
        uniqueName: "entities_names_unique",
        uniqueType: undefined,
        dataType: "string",
        columnType: "PgText",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "names",
          keyAsName: false,
          notNull: false,
          default: undefined,
          hasDefault: false,
          primaryKey: false,
          isUnique: false,
          uniqueName: "entities_names_unique",
          uniqueType: undefined,
          dataType: "string",
          columnType: "PgText",
          generated: undefined,
          enumValues: undefined,
        },
        table: [Circular],
        getSQLType: [Function: getSQLType],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      range: undefined,
      getSQLType: [Function: getSQLType],
      mapFromDriverValue: [Function: mapFromDriverValue],
      mapToDriverValue: [Function: mapToDriverValue],
      shouldDisableInsert: [Function: shouldDisableInsert],
      getSQL: [Function],
    },
    metadata: PgJsonb {
      name: "metadata",
      keyAsName: false,
      primary: false,
      notNull: false,
      default: SQL {
        decoder: {
          mapFromDriverValue: [Function: mapFromDriverValue],
        },
        shouldInlineParams: false,
        queryChunks: [
          StringChunk {
            value: [ "'{}'::jsonb" ],
            getSQL: [Function: getSQL],
          }
        ],
        append: [Function: append],
        toQuery: [Function: toQuery],
        buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
        mapInlineParam: [Function: mapInlineParam],
        getSQL: [Function: getSQL],
        as: [Function: as],
        mapWith: [Function: mapWith],
        inlineParams: [Function: inlineParams],
        if: [Function: if],
      },
      defaultFn: undefined,
      onUpdateFn: undefined,
      hasDefault: true,
      isUnique: false,
      uniqueName: "entities_metadata_unique",
      uniqueType: undefined,
      dataType: "json",
      columnType: "PgJsonb",
      enumValues: undefined,
      generated: undefined,
      generatedIdentity: undefined,
      config: {
        name: "metadata",
        keyAsName: false,
        notNull: false,
        default: SQL {
          decoder: {
            mapFromDriverValue: [Function: mapFromDriverValue],
          },
          shouldInlineParams: false,
          queryChunks: [
            StringChunk {
              value: [ "'{}'::jsonb" ],
              getSQL: [Function: getSQL],
            }
          ],
          append: [Function: append],
          toQuery: [Function: toQuery],
          buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
          mapInlineParam: [Function: mapInlineParam],
          getSQL: [Function: getSQL],
          as: [Function: as],
          mapWith: [Function: mapWith],
          inlineParams: [Function: inlineParams],
          if: [Function: if],
        },
        hasDefault: true,
        primaryKey: false,
        isUnique: false,
        uniqueName: "entities_metadata_unique",
        uniqueType: undefined,
        dataType: "json",
        columnType: "PgJsonb",
        generated: undefined,
      },
      table: [Circular],
      getSQLType: [Function: getSQLType],
      mapToDriverValue: [Function: mapToDriverValue],
      mapFromDriverValue: [Function: mapFromDriverValue],
      shouldDisableInsert: [Function: shouldDisableInsert],
      getSQL: [Function],
    },
    enableRLS: [Function: enableRLS],
    getSQL: [Function],
  }, PgTable {
    [Symbol(drizzle:Name)]: "logs",
    [Symbol(drizzle:OriginalName)]: "logs",
    [Symbol(drizzle:Schema)]: undefined,
    [Symbol(drizzle:Columns)]: {
      id: PgUUID {
        name: "id",
        keyAsName: false,
        primary: false,
        notNull: true,
        default: SQL {
          decoder: {
            mapFromDriverValue: [Function: mapFromDriverValue],
          },
          shouldInlineParams: false,
          queryChunks: [
            StringChunk {
              value: [ "gen_random_uuid()" ],
              getSQL: [Function: getSQL],
            }
          ],
          append: [Function: append],
          toQuery: [Function: toQuery],
          buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
          mapInlineParam: [Function: mapInlineParam],
          getSQL: [Function: getSQL],
          as: [Function: as],
          mapWith: [Function: mapWith],
          inlineParams: [Function: inlineParams],
          if: [Function: if],
        },
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: true,
        isUnique: false,
        uniqueName: "logs_id_unique",
        uniqueType: undefined,
        dataType: "string",
        columnType: "PgUUID",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "id",
          keyAsName: false,
          notNull: true,
          default: SQL {
            decoder: {
              mapFromDriverValue: [Function: mapFromDriverValue],
            },
            shouldInlineParams: false,
            queryChunks: [
              StringChunk {
                value: [ "gen_random_uuid()" ],
                getSQL: [Function: getSQL],
              }
            ],
            append: [Function: append],
            toQuery: [Function: toQuery],
            buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
            mapInlineParam: [Function: mapInlineParam],
            getSQL: [Function: getSQL],
            as: [Function: as],
            mapWith: [Function: mapWith],
            inlineParams: [Function: inlineParams],
            if: [Function: if],
          },
          hasDefault: true,
          primaryKey: false,
          isUnique: false,
          uniqueName: "logs_id_unique",
          uniqueType: undefined,
          dataType: "string",
          columnType: "PgUUID",
          generated: undefined,
        },
        table: [Circular],
        getSQLType: [Function: getSQLType],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      createdAt: PgCustomColumn {
        name: "createdAt",
        keyAsName: false,
        primary: false,
        notNull: true,
        default: SQL {
          decoder: {
            mapFromDriverValue: [Function: mapFromDriverValue],
          },
          shouldInlineParams: false,
          queryChunks: [
            StringChunk {
              value: [ "now()" ],
              getSQL: [Function: getSQL],
            }
          ],
          append: [Function: append],
          toQuery: [Function: toQuery],
          buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
          mapInlineParam: [Function: mapInlineParam],
          getSQL: [Function: getSQL],
          as: [Function: as],
          mapWith: [Function: mapWith],
          inlineParams: [Function: inlineParams],
          if: [Function: if],
        },
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: true,
        isUnique: false,
        uniqueName: "logs_createdAt_unique",
        uniqueType: undefined,
        dataType: "custom",
        columnType: "PgCustomColumn",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "createdAt",
          keyAsName: false,
          notNull: true,
          default: SQL {
            decoder: {
              mapFromDriverValue: [Function: mapFromDriverValue],
            },
            shouldInlineParams: false,
            queryChunks: [
              StringChunk {
                value: [ "now()" ],
                getSQL: [Function: getSQL],
              }
            ],
            append: [Function: append],
            toQuery: [Function: toQuery],
            buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
            mapInlineParam: [Function: mapInlineParam],
            getSQL: [Function: getSQL],
            as: [Function: as],
            mapWith: [Function: mapWith],
            inlineParams: [Function: inlineParams],
            if: [Function: if],
          },
          hasDefault: true,
          primaryKey: false,
          isUnique: false,
          uniqueName: "logs_createdAt_unique",
          uniqueType: undefined,
          dataType: "custom",
          columnType: "PgCustomColumn",
          generated: undefined,
          fieldConfig: undefined,
          customTypeParams: {
            dataType: [Function: dataType],
            toDriver: [Function: toDriver],
            fromDriver: [Function: fromDriver],
          },
        },
        table: [Circular],
        sqlName: "timestamptz",
        mapTo: [Function: toDriver],
        mapFrom: [Function: fromDriver],
        getSQLType: [Function: getSQLType],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      entityId: PgUUID {
        name: "entityId",
        keyAsName: false,
        primary: false,
        notNull: true,
        default: undefined,
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: false,
        isUnique: false,
        uniqueName: "logs_entityId_unique",
        uniqueType: undefined,
        dataType: "string",
        columnType: "PgUUID",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "entityId",
          keyAsName: false,
          notNull: true,
          default: undefined,
          hasDefault: false,
          primaryKey: false,
          isUnique: false,
          uniqueName: "logs_entityId_unique",
          uniqueType: undefined,
          dataType: "string",
          columnType: "PgUUID",
          generated: undefined,
        },
        table: [Circular],
        getSQLType: [Function: getSQLType],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      body: PgJsonb {
        name: "body",
        keyAsName: false,
        primary: false,
        notNull: true,
        default: undefined,
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: false,
        isUnique: false,
        uniqueName: "logs_body_unique",
        uniqueType: undefined,
        dataType: "json",
        columnType: "PgJsonb",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "body",
          keyAsName: false,
          notNull: true,
          default: undefined,
          hasDefault: false,
          primaryKey: false,
          isUnique: false,
          uniqueName: "logs_body_unique",
          uniqueType: undefined,
          dataType: "json",
          columnType: "PgJsonb",
          generated: undefined,
        },
        table: [Circular],
        getSQLType: [Function: getSQLType],
        mapToDriverValue: [Function: mapToDriverValue],
        mapFromDriverValue: [Function: mapFromDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      type: PgText {
        name: "type",
        keyAsName: false,
        primary: false,
        notNull: true,
        default: undefined,
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: false,
        isUnique: false,
        uniqueName: "logs_type_unique",
        uniqueType: undefined,
        dataType: "string",
        columnType: "PgText",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "type",
          keyAsName: false,
          notNull: true,
          default: undefined,
          hasDefault: false,
          primaryKey: false,
          isUnique: false,
          uniqueName: "logs_type_unique",
          uniqueType: undefined,
          dataType: "string",
          columnType: "PgText",
          generated: undefined,
          enumValues: undefined,
        },
        table: [Circular],
        getSQLType: [Function: getSQLType],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      roomId: PgUUID {
        name: "roomId",
        keyAsName: false,
        primary: false,
        notNull: true,
        default: undefined,
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: false,
        isUnique: false,
        uniqueName: "logs_roomId_unique",
        uniqueType: undefined,
        dataType: "string",
        columnType: "PgUUID",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "roomId",
          keyAsName: false,
          notNull: true,
          default: undefined,
          hasDefault: false,
          primaryKey: false,
          isUnique: false,
          uniqueName: "logs_roomId_unique",
          uniqueType: undefined,
          dataType: "string",
          columnType: "PgUUID",
          generated: undefined,
        },
        table: [Circular],
        getSQLType: [Function: getSQLType],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
    },
    [Symbol(drizzle:ExtraConfigColumns)]: {
      id: ExtraConfigColumn {
        name: "id",
        keyAsName: false,
        primary: false,
        notNull: true,
        default: SQL {
          decoder: {
            mapFromDriverValue: [Function: mapFromDriverValue],
          },
          shouldInlineParams: false,
          queryChunks: [
            StringChunk {
              value: [ "gen_random_uuid()" ],
              getSQL: [Function: getSQL],
            }
          ],
          append: [Function: append],
          toQuery: [Function: toQuery],
          buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
          mapInlineParam: [Function: mapInlineParam],
          getSQL: [Function: getSQL],
          as: [Function: as],
          mapWith: [Function: mapWith],
          inlineParams: [Function: inlineParams],
          if: [Function: if],
        },
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: true,
        isUnique: false,
        uniqueName: "logs_id_unique",
        uniqueType: undefined,
        dataType: "string",
        columnType: "PgUUID",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "id",
          keyAsName: false,
          notNull: true,
          default: SQL {
            decoder: {
              mapFromDriverValue: [Function: mapFromDriverValue],
            },
            shouldInlineParams: false,
            queryChunks: [
              StringChunk {
                value: [ "gen_random_uuid()" ],
                getSQL: [Function: getSQL],
              }
            ],
            append: [Function: append],
            toQuery: [Function: toQuery],
            buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
            mapInlineParam: [Function: mapInlineParam],
            getSQL: [Function: getSQL],
            as: [Function: as],
            mapWith: [Function: mapWith],
            inlineParams: [Function: inlineParams],
            if: [Function: if],
          },
          hasDefault: true,
          primaryKey: false,
          isUnique: false,
          uniqueName: "logs_id_unique",
          uniqueType: undefined,
          dataType: "string",
          columnType: "PgUUID",
          generated: undefined,
        },
        table: [Circular],
        indexConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        defaultConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        getSQLType: [Function: getSQLType],
        asc: [Function: asc],
        desc: [Function: desc],
        nullsFirst: [Function: nullsFirst],
        nullsLast: [Function: nullsLast],
        op: [Function: op],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      createdAt: ExtraConfigColumn {
        name: "createdAt",
        keyAsName: false,
        primary: false,
        notNull: true,
        default: SQL {
          decoder: {
            mapFromDriverValue: [Function: mapFromDriverValue],
          },
          shouldInlineParams: false,
          queryChunks: [
            StringChunk {
              value: [ "now()" ],
              getSQL: [Function: getSQL],
            }
          ],
          append: [Function: append],
          toQuery: [Function: toQuery],
          buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
          mapInlineParam: [Function: mapInlineParam],
          getSQL: [Function: getSQL],
          as: [Function: as],
          mapWith: [Function: mapWith],
          inlineParams: [Function: inlineParams],
          if: [Function: if],
        },
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: true,
        isUnique: false,
        uniqueName: "logs_createdAt_unique",
        uniqueType: undefined,
        dataType: "custom",
        columnType: "PgCustomColumn",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "createdAt",
          keyAsName: false,
          notNull: true,
          default: SQL {
            decoder: {
              mapFromDriverValue: [Function: mapFromDriverValue],
            },
            shouldInlineParams: false,
            queryChunks: [
              StringChunk {
                value: [ "now()" ],
                getSQL: [Function: getSQL],
              }
            ],
            append: [Function: append],
            toQuery: [Function: toQuery],
            buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
            mapInlineParam: [Function: mapInlineParam],
            getSQL: [Function: getSQL],
            as: [Function: as],
            mapWith: [Function: mapWith],
            inlineParams: [Function: inlineParams],
            if: [Function: if],
          },
          hasDefault: true,
          primaryKey: false,
          isUnique: false,
          uniqueName: "logs_createdAt_unique",
          uniqueType: undefined,
          dataType: "custom",
          columnType: "PgCustomColumn",
          generated: undefined,
          fieldConfig: undefined,
          customTypeParams: {
            dataType: [Function: dataType],
            toDriver: [Function: toDriver],
            fromDriver: [Function: fromDriver],
          },
        },
        table: [Circular],
        indexConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        defaultConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        getSQLType: [Function: getSQLType],
        asc: [Function: asc],
        desc: [Function: desc],
        nullsFirst: [Function: nullsFirst],
        nullsLast: [Function: nullsLast],
        op: [Function: op],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      entityId: ExtraConfigColumn {
        name: "entityId",
        keyAsName: false,
        primary: false,
        notNull: true,
        default: undefined,
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: false,
        isUnique: false,
        uniqueName: "logs_entityId_unique",
        uniqueType: undefined,
        dataType: "string",
        columnType: "PgUUID",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "entityId",
          keyAsName: false,
          notNull: true,
          default: undefined,
          hasDefault: false,
          primaryKey: false,
          isUnique: false,
          uniqueName: "logs_entityId_unique",
          uniqueType: undefined,
          dataType: "string",
          columnType: "PgUUID",
          generated: undefined,
        },
        table: [Circular],
        indexConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        defaultConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        getSQLType: [Function: getSQLType],
        asc: [Function: asc],
        desc: [Function: desc],
        nullsFirst: [Function: nullsFirst],
        nullsLast: [Function: nullsLast],
        op: [Function: op],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      body: ExtraConfigColumn {
        name: "body",
        keyAsName: false,
        primary: false,
        notNull: true,
        default: undefined,
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: false,
        isUnique: false,
        uniqueName: "logs_body_unique",
        uniqueType: undefined,
        dataType: "json",
        columnType: "PgJsonb",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "body",
          keyAsName: false,
          notNull: true,
          default: undefined,
          hasDefault: false,
          primaryKey: false,
          isUnique: false,
          uniqueName: "logs_body_unique",
          uniqueType: undefined,
          dataType: "json",
          columnType: "PgJsonb",
          generated: undefined,
        },
        table: [Circular],
        indexConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        defaultConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        getSQLType: [Function: getSQLType],
        asc: [Function: asc],
        desc: [Function: desc],
        nullsFirst: [Function: nullsFirst],
        nullsLast: [Function: nullsLast],
        op: [Function: op],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      type: ExtraConfigColumn {
        name: "type",
        keyAsName: false,
        primary: false,
        notNull: true,
        default: undefined,
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: false,
        isUnique: false,
        uniqueName: "logs_type_unique",
        uniqueType: undefined,
        dataType: "string",
        columnType: "PgText",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "type",
          keyAsName: false,
          notNull: true,
          default: undefined,
          hasDefault: false,
          primaryKey: false,
          isUnique: false,
          uniqueName: "logs_type_unique",
          uniqueType: undefined,
          dataType: "string",
          columnType: "PgText",
          generated: undefined,
          enumValues: undefined,
        },
        table: [Circular],
        indexConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        defaultConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        getSQLType: [Function: getSQLType],
        asc: [Function: asc],
        desc: [Function: desc],
        nullsFirst: [Function: nullsFirst],
        nullsLast: [Function: nullsLast],
        op: [Function: op],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      roomId: ExtraConfigColumn {
        name: "roomId",
        keyAsName: false,
        primary: false,
        notNull: true,
        default: undefined,
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: false,
        isUnique: false,
        uniqueName: "logs_roomId_unique",
        uniqueType: undefined,
        dataType: "string",
        columnType: "PgUUID",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "roomId",
          keyAsName: false,
          notNull: true,
          default: undefined,
          hasDefault: false,
          primaryKey: false,
          isUnique: false,
          uniqueName: "logs_roomId_unique",
          uniqueType: undefined,
          dataType: "string",
          columnType: "PgUUID",
          generated: undefined,
        },
        table: [Circular],
        indexConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        defaultConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        getSQLType: [Function: getSQLType],
        asc: [Function: asc],
        desc: [Function: desc],
        nullsFirst: [Function: nullsFirst],
        nullsLast: [Function: nullsLast],
        op: [Function: op],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
    },
    [Symbol(drizzle:BaseName)]: "logs",
    [Symbol(drizzle:IsAlias)]: false,
    [Symbol(drizzle:IsDrizzleTable)]: true,
    [Symbol(drizzle:ExtraConfigBuilder)]: [Function],
    [Symbol(drizzle:PgInlineForeignKeys)]: [
      ForeignKey {
        reference: [Function],
        onUpdate: "no action",
        onDelete: "no action",
        table: [Circular],
        getName: [Function: getName],
      }, ForeignKey {
        reference: [Function],
        onUpdate: "no action",
        onDelete: "no action",
        table: [Circular],
        getName: [Function: getName],
      }
    ],
    [Symbol(drizzle:EnableRLS)]: false,
    id: PgUUID {
      name: "id",
      keyAsName: false,
      primary: false,
      notNull: true,
      default: SQL {
        decoder: {
          mapFromDriverValue: [Function: mapFromDriverValue],
        },
        shouldInlineParams: false,
        queryChunks: [
          StringChunk {
            value: [ "gen_random_uuid()" ],
            getSQL: [Function: getSQL],
          }
        ],
        append: [Function: append],
        toQuery: [Function: toQuery],
        buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
        mapInlineParam: [Function: mapInlineParam],
        getSQL: [Function: getSQL],
        as: [Function: as],
        mapWith: [Function: mapWith],
        inlineParams: [Function: inlineParams],
        if: [Function: if],
      },
      defaultFn: undefined,
      onUpdateFn: undefined,
      hasDefault: true,
      isUnique: false,
      uniqueName: "logs_id_unique",
      uniqueType: undefined,
      dataType: "string",
      columnType: "PgUUID",
      enumValues: undefined,
      generated: undefined,
      generatedIdentity: undefined,
      config: {
        name: "id",
        keyAsName: false,
        notNull: true,
        default: SQL {
          decoder: {
            mapFromDriverValue: [Function: mapFromDriverValue],
          },
          shouldInlineParams: false,
          queryChunks: [
            StringChunk {
              value: [ "gen_random_uuid()" ],
              getSQL: [Function: getSQL],
            }
          ],
          append: [Function: append],
          toQuery: [Function: toQuery],
          buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
          mapInlineParam: [Function: mapInlineParam],
          getSQL: [Function: getSQL],
          as: [Function: as],
          mapWith: [Function: mapWith],
          inlineParams: [Function: inlineParams],
          if: [Function: if],
        },
        hasDefault: true,
        primaryKey: false,
        isUnique: false,
        uniqueName: "logs_id_unique",
        uniqueType: undefined,
        dataType: "string",
        columnType: "PgUUID",
        generated: undefined,
      },
      table: [Circular],
      getSQLType: [Function: getSQLType],
      mapFromDriverValue: [Function: mapFromDriverValue],
      mapToDriverValue: [Function: mapToDriverValue],
      shouldDisableInsert: [Function: shouldDisableInsert],
      getSQL: [Function],
    },
    createdAt: PgCustomColumn {
      name: "createdAt",
      keyAsName: false,
      primary: false,
      notNull: true,
      default: SQL {
        decoder: {
          mapFromDriverValue: [Function: mapFromDriverValue],
        },
        shouldInlineParams: false,
        queryChunks: [
          StringChunk {
            value: [ "now()" ],
            getSQL: [Function: getSQL],
          }
        ],
        append: [Function: append],
        toQuery: [Function: toQuery],
        buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
        mapInlineParam: [Function: mapInlineParam],
        getSQL: [Function: getSQL],
        as: [Function: as],
        mapWith: [Function: mapWith],
        inlineParams: [Function: inlineParams],
        if: [Function: if],
      },
      defaultFn: undefined,
      onUpdateFn: undefined,
      hasDefault: true,
      isUnique: false,
      uniqueName: "logs_createdAt_unique",
      uniqueType: undefined,
      dataType: "custom",
      columnType: "PgCustomColumn",
      enumValues: undefined,
      generated: undefined,
      generatedIdentity: undefined,
      config: {
        name: "createdAt",
        keyAsName: false,
        notNull: true,
        default: SQL {
          decoder: {
            mapFromDriverValue: [Function: mapFromDriverValue],
          },
          shouldInlineParams: false,
          queryChunks: [
            StringChunk {
              value: [ "now()" ],
              getSQL: [Function: getSQL],
            }
          ],
          append: [Function: append],
          toQuery: [Function: toQuery],
          buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
          mapInlineParam: [Function: mapInlineParam],
          getSQL: [Function: getSQL],
          as: [Function: as],
          mapWith: [Function: mapWith],
          inlineParams: [Function: inlineParams],
          if: [Function: if],
        },
        hasDefault: true,
        primaryKey: false,
        isUnique: false,
        uniqueName: "logs_createdAt_unique",
        uniqueType: undefined,
        dataType: "custom",
        columnType: "PgCustomColumn",
        generated: undefined,
        fieldConfig: undefined,
        customTypeParams: {
          dataType: [Function: dataType],
          toDriver: [Function: toDriver],
          fromDriver: [Function: fromDriver],
        },
      },
      table: [Circular],
      sqlName: "timestamptz",
      mapTo: [Function: toDriver],
      mapFrom: [Function: fromDriver],
      getSQLType: [Function: getSQLType],
      mapFromDriverValue: [Function: mapFromDriverValue],
      mapToDriverValue: [Function: mapToDriverValue],
      shouldDisableInsert: [Function: shouldDisableInsert],
      getSQL: [Function],
    },
    entityId: PgUUID {
      name: "entityId",
      keyAsName: false,
      primary: false,
      notNull: true,
      default: undefined,
      defaultFn: undefined,
      onUpdateFn: undefined,
      hasDefault: false,
      isUnique: false,
      uniqueName: "logs_entityId_unique",
      uniqueType: undefined,
      dataType: "string",
      columnType: "PgUUID",
      enumValues: undefined,
      generated: undefined,
      generatedIdentity: undefined,
      config: {
        name: "entityId",
        keyAsName: false,
        notNull: true,
        default: undefined,
        hasDefault: false,
        primaryKey: false,
        isUnique: false,
        uniqueName: "logs_entityId_unique",
        uniqueType: undefined,
        dataType: "string",
        columnType: "PgUUID",
        generated: undefined,
      },
      table: [Circular],
      getSQLType: [Function: getSQLType],
      mapFromDriverValue: [Function: mapFromDriverValue],
      mapToDriverValue: [Function: mapToDriverValue],
      shouldDisableInsert: [Function: shouldDisableInsert],
      getSQL: [Function],
    },
    body: PgJsonb {
      name: "body",
      keyAsName: false,
      primary: false,
      notNull: true,
      default: undefined,
      defaultFn: undefined,
      onUpdateFn: undefined,
      hasDefault: false,
      isUnique: false,
      uniqueName: "logs_body_unique",
      uniqueType: undefined,
      dataType: "json",
      columnType: "PgJsonb",
      enumValues: undefined,
      generated: undefined,
      generatedIdentity: undefined,
      config: {
        name: "body",
        keyAsName: false,
        notNull: true,
        default: undefined,
        hasDefault: false,
        primaryKey: false,
        isUnique: false,
        uniqueName: "logs_body_unique",
        uniqueType: undefined,
        dataType: "json",
        columnType: "PgJsonb",
        generated: undefined,
      },
      table: [Circular],
      getSQLType: [Function: getSQLType],
      mapToDriverValue: [Function: mapToDriverValue],
      mapFromDriverValue: [Function: mapFromDriverValue],
      shouldDisableInsert: [Function: shouldDisableInsert],
      getSQL: [Function],
    },
    type: PgText {
      name: "type",
      keyAsName: false,
      primary: false,
      notNull: true,
      default: undefined,
      defaultFn: undefined,
      onUpdateFn: undefined,
      hasDefault: false,
      isUnique: false,
      uniqueName: "logs_type_unique",
      uniqueType: undefined,
      dataType: "string",
      columnType: "PgText",
      enumValues: undefined,
      generated: undefined,
      generatedIdentity: undefined,
      config: {
        name: "type",
        keyAsName: false,
        notNull: true,
        default: undefined,
        hasDefault: false,
        primaryKey: false,
        isUnique: false,
        uniqueName: "logs_type_unique",
        uniqueType: undefined,
        dataType: "string",
        columnType: "PgText",
        generated: undefined,
        enumValues: undefined,
      },
      table: [Circular],
      getSQLType: [Function: getSQLType],
      mapFromDriverValue: [Function: mapFromDriverValue],
      mapToDriverValue: [Function: mapToDriverValue],
      shouldDisableInsert: [Function: shouldDisableInsert],
      getSQL: [Function],
    },
    roomId: PgUUID {
      name: "roomId",
      keyAsName: false,
      primary: false,
      notNull: true,
      default: undefined,
      defaultFn: undefined,
      onUpdateFn: undefined,
      hasDefault: false,
      isUnique: false,
      uniqueName: "logs_roomId_unique",
      uniqueType: undefined,
      dataType: "string",
      columnType: "PgUUID",
      enumValues: undefined,
      generated: undefined,
      generatedIdentity: undefined,
      config: {
        name: "roomId",
        keyAsName: false,
        notNull: true,
        default: undefined,
        hasDefault: false,
        primaryKey: false,
        isUnique: false,
        uniqueName: "logs_roomId_unique",
        uniqueType: undefined,
        dataType: "string",
        columnType: "PgUUID",
        generated: undefined,
      },
      table: [Circular],
      getSQLType: [Function: getSQLType],
      mapFromDriverValue: [Function: mapFromDriverValue],
      mapToDriverValue: [Function: mapToDriverValue],
      shouldDisableInsert: [Function: shouldDisableInsert],
      getSQL: [Function],
    },
    enableRLS: [Function: enableRLS],
    getSQL: [Function],
  }, PgTable {
    [Symbol(drizzle:Name)]: "memories",
    [Symbol(drizzle:OriginalName)]: "memories",
    [Symbol(drizzle:Schema)]: undefined,
    [Symbol(drizzle:Columns)]: {
      id: PgUUID {
        name: "id",
        keyAsName: false,
        primary: true,
        notNull: true,
        default: undefined,
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: false,
        isUnique: false,
        uniqueName: "memories_id_unique",
        uniqueType: undefined,
        dataType: "string",
        columnType: "PgUUID",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "id",
          keyAsName: false,
          notNull: true,
          default: undefined,
          hasDefault: false,
          primaryKey: true,
          isUnique: false,
          uniqueName: "memories_id_unique",
          uniqueType: undefined,
          dataType: "string",
          columnType: "PgUUID",
          generated: undefined,
        },
        table: [Circular],
        getSQLType: [Function: getSQLType],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      type: PgText {
        name: "type",
        keyAsName: false,
        primary: false,
        notNull: true,
        default: undefined,
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: false,
        isUnique: false,
        uniqueName: "memories_type_unique",
        uniqueType: undefined,
        dataType: "string",
        columnType: "PgText",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "type",
          keyAsName: false,
          notNull: true,
          default: undefined,
          hasDefault: false,
          primaryKey: false,
          isUnique: false,
          uniqueName: "memories_type_unique",
          uniqueType: undefined,
          dataType: "string",
          columnType: "PgText",
          generated: undefined,
          enumValues: undefined,
        },
        table: [Circular],
        getSQLType: [Function: getSQLType],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      createdAt: PgCustomColumn {
        name: "createdAt",
        keyAsName: false,
        primary: false,
        notNull: true,
        default: SQL {
          decoder: {
            mapFromDriverValue: [Function: mapFromDriverValue],
          },
          shouldInlineParams: false,
          queryChunks: [
            StringChunk {
              value: [ "now()" ],
              getSQL: [Function: getSQL],
            }
          ],
          append: [Function: append],
          toQuery: [Function: toQuery],
          buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
          mapInlineParam: [Function: mapInlineParam],
          getSQL: [Function: getSQL],
          as: [Function: as],
          mapWith: [Function: mapWith],
          inlineParams: [Function: inlineParams],
          if: [Function: if],
        },
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: true,
        isUnique: false,
        uniqueName: "memories_createdAt_unique",
        uniqueType: undefined,
        dataType: "custom",
        columnType: "PgCustomColumn",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "createdAt",
          keyAsName: false,
          notNull: true,
          default: SQL {
            decoder: {
              mapFromDriverValue: [Function: mapFromDriverValue],
            },
            shouldInlineParams: false,
            queryChunks: [
              StringChunk {
                value: [ "now()" ],
                getSQL: [Function: getSQL],
              }
            ],
            append: [Function: append],
            toQuery: [Function: toQuery],
            buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
            mapInlineParam: [Function: mapInlineParam],
            getSQL: [Function: getSQL],
            as: [Function: as],
            mapWith: [Function: mapWith],
            inlineParams: [Function: inlineParams],
            if: [Function: if],
          },
          hasDefault: true,
          primaryKey: false,
          isUnique: false,
          uniqueName: "memories_createdAt_unique",
          uniqueType: undefined,
          dataType: "custom",
          columnType: "PgCustomColumn",
          generated: undefined,
          fieldConfig: undefined,
          customTypeParams: {
            dataType: [Function: dataType],
            toDriver: [Function: toDriver],
            fromDriver: [Function: fromDriver],
          },
        },
        table: [Circular],
        sqlName: "timestamptz",
        mapTo: [Function: toDriver],
        mapFrom: [Function: fromDriver],
        getSQLType: [Function: getSQLType],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      content: PgJsonb {
        name: "content",
        keyAsName: false,
        primary: false,
        notNull: true,
        default: undefined,
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: false,
        isUnique: false,
        uniqueName: "memories_content_unique",
        uniqueType: undefined,
        dataType: "json",
        columnType: "PgJsonb",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "content",
          keyAsName: false,
          notNull: true,
          default: undefined,
          hasDefault: false,
          primaryKey: false,
          isUnique: false,
          uniqueName: "memories_content_unique",
          uniqueType: undefined,
          dataType: "json",
          columnType: "PgJsonb",
          generated: undefined,
        },
        table: [Circular],
        getSQLType: [Function: getSQLType],
        mapToDriverValue: [Function: mapToDriverValue],
        mapFromDriverValue: [Function: mapFromDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      entityId: PgUUID {
        name: "entityId",
        keyAsName: false,
        primary: false,
        notNull: false,
        default: undefined,
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: false,
        isUnique: false,
        uniqueName: "memories_entityId_unique",
        uniqueType: undefined,
        dataType: "string",
        columnType: "PgUUID",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "entityId",
          keyAsName: false,
          notNull: false,
          default: undefined,
          hasDefault: false,
          primaryKey: false,
          isUnique: false,
          uniqueName: "memories_entityId_unique",
          uniqueType: undefined,
          dataType: "string",
          columnType: "PgUUID",
          generated: undefined,
        },
        table: [Circular],
        getSQLType: [Function: getSQLType],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      agentId: PgUUID {
        name: "agentId",
        keyAsName: false,
        primary: false,
        notNull: false,
        default: undefined,
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: false,
        isUnique: false,
        uniqueName: "memories_agentId_unique",
        uniqueType: undefined,
        dataType: "string",
        columnType: "PgUUID",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "agentId",
          keyAsName: false,
          notNull: false,
          default: undefined,
          hasDefault: false,
          primaryKey: false,
          isUnique: false,
          uniqueName: "memories_agentId_unique",
          uniqueType: undefined,
          dataType: "string",
          columnType: "PgUUID",
          generated: undefined,
        },
        table: [Circular],
        getSQLType: [Function: getSQLType],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      roomId: PgUUID {
        name: "roomId",
        keyAsName: false,
        primary: false,
        notNull: false,
        default: undefined,
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: false,
        isUnique: false,
        uniqueName: "memories_roomId_unique",
        uniqueType: undefined,
        dataType: "string",
        columnType: "PgUUID",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "roomId",
          keyAsName: false,
          notNull: false,
          default: undefined,
          hasDefault: false,
          primaryKey: false,
          isUnique: false,
          uniqueName: "memories_roomId_unique",
          uniqueType: undefined,
          dataType: "string",
          columnType: "PgUUID",
          generated: undefined,
        },
        table: [Circular],
        getSQLType: [Function: getSQLType],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      unique: PgBoolean {
        name: "unique",
        keyAsName: false,
        primary: false,
        notNull: true,
        default: true,
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: true,
        isUnique: false,
        uniqueName: "memories_unique_unique",
        uniqueType: undefined,
        dataType: "boolean",
        columnType: "PgBoolean",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "unique",
          keyAsName: false,
          notNull: true,
          default: true,
          hasDefault: true,
          primaryKey: false,
          isUnique: false,
          uniqueName: "memories_unique_unique",
          uniqueType: undefined,
          dataType: "boolean",
          columnType: "PgBoolean",
          generated: undefined,
        },
        table: [Circular],
        getSQLType: [Function: getSQLType],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      metadata: PgJsonb {
        name: "metadata",
        keyAsName: false,
        primary: false,
        notNull: true,
        default: {},
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: true,
        isUnique: false,
        uniqueName: "memories_metadata_unique",
        uniqueType: undefined,
        dataType: "json",
        columnType: "PgJsonb",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "metadata",
          keyAsName: false,
          notNull: true,
          default: {},
          hasDefault: true,
          primaryKey: false,
          isUnique: false,
          uniqueName: "memories_metadata_unique",
          uniqueType: undefined,
          dataType: "json",
          columnType: "PgJsonb",
          generated: undefined,
        },
        table: [Circular],
        getSQLType: [Function: getSQLType],
        mapToDriverValue: [Function: mapToDriverValue],
        mapFromDriverValue: [Function: mapFromDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
    },
    [Symbol(drizzle:ExtraConfigColumns)]: {
      id: ExtraConfigColumn {
        name: "id",
        keyAsName: false,
        primary: true,
        notNull: true,
        default: undefined,
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: false,
        isUnique: false,
        uniqueName: "memories_id_unique",
        uniqueType: undefined,
        dataType: "string",
        columnType: "PgUUID",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "id",
          keyAsName: false,
          notNull: true,
          default: undefined,
          hasDefault: false,
          primaryKey: true,
          isUnique: false,
          uniqueName: "memories_id_unique",
          uniqueType: undefined,
          dataType: "string",
          columnType: "PgUUID",
          generated: undefined,
        },
        table: [Circular],
        indexConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        defaultConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        getSQLType: [Function: getSQLType],
        asc: [Function: asc],
        desc: [Function: desc],
        nullsFirst: [Function: nullsFirst],
        nullsLast: [Function: nullsLast],
        op: [Function: op],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      type: ExtraConfigColumn {
        name: "type",
        keyAsName: false,
        primary: false,
        notNull: true,
        default: undefined,
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: false,
        isUnique: false,
        uniqueName: "memories_type_unique",
        uniqueType: undefined,
        dataType: "string",
        columnType: "PgText",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "type",
          keyAsName: false,
          notNull: true,
          default: undefined,
          hasDefault: false,
          primaryKey: false,
          isUnique: false,
          uniqueName: "memories_type_unique",
          uniqueType: undefined,
          dataType: "string",
          columnType: "PgText",
          generated: undefined,
          enumValues: undefined,
        },
        table: [Circular],
        indexConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        defaultConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        getSQLType: [Function: getSQLType],
        asc: [Function: asc],
        desc: [Function: desc],
        nullsFirst: [Function: nullsFirst],
        nullsLast: [Function: nullsLast],
        op: [Function: op],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      createdAt: ExtraConfigColumn {
        name: "createdAt",
        keyAsName: false,
        primary: false,
        notNull: true,
        default: SQL {
          decoder: {
            mapFromDriverValue: [Function: mapFromDriverValue],
          },
          shouldInlineParams: false,
          queryChunks: [
            StringChunk {
              value: [ "now()" ],
              getSQL: [Function: getSQL],
            }
          ],
          append: [Function: append],
          toQuery: [Function: toQuery],
          buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
          mapInlineParam: [Function: mapInlineParam],
          getSQL: [Function: getSQL],
          as: [Function: as],
          mapWith: [Function: mapWith],
          inlineParams: [Function: inlineParams],
          if: [Function: if],
        },
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: true,
        isUnique: false,
        uniqueName: "memories_createdAt_unique",
        uniqueType: undefined,
        dataType: "custom",
        columnType: "PgCustomColumn",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "createdAt",
          keyAsName: false,
          notNull: true,
          default: SQL {
            decoder: {
              mapFromDriverValue: [Function: mapFromDriverValue],
            },
            shouldInlineParams: false,
            queryChunks: [
              StringChunk {
                value: [ "now()" ],
                getSQL: [Function: getSQL],
              }
            ],
            append: [Function: append],
            toQuery: [Function: toQuery],
            buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
            mapInlineParam: [Function: mapInlineParam],
            getSQL: [Function: getSQL],
            as: [Function: as],
            mapWith: [Function: mapWith],
            inlineParams: [Function: inlineParams],
            if: [Function: if],
          },
          hasDefault: true,
          primaryKey: false,
          isUnique: false,
          uniqueName: "memories_createdAt_unique",
          uniqueType: undefined,
          dataType: "custom",
          columnType: "PgCustomColumn",
          generated: undefined,
          fieldConfig: undefined,
          customTypeParams: {
            dataType: [Function: dataType],
            toDriver: [Function: toDriver],
            fromDriver: [Function: fromDriver],
          },
        },
        table: [Circular],
        indexConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        defaultConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        getSQLType: [Function: getSQLType],
        asc: [Function: asc],
        desc: [Function: desc],
        nullsFirst: [Function: nullsFirst],
        nullsLast: [Function: nullsLast],
        op: [Function: op],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      content: ExtraConfigColumn {
        name: "content",
        keyAsName: false,
        primary: false,
        notNull: true,
        default: undefined,
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: false,
        isUnique: false,
        uniqueName: "memories_content_unique",
        uniqueType: undefined,
        dataType: "json",
        columnType: "PgJsonb",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "content",
          keyAsName: false,
          notNull: true,
          default: undefined,
          hasDefault: false,
          primaryKey: false,
          isUnique: false,
          uniqueName: "memories_content_unique",
          uniqueType: undefined,
          dataType: "json",
          columnType: "PgJsonb",
          generated: undefined,
        },
        table: [Circular],
        indexConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        defaultConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        getSQLType: [Function: getSQLType],
        asc: [Function: asc],
        desc: [Function: desc],
        nullsFirst: [Function: nullsFirst],
        nullsLast: [Function: nullsLast],
        op: [Function: op],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      entityId: ExtraConfigColumn {
        name: "entityId",
        keyAsName: false,
        primary: false,
        notNull: false,
        default: undefined,
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: false,
        isUnique: false,
        uniqueName: "memories_entityId_unique",
        uniqueType: undefined,
        dataType: "string",
        columnType: "PgUUID",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "entityId",
          keyAsName: false,
          notNull: false,
          default: undefined,
          hasDefault: false,
          primaryKey: false,
          isUnique: false,
          uniqueName: "memories_entityId_unique",
          uniqueType: undefined,
          dataType: "string",
          columnType: "PgUUID",
          generated: undefined,
        },
        table: [Circular],
        indexConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        defaultConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        getSQLType: [Function: getSQLType],
        asc: [Function: asc],
        desc: [Function: desc],
        nullsFirst: [Function: nullsFirst],
        nullsLast: [Function: nullsLast],
        op: [Function: op],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      agentId: ExtraConfigColumn {
        name: "agentId",
        keyAsName: false,
        primary: false,
        notNull: false,
        default: undefined,
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: false,
        isUnique: false,
        uniqueName: "memories_agentId_unique",
        uniqueType: undefined,
        dataType: "string",
        columnType: "PgUUID",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "agentId",
          keyAsName: false,
          notNull: false,
          default: undefined,
          hasDefault: false,
          primaryKey: false,
          isUnique: false,
          uniqueName: "memories_agentId_unique",
          uniqueType: undefined,
          dataType: "string",
          columnType: "PgUUID",
          generated: undefined,
        },
        table: [Circular],
        indexConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        defaultConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        getSQLType: [Function: getSQLType],
        asc: [Function: asc],
        desc: [Function: desc],
        nullsFirst: [Function: nullsFirst],
        nullsLast: [Function: nullsLast],
        op: [Function: op],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      roomId: ExtraConfigColumn {
        name: "roomId",
        keyAsName: false,
        primary: false,
        notNull: false,
        default: undefined,
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: false,
        isUnique: false,
        uniqueName: "memories_roomId_unique",
        uniqueType: undefined,
        dataType: "string",
        columnType: "PgUUID",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "roomId",
          keyAsName: false,
          notNull: false,
          default: undefined,
          hasDefault: false,
          primaryKey: false,
          isUnique: false,
          uniqueName: "memories_roomId_unique",
          uniqueType: undefined,
          dataType: "string",
          columnType: "PgUUID",
          generated: undefined,
        },
        table: [Circular],
        indexConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        defaultConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        getSQLType: [Function: getSQLType],
        asc: [Function: asc],
        desc: [Function: desc],
        nullsFirst: [Function: nullsFirst],
        nullsLast: [Function: nullsLast],
        op: [Function: op],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      unique: ExtraConfigColumn {
        name: "unique",
        keyAsName: false,
        primary: false,
        notNull: true,
        default: true,
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: true,
        isUnique: false,
        uniqueName: "memories_unique_unique",
        uniqueType: undefined,
        dataType: "boolean",
        columnType: "PgBoolean",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "unique",
          keyAsName: false,
          notNull: true,
          default: true,
          hasDefault: true,
          primaryKey: false,
          isUnique: false,
          uniqueName: "memories_unique_unique",
          uniqueType: undefined,
          dataType: "boolean",
          columnType: "PgBoolean",
          generated: undefined,
        },
        table: [Circular],
        indexConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        defaultConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        getSQLType: [Function: getSQLType],
        asc: [Function: asc],
        desc: [Function: desc],
        nullsFirst: [Function: nullsFirst],
        nullsLast: [Function: nullsLast],
        op: [Function: op],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      metadata: ExtraConfigColumn {
        name: "metadata",
        keyAsName: false,
        primary: false,
        notNull: true,
        default: {},
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: true,
        isUnique: false,
        uniqueName: "memories_metadata_unique",
        uniqueType: undefined,
        dataType: "json",
        columnType: "PgJsonb",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "metadata",
          keyAsName: false,
          notNull: true,
          default: {},
          hasDefault: true,
          primaryKey: false,
          isUnique: false,
          uniqueName: "memories_metadata_unique",
          uniqueType: undefined,
          dataType: "json",
          columnType: "PgJsonb",
          generated: undefined,
        },
        table: [Circular],
        indexConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        defaultConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        getSQLType: [Function: getSQLType],
        asc: [Function: asc],
        desc: [Function: desc],
        nullsFirst: [Function: nullsFirst],
        nullsLast: [Function: nullsLast],
        op: [Function: op],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
    },
    [Symbol(drizzle:BaseName)]: "memories",
    [Symbol(drizzle:IsAlias)]: false,
    [Symbol(drizzle:IsDrizzleTable)]: true,
    [Symbol(drizzle:ExtraConfigBuilder)]: [Function],
    [Symbol(drizzle:PgInlineForeignKeys)]: [
      ForeignKey {
        reference: [Function],
        onUpdate: "no action",
        onDelete: "cascade",
        table: [Circular],
        getName: [Function: getName],
      }, ForeignKey {
        reference: [Function],
        onUpdate: "no action",
        onDelete: "cascade",
        table: [Circular],
        getName: [Function: getName],
      }, ForeignKey {
        reference: [Function],
        onUpdate: "no action",
        onDelete: "cascade",
        table: [Circular],
        getName: [Function: getName],
      }
    ],
    [Symbol(drizzle:EnableRLS)]: false,
    id: PgUUID {
      name: "id",
      keyAsName: false,
      primary: true,
      notNull: true,
      default: undefined,
      defaultFn: undefined,
      onUpdateFn: undefined,
      hasDefault: false,
      isUnique: false,
      uniqueName: "memories_id_unique",
      uniqueType: undefined,
      dataType: "string",
      columnType: "PgUUID",
      enumValues: undefined,
      generated: undefined,
      generatedIdentity: undefined,
      config: {
        name: "id",
        keyAsName: false,
        notNull: true,
        default: undefined,
        hasDefault: false,
        primaryKey: true,
        isUnique: false,
        uniqueName: "memories_id_unique",
        uniqueType: undefined,
        dataType: "string",
        columnType: "PgUUID",
        generated: undefined,
      },
      table: [Circular],
      getSQLType: [Function: getSQLType],
      mapFromDriverValue: [Function: mapFromDriverValue],
      mapToDriverValue: [Function: mapToDriverValue],
      shouldDisableInsert: [Function: shouldDisableInsert],
      getSQL: [Function],
    },
    type: PgText {
      name: "type",
      keyAsName: false,
      primary: false,
      notNull: true,
      default: undefined,
      defaultFn: undefined,
      onUpdateFn: undefined,
      hasDefault: false,
      isUnique: false,
      uniqueName: "memories_type_unique",
      uniqueType: undefined,
      dataType: "string",
      columnType: "PgText",
      enumValues: undefined,
      generated: undefined,
      generatedIdentity: undefined,
      config: {
        name: "type",
        keyAsName: false,
        notNull: true,
        default: undefined,
        hasDefault: false,
        primaryKey: false,
        isUnique: false,
        uniqueName: "memories_type_unique",
        uniqueType: undefined,
        dataType: "string",
        columnType: "PgText",
        generated: undefined,
        enumValues: undefined,
      },
      table: [Circular],
      getSQLType: [Function: getSQLType],
      mapFromDriverValue: [Function: mapFromDriverValue],
      mapToDriverValue: [Function: mapToDriverValue],
      shouldDisableInsert: [Function: shouldDisableInsert],
      getSQL: [Function],
    },
    createdAt: PgCustomColumn {
      name: "createdAt",
      keyAsName: false,
      primary: false,
      notNull: true,
      default: SQL {
        decoder: {
          mapFromDriverValue: [Function: mapFromDriverValue],
        },
        shouldInlineParams: false,
        queryChunks: [
          StringChunk {
            value: [ "now()" ],
            getSQL: [Function: getSQL],
          }
        ],
        append: [Function: append],
        toQuery: [Function: toQuery],
        buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
        mapInlineParam: [Function: mapInlineParam],
        getSQL: [Function: getSQL],
        as: [Function: as],
        mapWith: [Function: mapWith],
        inlineParams: [Function: inlineParams],
        if: [Function: if],
      },
      defaultFn: undefined,
      onUpdateFn: undefined,
      hasDefault: true,
      isUnique: false,
      uniqueName: "memories_createdAt_unique",
      uniqueType: undefined,
      dataType: "custom",
      columnType: "PgCustomColumn",
      enumValues: undefined,
      generated: undefined,
      generatedIdentity: undefined,
      config: {
        name: "createdAt",
        keyAsName: false,
        notNull: true,
        default: SQL {
          decoder: {
            mapFromDriverValue: [Function: mapFromDriverValue],
          },
          shouldInlineParams: false,
          queryChunks: [
            StringChunk {
              value: [ "now()" ],
              getSQL: [Function: getSQL],
            }
          ],
          append: [Function: append],
          toQuery: [Function: toQuery],
          buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
          mapInlineParam: [Function: mapInlineParam],
          getSQL: [Function: getSQL],
          as: [Function: as],
          mapWith: [Function: mapWith],
          inlineParams: [Function: inlineParams],
          if: [Function: if],
        },
        hasDefault: true,
        primaryKey: false,
        isUnique: false,
        uniqueName: "memories_createdAt_unique",
        uniqueType: undefined,
        dataType: "custom",
        columnType: "PgCustomColumn",
        generated: undefined,
        fieldConfig: undefined,
        customTypeParams: {
          dataType: [Function: dataType],
          toDriver: [Function: toDriver],
          fromDriver: [Function: fromDriver],
        },
      },
      table: [Circular],
      sqlName: "timestamptz",
      mapTo: [Function: toDriver],
      mapFrom: [Function: fromDriver],
      getSQLType: [Function: getSQLType],
      mapFromDriverValue: [Function: mapFromDriverValue],
      mapToDriverValue: [Function: mapToDriverValue],
      shouldDisableInsert: [Function: shouldDisableInsert],
      getSQL: [Function],
    },
    content: PgJsonb {
      name: "content",
      keyAsName: false,
      primary: false,
      notNull: true,
      default: undefined,
      defaultFn: undefined,
      onUpdateFn: undefined,
      hasDefault: false,
      isUnique: false,
      uniqueName: "memories_content_unique",
      uniqueType: undefined,
      dataType: "json",
      columnType: "PgJsonb",
      enumValues: undefined,
      generated: undefined,
      generatedIdentity: undefined,
      config: {
        name: "content",
        keyAsName: false,
        notNull: true,
        default: undefined,
        hasDefault: false,
        primaryKey: false,
        isUnique: false,
        uniqueName: "memories_content_unique",
        uniqueType: undefined,
        dataType: "json",
        columnType: "PgJsonb",
        generated: undefined,
      },
      table: [Circular],
      getSQLType: [Function: getSQLType],
      mapToDriverValue: [Function: mapToDriverValue],
      mapFromDriverValue: [Function: mapFromDriverValue],
      shouldDisableInsert: [Function: shouldDisableInsert],
      getSQL: [Function],
    },
    entityId: PgUUID {
      name: "entityId",
      keyAsName: false,
      primary: false,
      notNull: false,
      default: undefined,
      defaultFn: undefined,
      onUpdateFn: undefined,
      hasDefault: false,
      isUnique: false,
      uniqueName: "memories_entityId_unique",
      uniqueType: undefined,
      dataType: "string",
      columnType: "PgUUID",
      enumValues: undefined,
      generated: undefined,
      generatedIdentity: undefined,
      config: {
        name: "entityId",
        keyAsName: false,
        notNull: false,
        default: undefined,
        hasDefault: false,
        primaryKey: false,
        isUnique: false,
        uniqueName: "memories_entityId_unique",
        uniqueType: undefined,
        dataType: "string",
        columnType: "PgUUID",
        generated: undefined,
      },
      table: [Circular],
      getSQLType: [Function: getSQLType],
      mapFromDriverValue: [Function: mapFromDriverValue],
      mapToDriverValue: [Function: mapToDriverValue],
      shouldDisableInsert: [Function: shouldDisableInsert],
      getSQL: [Function],
    },
    agentId: PgUUID {
      name: "agentId",
      keyAsName: false,
      primary: false,
      notNull: false,
      default: undefined,
      defaultFn: undefined,
      onUpdateFn: undefined,
      hasDefault: false,
      isUnique: false,
      uniqueName: "memories_agentId_unique",
      uniqueType: undefined,
      dataType: "string",
      columnType: "PgUUID",
      enumValues: undefined,
      generated: undefined,
      generatedIdentity: undefined,
      config: {
        name: "agentId",
        keyAsName: false,
        notNull: false,
        default: undefined,
        hasDefault: false,
        primaryKey: false,
        isUnique: false,
        uniqueName: "memories_agentId_unique",
        uniqueType: undefined,
        dataType: "string",
        columnType: "PgUUID",
        generated: undefined,
      },
      table: [Circular],
      getSQLType: [Function: getSQLType],
      mapFromDriverValue: [Function: mapFromDriverValue],
      mapToDriverValue: [Function: mapToDriverValue],
      shouldDisableInsert: [Function: shouldDisableInsert],
      getSQL: [Function],
    },
    roomId: PgUUID {
      name: "roomId",
      keyAsName: false,
      primary: false,
      notNull: false,
      default: undefined,
      defaultFn: undefined,
      onUpdateFn: undefined,
      hasDefault: false,
      isUnique: false,
      uniqueName: "memories_roomId_unique",
      uniqueType: undefined,
      dataType: "string",
      columnType: "PgUUID",
      enumValues: undefined,
      generated: undefined,
      generatedIdentity: undefined,
      config: {
        name: "roomId",
        keyAsName: false,
        notNull: false,
        default: undefined,
        hasDefault: false,
        primaryKey: false,
        isUnique: false,
        uniqueName: "memories_roomId_unique",
        uniqueType: undefined,
        dataType: "string",
        columnType: "PgUUID",
        generated: undefined,
      },
      table: [Circular],
      getSQLType: [Function: getSQLType],
      mapFromDriverValue: [Function: mapFromDriverValue],
      mapToDriverValue: [Function: mapToDriverValue],
      shouldDisableInsert: [Function: shouldDisableInsert],
      getSQL: [Function],
    },
    unique: PgBoolean {
      name: "unique",
      keyAsName: false,
      primary: false,
      notNull: true,
      default: true,
      defaultFn: undefined,
      onUpdateFn: undefined,
      hasDefault: true,
      isUnique: false,
      uniqueName: "memories_unique_unique",
      uniqueType: undefined,
      dataType: "boolean",
      columnType: "PgBoolean",
      enumValues: undefined,
      generated: undefined,
      generatedIdentity: undefined,
      config: {
        name: "unique",
        keyAsName: false,
        notNull: true,
        default: true,
        hasDefault: true,
        primaryKey: false,
        isUnique: false,
        uniqueName: "memories_unique_unique",
        uniqueType: undefined,
        dataType: "boolean",
        columnType: "PgBoolean",
        generated: undefined,
      },
      table: [Circular],
      getSQLType: [Function: getSQLType],
      mapFromDriverValue: [Function: mapFromDriverValue],
      mapToDriverValue: [Function: mapToDriverValue],
      shouldDisableInsert: [Function: shouldDisableInsert],
      getSQL: [Function],
    },
    metadata: PgJsonb {
      name: "metadata",
      keyAsName: false,
      primary: false,
      notNull: true,
      default: {},
      defaultFn: undefined,
      onUpdateFn: undefined,
      hasDefault: true,
      isUnique: false,
      uniqueName: "memories_metadata_unique",
      uniqueType: undefined,
      dataType: "json",
      columnType: "PgJsonb",
      enumValues: undefined,
      generated: undefined,
      generatedIdentity: undefined,
      config: {
        name: "metadata",
        keyAsName: false,
        notNull: true,
        default: {},
        hasDefault: true,
        primaryKey: false,
        isUnique: false,
        uniqueName: "memories_metadata_unique",
        uniqueType: undefined,
        dataType: "json",
        columnType: "PgJsonb",
        generated: undefined,
      },
      table: [Circular],
      getSQLType: [Function: getSQLType],
      mapToDriverValue: [Function: mapToDriverValue],
      mapFromDriverValue: [Function: mapFromDriverValue],
      shouldDisableInsert: [Function: shouldDisableInsert],
      getSQL: [Function],
    },
    enableRLS: [Function: enableRLS],
    getSQL: [Function],
  }, PgTable {
    [Symbol(drizzle:Name)]: "participants",
    [Symbol(drizzle:OriginalName)]: "participants",
    [Symbol(drizzle:Schema)]: undefined,
    [Symbol(drizzle:Columns)]: {
      id: PgUUID {
        name: "id",
        keyAsName: false,
        primary: true,
        notNull: true,
        default: SQL {
          decoder: {
            mapFromDriverValue: [Function: mapFromDriverValue],
          },
          shouldInlineParams: false,
          queryChunks: [
            StringChunk {
              value: [ "gen_random_uuid()" ],
              getSQL: [Function: getSQL],
            }
          ],
          append: [Function: append],
          toQuery: [Function: toQuery],
          buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
          mapInlineParam: [Function: mapInlineParam],
          getSQL: [Function: getSQL],
          as: [Function: as],
          mapWith: [Function: mapWith],
          inlineParams: [Function: inlineParams],
          if: [Function: if],
        },
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: true,
        isUnique: false,
        uniqueName: "participants_id_unique",
        uniqueType: undefined,
        dataType: "string",
        columnType: "PgUUID",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "id",
          keyAsName: false,
          notNull: true,
          default: SQL {
            decoder: {
              mapFromDriverValue: [Function: mapFromDriverValue],
            },
            shouldInlineParams: false,
            queryChunks: [
              StringChunk {
                value: [ "gen_random_uuid()" ],
                getSQL: [Function: getSQL],
              }
            ],
            append: [Function: append],
            toQuery: [Function: toQuery],
            buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
            mapInlineParam: [Function: mapInlineParam],
            getSQL: [Function: getSQL],
            as: [Function: as],
            mapWith: [Function: mapWith],
            inlineParams: [Function: inlineParams],
            if: [Function: if],
          },
          hasDefault: true,
          primaryKey: true,
          isUnique: false,
          uniqueName: "participants_id_unique",
          uniqueType: undefined,
          dataType: "string",
          columnType: "PgUUID",
          generated: undefined,
        },
        table: [Circular],
        getSQLType: [Function: getSQLType],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      createdAt: PgCustomColumn {
        name: "createdAt",
        keyAsName: false,
        primary: false,
        notNull: true,
        default: SQL {
          decoder: {
            mapFromDriverValue: [Function: mapFromDriverValue],
          },
          shouldInlineParams: false,
          queryChunks: [
            StringChunk {
              value: [ "now()" ],
              getSQL: [Function: getSQL],
            }
          ],
          append: [Function: append],
          toQuery: [Function: toQuery],
          buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
          mapInlineParam: [Function: mapInlineParam],
          getSQL: [Function: getSQL],
          as: [Function: as],
          mapWith: [Function: mapWith],
          inlineParams: [Function: inlineParams],
          if: [Function: if],
        },
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: true,
        isUnique: false,
        uniqueName: "participants_createdAt_unique",
        uniqueType: undefined,
        dataType: "custom",
        columnType: "PgCustomColumn",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "createdAt",
          keyAsName: false,
          notNull: true,
          default: SQL {
            decoder: {
              mapFromDriverValue: [Function: mapFromDriverValue],
            },
            shouldInlineParams: false,
            queryChunks: [
              StringChunk {
                value: [ "now()" ],
                getSQL: [Function: getSQL],
              }
            ],
            append: [Function: append],
            toQuery: [Function: toQuery],
            buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
            mapInlineParam: [Function: mapInlineParam],
            getSQL: [Function: getSQL],
            as: [Function: as],
            mapWith: [Function: mapWith],
            inlineParams: [Function: inlineParams],
            if: [Function: if],
          },
          hasDefault: true,
          primaryKey: false,
          isUnique: false,
          uniqueName: "participants_createdAt_unique",
          uniqueType: undefined,
          dataType: "custom",
          columnType: "PgCustomColumn",
          generated: undefined,
          fieldConfig: undefined,
          customTypeParams: {
            dataType: [Function: dataType],
            toDriver: [Function: toDriver],
            fromDriver: [Function: fromDriver],
          },
        },
        table: [Circular],
        sqlName: "timestamptz",
        mapTo: [Function: toDriver],
        mapFrom: [Function: fromDriver],
        getSQLType: [Function: getSQLType],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      entityId: PgUUID {
        name: "entityId",
        keyAsName: false,
        primary: false,
        notNull: false,
        default: undefined,
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: false,
        isUnique: false,
        uniqueName: "participants_entityId_unique",
        uniqueType: undefined,
        dataType: "string",
        columnType: "PgUUID",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "entityId",
          keyAsName: false,
          notNull: false,
          default: undefined,
          hasDefault: false,
          primaryKey: false,
          isUnique: false,
          uniqueName: "participants_entityId_unique",
          uniqueType: undefined,
          dataType: "string",
          columnType: "PgUUID",
          generated: undefined,
        },
        table: [Circular],
        getSQLType: [Function: getSQLType],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      roomId: PgUUID {
        name: "roomId",
        keyAsName: false,
        primary: false,
        notNull: false,
        default: undefined,
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: false,
        isUnique: false,
        uniqueName: "participants_roomId_unique",
        uniqueType: undefined,
        dataType: "string",
        columnType: "PgUUID",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "roomId",
          keyAsName: false,
          notNull: false,
          default: undefined,
          hasDefault: false,
          primaryKey: false,
          isUnique: false,
          uniqueName: "participants_roomId_unique",
          uniqueType: undefined,
          dataType: "string",
          columnType: "PgUUID",
          generated: undefined,
        },
        table: [Circular],
        getSQLType: [Function: getSQLType],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      agentId: PgUUID {
        name: "agentId",
        keyAsName: false,
        primary: false,
        notNull: false,
        default: undefined,
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: false,
        isUnique: false,
        uniqueName: "participants_agentId_unique",
        uniqueType: undefined,
        dataType: "string",
        columnType: "PgUUID",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "agentId",
          keyAsName: false,
          notNull: false,
          default: undefined,
          hasDefault: false,
          primaryKey: false,
          isUnique: false,
          uniqueName: "participants_agentId_unique",
          uniqueType: undefined,
          dataType: "string",
          columnType: "PgUUID",
          generated: undefined,
        },
        table: [Circular],
        getSQLType: [Function: getSQLType],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      roomState: PgText {
        name: "roomState",
        keyAsName: false,
        primary: false,
        notNull: false,
        default: undefined,
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: false,
        isUnique: false,
        uniqueName: "participants_roomState_unique",
        uniqueType: undefined,
        dataType: "string",
        columnType: "PgText",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "roomState",
          keyAsName: false,
          notNull: false,
          default: undefined,
          hasDefault: false,
          primaryKey: false,
          isUnique: false,
          uniqueName: "participants_roomState_unique",
          uniqueType: undefined,
          dataType: "string",
          columnType: "PgText",
          generated: undefined,
          enumValues: undefined,
        },
        table: [Circular],
        getSQLType: [Function: getSQLType],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
    },
    [Symbol(drizzle:ExtraConfigColumns)]: {
      id: ExtraConfigColumn {
        name: "id",
        keyAsName: false,
        primary: true,
        notNull: true,
        default: SQL {
          decoder: {
            mapFromDriverValue: [Function: mapFromDriverValue],
          },
          shouldInlineParams: false,
          queryChunks: [
            StringChunk {
              value: [ "gen_random_uuid()" ],
              getSQL: [Function: getSQL],
            }
          ],
          append: [Function: append],
          toQuery: [Function: toQuery],
          buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
          mapInlineParam: [Function: mapInlineParam],
          getSQL: [Function: getSQL],
          as: [Function: as],
          mapWith: [Function: mapWith],
          inlineParams: [Function: inlineParams],
          if: [Function: if],
        },
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: true,
        isUnique: false,
        uniqueName: "participants_id_unique",
        uniqueType: undefined,
        dataType: "string",
        columnType: "PgUUID",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "id",
          keyAsName: false,
          notNull: true,
          default: SQL {
            decoder: {
              mapFromDriverValue: [Function: mapFromDriverValue],
            },
            shouldInlineParams: false,
            queryChunks: [
              StringChunk {
                value: [ "gen_random_uuid()" ],
                getSQL: [Function: getSQL],
              }
            ],
            append: [Function: append],
            toQuery: [Function: toQuery],
            buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
            mapInlineParam: [Function: mapInlineParam],
            getSQL: [Function: getSQL],
            as: [Function: as],
            mapWith: [Function: mapWith],
            inlineParams: [Function: inlineParams],
            if: [Function: if],
          },
          hasDefault: true,
          primaryKey: true,
          isUnique: false,
          uniqueName: "participants_id_unique",
          uniqueType: undefined,
          dataType: "string",
          columnType: "PgUUID",
          generated: undefined,
        },
        table: [Circular],
        indexConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        defaultConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        getSQLType: [Function: getSQLType],
        asc: [Function: asc],
        desc: [Function: desc],
        nullsFirst: [Function: nullsFirst],
        nullsLast: [Function: nullsLast],
        op: [Function: op],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      createdAt: ExtraConfigColumn {
        name: "createdAt",
        keyAsName: false,
        primary: false,
        notNull: true,
        default: SQL {
          decoder: {
            mapFromDriverValue: [Function: mapFromDriverValue],
          },
          shouldInlineParams: false,
          queryChunks: [
            StringChunk {
              value: [ "now()" ],
              getSQL: [Function: getSQL],
            }
          ],
          append: [Function: append],
          toQuery: [Function: toQuery],
          buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
          mapInlineParam: [Function: mapInlineParam],
          getSQL: [Function: getSQL],
          as: [Function: as],
          mapWith: [Function: mapWith],
          inlineParams: [Function: inlineParams],
          if: [Function: if],
        },
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: true,
        isUnique: false,
        uniqueName: "participants_createdAt_unique",
        uniqueType: undefined,
        dataType: "custom",
        columnType: "PgCustomColumn",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "createdAt",
          keyAsName: false,
          notNull: true,
          default: SQL {
            decoder: {
              mapFromDriverValue: [Function: mapFromDriverValue],
            },
            shouldInlineParams: false,
            queryChunks: [
              StringChunk {
                value: [ "now()" ],
                getSQL: [Function: getSQL],
              }
            ],
            append: [Function: append],
            toQuery: [Function: toQuery],
            buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
            mapInlineParam: [Function: mapInlineParam],
            getSQL: [Function: getSQL],
            as: [Function: as],
            mapWith: [Function: mapWith],
            inlineParams: [Function: inlineParams],
            if: [Function: if],
          },
          hasDefault: true,
          primaryKey: false,
          isUnique: false,
          uniqueName: "participants_createdAt_unique",
          uniqueType: undefined,
          dataType: "custom",
          columnType: "PgCustomColumn",
          generated: undefined,
          fieldConfig: undefined,
          customTypeParams: {
            dataType: [Function: dataType],
            toDriver: [Function: toDriver],
            fromDriver: [Function: fromDriver],
          },
        },
        table: [Circular],
        indexConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        defaultConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        getSQLType: [Function: getSQLType],
        asc: [Function: asc],
        desc: [Function: desc],
        nullsFirst: [Function: nullsFirst],
        nullsLast: [Function: nullsLast],
        op: [Function: op],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      entityId: ExtraConfigColumn {
        name: "entityId",
        keyAsName: false,
        primary: false,
        notNull: false,
        default: undefined,
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: false,
        isUnique: false,
        uniqueName: "participants_entityId_unique",
        uniqueType: undefined,
        dataType: "string",
        columnType: "PgUUID",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "entityId",
          keyAsName: false,
          notNull: false,
          default: undefined,
          hasDefault: false,
          primaryKey: false,
          isUnique: false,
          uniqueName: "participants_entityId_unique",
          uniqueType: undefined,
          dataType: "string",
          columnType: "PgUUID",
          generated: undefined,
        },
        table: [Circular],
        indexConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        defaultConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        getSQLType: [Function: getSQLType],
        asc: [Function: asc],
        desc: [Function: desc],
        nullsFirst: [Function: nullsFirst],
        nullsLast: [Function: nullsLast],
        op: [Function: op],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      roomId: ExtraConfigColumn {
        name: "roomId",
        keyAsName: false,
        primary: false,
        notNull: false,
        default: undefined,
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: false,
        isUnique: false,
        uniqueName: "participants_roomId_unique",
        uniqueType: undefined,
        dataType: "string",
        columnType: "PgUUID",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "roomId",
          keyAsName: false,
          notNull: false,
          default: undefined,
          hasDefault: false,
          primaryKey: false,
          isUnique: false,
          uniqueName: "participants_roomId_unique",
          uniqueType: undefined,
          dataType: "string",
          columnType: "PgUUID",
          generated: undefined,
        },
        table: [Circular],
        indexConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        defaultConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        getSQLType: [Function: getSQLType],
        asc: [Function: asc],
        desc: [Function: desc],
        nullsFirst: [Function: nullsFirst],
        nullsLast: [Function: nullsLast],
        op: [Function: op],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      agentId: ExtraConfigColumn {
        name: "agentId",
        keyAsName: false,
        primary: false,
        notNull: false,
        default: undefined,
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: false,
        isUnique: false,
        uniqueName: "participants_agentId_unique",
        uniqueType: undefined,
        dataType: "string",
        columnType: "PgUUID",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "agentId",
          keyAsName: false,
          notNull: false,
          default: undefined,
          hasDefault: false,
          primaryKey: false,
          isUnique: false,
          uniqueName: "participants_agentId_unique",
          uniqueType: undefined,
          dataType: "string",
          columnType: "PgUUID",
          generated: undefined,
        },
        table: [Circular],
        indexConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        defaultConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        getSQLType: [Function: getSQLType],
        asc: [Function: asc],
        desc: [Function: desc],
        nullsFirst: [Function: nullsFirst],
        nullsLast: [Function: nullsLast],
        op: [Function: op],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      roomState: ExtraConfigColumn {
        name: "roomState",
        keyAsName: false,
        primary: false,
        notNull: false,
        default: undefined,
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: false,
        isUnique: false,
        uniqueName: "participants_roomState_unique",
        uniqueType: undefined,
        dataType: "string",
        columnType: "PgText",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "roomState",
          keyAsName: false,
          notNull: false,
          default: undefined,
          hasDefault: false,
          primaryKey: false,
          isUnique: false,
          uniqueName: "participants_roomState_unique",
          uniqueType: undefined,
          dataType: "string",
          columnType: "PgText",
          generated: undefined,
          enumValues: undefined,
        },
        table: [Circular],
        indexConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        defaultConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        getSQLType: [Function: getSQLType],
        asc: [Function: asc],
        desc: [Function: desc],
        nullsFirst: [Function: nullsFirst],
        nullsLast: [Function: nullsLast],
        op: [Function: op],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
    },
    [Symbol(drizzle:BaseName)]: "participants",
    [Symbol(drizzle:IsAlias)]: false,
    [Symbol(drizzle:IsDrizzleTable)]: true,
    [Symbol(drizzle:ExtraConfigBuilder)]: [Function],
    [Symbol(drizzle:PgInlineForeignKeys)]: [
      ForeignKey {
        reference: [Function],
        onUpdate: "no action",
        onDelete: "cascade",
        table: [Circular],
        getName: [Function: getName],
      }, ForeignKey {
        reference: [Function],
        onUpdate: "no action",
        onDelete: "cascade",
        table: [Circular],
        getName: [Function: getName],
      }, ForeignKey {
        reference: [Function],
        onUpdate: "no action",
        onDelete: "cascade",
        table: [Circular],
        getName: [Function: getName],
      }
    ],
    [Symbol(drizzle:EnableRLS)]: false,
    id: PgUUID {
      name: "id",
      keyAsName: false,
      primary: true,
      notNull: true,
      default: SQL {
        decoder: {
          mapFromDriverValue: [Function: mapFromDriverValue],
        },
        shouldInlineParams: false,
        queryChunks: [
          StringChunk {
            value: [ "gen_random_uuid()" ],
            getSQL: [Function: getSQL],
          }
        ],
        append: [Function: append],
        toQuery: [Function: toQuery],
        buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
        mapInlineParam: [Function: mapInlineParam],
        getSQL: [Function: getSQL],
        as: [Function: as],
        mapWith: [Function: mapWith],
        inlineParams: [Function: inlineParams],
        if: [Function: if],
      },
      defaultFn: undefined,
      onUpdateFn: undefined,
      hasDefault: true,
      isUnique: false,
      uniqueName: "participants_id_unique",
      uniqueType: undefined,
      dataType: "string",
      columnType: "PgUUID",
      enumValues: undefined,
      generated: undefined,
      generatedIdentity: undefined,
      config: {
        name: "id",
        keyAsName: false,
        notNull: true,
        default: SQL {
          decoder: {
            mapFromDriverValue: [Function: mapFromDriverValue],
          },
          shouldInlineParams: false,
          queryChunks: [
            StringChunk {
              value: [ "gen_random_uuid()" ],
              getSQL: [Function: getSQL],
            }
          ],
          append: [Function: append],
          toQuery: [Function: toQuery],
          buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
          mapInlineParam: [Function: mapInlineParam],
          getSQL: [Function: getSQL],
          as: [Function: as],
          mapWith: [Function: mapWith],
          inlineParams: [Function: inlineParams],
          if: [Function: if],
        },
        hasDefault: true,
        primaryKey: true,
        isUnique: false,
        uniqueName: "participants_id_unique",
        uniqueType: undefined,
        dataType: "string",
        columnType: "PgUUID",
        generated: undefined,
      },
      table: [Circular],
      getSQLType: [Function: getSQLType],
      mapFromDriverValue: [Function: mapFromDriverValue],
      mapToDriverValue: [Function: mapToDriverValue],
      shouldDisableInsert: [Function: shouldDisableInsert],
      getSQL: [Function],
    },
    createdAt: PgCustomColumn {
      name: "createdAt",
      keyAsName: false,
      primary: false,
      notNull: true,
      default: SQL {
        decoder: {
          mapFromDriverValue: [Function: mapFromDriverValue],
        },
        shouldInlineParams: false,
        queryChunks: [
          StringChunk {
            value: [ "now()" ],
            getSQL: [Function: getSQL],
          }
        ],
        append: [Function: append],
        toQuery: [Function: toQuery],
        buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
        mapInlineParam: [Function: mapInlineParam],
        getSQL: [Function: getSQL],
        as: [Function: as],
        mapWith: [Function: mapWith],
        inlineParams: [Function: inlineParams],
        if: [Function: if],
      },
      defaultFn: undefined,
      onUpdateFn: undefined,
      hasDefault: true,
      isUnique: false,
      uniqueName: "participants_createdAt_unique",
      uniqueType: undefined,
      dataType: "custom",
      columnType: "PgCustomColumn",
      enumValues: undefined,
      generated: undefined,
      generatedIdentity: undefined,
      config: {
        name: "createdAt",
        keyAsName: false,
        notNull: true,
        default: SQL {
          decoder: {
            mapFromDriverValue: [Function: mapFromDriverValue],
          },
          shouldInlineParams: false,
          queryChunks: [
            StringChunk {
              value: [ "now()" ],
              getSQL: [Function: getSQL],
            }
          ],
          append: [Function: append],
          toQuery: [Function: toQuery],
          buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
          mapInlineParam: [Function: mapInlineParam],
          getSQL: [Function: getSQL],
          as: [Function: as],
          mapWith: [Function: mapWith],
          inlineParams: [Function: inlineParams],
          if: [Function: if],
        },
        hasDefault: true,
        primaryKey: false,
        isUnique: false,
        uniqueName: "participants_createdAt_unique",
        uniqueType: undefined,
        dataType: "custom",
        columnType: "PgCustomColumn",
        generated: undefined,
        fieldConfig: undefined,
        customTypeParams: {
          dataType: [Function: dataType],
          toDriver: [Function: toDriver],
          fromDriver: [Function: fromDriver],
        },
      },
      table: [Circular],
      sqlName: "timestamptz",
      mapTo: [Function: toDriver],
      mapFrom: [Function: fromDriver],
      getSQLType: [Function: getSQLType],
      mapFromDriverValue: [Function: mapFromDriverValue],
      mapToDriverValue: [Function: mapToDriverValue],
      shouldDisableInsert: [Function: shouldDisableInsert],
      getSQL: [Function],
    },
    entityId: PgUUID {
      name: "entityId",
      keyAsName: false,
      primary: false,
      notNull: false,
      default: undefined,
      defaultFn: undefined,
      onUpdateFn: undefined,
      hasDefault: false,
      isUnique: false,
      uniqueName: "participants_entityId_unique",
      uniqueType: undefined,
      dataType: "string",
      columnType: "PgUUID",
      enumValues: undefined,
      generated: undefined,
      generatedIdentity: undefined,
      config: {
        name: "entityId",
        keyAsName: false,
        notNull: false,
        default: undefined,
        hasDefault: false,
        primaryKey: false,
        isUnique: false,
        uniqueName: "participants_entityId_unique",
        uniqueType: undefined,
        dataType: "string",
        columnType: "PgUUID",
        generated: undefined,
      },
      table: [Circular],
      getSQLType: [Function: getSQLType],
      mapFromDriverValue: [Function: mapFromDriverValue],
      mapToDriverValue: [Function: mapToDriverValue],
      shouldDisableInsert: [Function: shouldDisableInsert],
      getSQL: [Function],
    },
    roomId: PgUUID {
      name: "roomId",
      keyAsName: false,
      primary: false,
      notNull: false,
      default: undefined,
      defaultFn: undefined,
      onUpdateFn: undefined,
      hasDefault: false,
      isUnique: false,
      uniqueName: "participants_roomId_unique",
      uniqueType: undefined,
      dataType: "string",
      columnType: "PgUUID",
      enumValues: undefined,
      generated: undefined,
      generatedIdentity: undefined,
      config: {
        name: "roomId",
        keyAsName: false,
        notNull: false,
        default: undefined,
        hasDefault: false,
        primaryKey: false,
        isUnique: false,
        uniqueName: "participants_roomId_unique",
        uniqueType: undefined,
        dataType: "string",
        columnType: "PgUUID",
        generated: undefined,
      },
      table: [Circular],
      getSQLType: [Function: getSQLType],
      mapFromDriverValue: [Function: mapFromDriverValue],
      mapToDriverValue: [Function: mapToDriverValue],
      shouldDisableInsert: [Function: shouldDisableInsert],
      getSQL: [Function],
    },
    agentId: PgUUID {
      name: "agentId",
      keyAsName: false,
      primary: false,
      notNull: false,
      default: undefined,
      defaultFn: undefined,
      onUpdateFn: undefined,
      hasDefault: false,
      isUnique: false,
      uniqueName: "participants_agentId_unique",
      uniqueType: undefined,
      dataType: "string",
      columnType: "PgUUID",
      enumValues: undefined,
      generated: undefined,
      generatedIdentity: undefined,
      config: {
        name: "agentId",
        keyAsName: false,
        notNull: false,
        default: undefined,
        hasDefault: false,
        primaryKey: false,
        isUnique: false,
        uniqueName: "participants_agentId_unique",
        uniqueType: undefined,
        dataType: "string",
        columnType: "PgUUID",
        generated: undefined,
      },
      table: [Circular],
      getSQLType: [Function: getSQLType],
      mapFromDriverValue: [Function: mapFromDriverValue],
      mapToDriverValue: [Function: mapToDriverValue],
      shouldDisableInsert: [Function: shouldDisableInsert],
      getSQL: [Function],
    },
    roomState: PgText {
      name: "roomState",
      keyAsName: false,
      primary: false,
      notNull: false,
      default: undefined,
      defaultFn: undefined,
      onUpdateFn: undefined,
      hasDefault: false,
      isUnique: false,
      uniqueName: "participants_roomState_unique",
      uniqueType: undefined,
      dataType: "string",
      columnType: "PgText",
      enumValues: undefined,
      generated: undefined,
      generatedIdentity: undefined,
      config: {
        name: "roomState",
        keyAsName: false,
        notNull: false,
        default: undefined,
        hasDefault: false,
        primaryKey: false,
        isUnique: false,
        uniqueName: "participants_roomState_unique",
        uniqueType: undefined,
        dataType: "string",
        columnType: "PgText",
        generated: undefined,
        enumValues: undefined,
      },
      table: [Circular],
      getSQLType: [Function: getSQLType],
      mapFromDriverValue: [Function: mapFromDriverValue],
      mapToDriverValue: [Function: mapToDriverValue],
      shouldDisableInsert: [Function: shouldDisableInsert],
      getSQL: [Function],
    },
    enableRLS: [Function: enableRLS],
    getSQL: [Function],
  }, PgTable {
    [Symbol(drizzle:Name)]: "relationships",
    [Symbol(drizzle:OriginalName)]: "relationships",
    [Symbol(drizzle:Schema)]: undefined,
    [Symbol(drizzle:Columns)]: {
      id: PgUUID {
        name: "id",
        keyAsName: false,
        primary: true,
        notNull: true,
        default: SQL {
          decoder: {
            mapFromDriverValue: [Function: mapFromDriverValue],
          },
          shouldInlineParams: false,
          queryChunks: [
            StringChunk {
              value: [ "gen_random_uuid()" ],
              getSQL: [Function: getSQL],
            }
          ],
          append: [Function: append],
          toQuery: [Function: toQuery],
          buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
          mapInlineParam: [Function: mapInlineParam],
          getSQL: [Function: getSQL],
          as: [Function: as],
          mapWith: [Function: mapWith],
          inlineParams: [Function: inlineParams],
          if: [Function: if],
        },
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: true,
        isUnique: false,
        uniqueName: "relationships_id_unique",
        uniqueType: undefined,
        dataType: "string",
        columnType: "PgUUID",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "id",
          keyAsName: false,
          notNull: true,
          default: SQL {
            decoder: {
              mapFromDriverValue: [Function: mapFromDriverValue],
            },
            shouldInlineParams: false,
            queryChunks: [
              StringChunk {
                value: [ "gen_random_uuid()" ],
                getSQL: [Function: getSQL],
              }
            ],
            append: [Function: append],
            toQuery: [Function: toQuery],
            buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
            mapInlineParam: [Function: mapInlineParam],
            getSQL: [Function: getSQL],
            as: [Function: as],
            mapWith: [Function: mapWith],
            inlineParams: [Function: inlineParams],
            if: [Function: if],
          },
          hasDefault: true,
          primaryKey: true,
          isUnique: false,
          uniqueName: "relationships_id_unique",
          uniqueType: undefined,
          dataType: "string",
          columnType: "PgUUID",
          generated: undefined,
        },
        table: [Circular],
        getSQLType: [Function: getSQLType],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      createdAt: PgCustomColumn {
        name: "createdAt",
        keyAsName: false,
        primary: false,
        notNull: true,
        default: SQL {
          decoder: {
            mapFromDriverValue: [Function: mapFromDriverValue],
          },
          shouldInlineParams: false,
          queryChunks: [
            StringChunk {
              value: [ "now()" ],
              getSQL: [Function: getSQL],
            }
          ],
          append: [Function: append],
          toQuery: [Function: toQuery],
          buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
          mapInlineParam: [Function: mapInlineParam],
          getSQL: [Function: getSQL],
          as: [Function: as],
          mapWith: [Function: mapWith],
          inlineParams: [Function: inlineParams],
          if: [Function: if],
        },
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: true,
        isUnique: false,
        uniqueName: "relationships_createdAt_unique",
        uniqueType: undefined,
        dataType: "custom",
        columnType: "PgCustomColumn",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "createdAt",
          keyAsName: false,
          notNull: true,
          default: SQL {
            decoder: {
              mapFromDriverValue: [Function: mapFromDriverValue],
            },
            shouldInlineParams: false,
            queryChunks: [
              StringChunk {
                value: [ "now()" ],
                getSQL: [Function: getSQL],
              }
            ],
            append: [Function: append],
            toQuery: [Function: toQuery],
            buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
            mapInlineParam: [Function: mapInlineParam],
            getSQL: [Function: getSQL],
            as: [Function: as],
            mapWith: [Function: mapWith],
            inlineParams: [Function: inlineParams],
            if: [Function: if],
          },
          hasDefault: true,
          primaryKey: false,
          isUnique: false,
          uniqueName: "relationships_createdAt_unique",
          uniqueType: undefined,
          dataType: "custom",
          columnType: "PgCustomColumn",
          generated: undefined,
          fieldConfig: undefined,
          customTypeParams: {
            dataType: [Function: dataType],
            toDriver: [Function: toDriver],
            fromDriver: [Function: fromDriver],
          },
        },
        table: [Circular],
        sqlName: "timestamptz",
        mapTo: [Function: toDriver],
        mapFrom: [Function: fromDriver],
        getSQLType: [Function: getSQLType],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      sourceEntityId: PgUUID {
        name: "sourceEntityId",
        keyAsName: false,
        primary: false,
        notNull: true,
        default: undefined,
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: false,
        isUnique: false,
        uniqueName: "relationships_sourceEntityId_unique",
        uniqueType: undefined,
        dataType: "string",
        columnType: "PgUUID",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "sourceEntityId",
          keyAsName: false,
          notNull: true,
          default: undefined,
          hasDefault: false,
          primaryKey: false,
          isUnique: false,
          uniqueName: "relationships_sourceEntityId_unique",
          uniqueType: undefined,
          dataType: "string",
          columnType: "PgUUID",
          generated: undefined,
        },
        table: [Circular],
        getSQLType: [Function: getSQLType],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      targetEntityId: PgUUID {
        name: "targetEntityId",
        keyAsName: false,
        primary: false,
        notNull: true,
        default: undefined,
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: false,
        isUnique: false,
        uniqueName: "relationships_targetEntityId_unique",
        uniqueType: undefined,
        dataType: "string",
        columnType: "PgUUID",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "targetEntityId",
          keyAsName: false,
          notNull: true,
          default: undefined,
          hasDefault: false,
          primaryKey: false,
          isUnique: false,
          uniqueName: "relationships_targetEntityId_unique",
          uniqueType: undefined,
          dataType: "string",
          columnType: "PgUUID",
          generated: undefined,
        },
        table: [Circular],
        getSQLType: [Function: getSQLType],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      agentId: PgUUID {
        name: "agentId",
        keyAsName: false,
        primary: false,
        notNull: true,
        default: undefined,
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: false,
        isUnique: false,
        uniqueName: "relationships_agentId_unique",
        uniqueType: undefined,
        dataType: "string",
        columnType: "PgUUID",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "agentId",
          keyAsName: false,
          notNull: true,
          default: undefined,
          hasDefault: false,
          primaryKey: false,
          isUnique: false,
          uniqueName: "relationships_agentId_unique",
          uniqueType: undefined,
          dataType: "string",
          columnType: "PgUUID",
          generated: undefined,
        },
        table: [Circular],
        getSQLType: [Function: getSQLType],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      tags: PgArray {
        name: "tags",
        keyAsName: false,
        primary: false,
        notNull: false,
        default: undefined,
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: false,
        isUnique: false,
        uniqueName: "relationships_tags_unique",
        uniqueType: undefined,
        dataType: "array",
        columnType: "PgArray",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "tags",
          keyAsName: false,
          notNull: false,
          default: undefined,
          hasDefault: false,
          primaryKey: false,
          isUnique: false,
          uniqueName: "relationships_tags_unique",
          uniqueType: undefined,
          dataType: "array",
          columnType: "PgArray",
          generated: undefined,
          baseBuilder: PgTextBuilder {
            config: {
              name: "tags",
              keyAsName: false,
              notNull: false,
              default: undefined,
              hasDefault: false,
              primaryKey: false,
              isUnique: false,
              uniqueName: "relationships_tags_unique",
              uniqueType: undefined,
              dataType: "string",
              columnType: "PgText",
              generated: undefined,
              enumValues: undefined,
            },
            $default: [Function: $defaultFn],
            $onUpdate: [Function: $onUpdateFn],
            foreignKeyConfigs: [],
            build: [Function: build],
            array: [Function: array],
            references: [Function: references],
            unique: [Function: unique],
            generatedAlwaysAs: [Function: generatedAlwaysAs],
            buildForeignKeys: [Function: buildForeignKeys],
            buildExtraConfigColumn: [Function: buildExtraConfigColumn],
            $type: [Function: $type],
            notNull: [Function: notNull],
            default: [Function: default],
            $defaultFn: [Function: $defaultFn],
            $onUpdateFn: [Function: $onUpdateFn],
            primaryKey: [Function: primaryKey],
            setName: [Function: setName],
          },
          size: undefined,
        },
        table: [Circular],
        size: undefined,
        baseColumn: PgText {
          name: "tags",
          keyAsName: false,
          primary: false,
          notNull: false,
          default: undefined,
          defaultFn: undefined,
          onUpdateFn: undefined,
          hasDefault: false,
          isUnique: false,
          uniqueName: "relationships_tags_unique",
          uniqueType: undefined,
          dataType: "string",
          columnType: "PgText",
          enumValues: undefined,
          generated: undefined,
          generatedIdentity: undefined,
          config: {
            name: "tags",
            keyAsName: false,
            notNull: false,
            default: undefined,
            hasDefault: false,
            primaryKey: false,
            isUnique: false,
            uniqueName: "relationships_tags_unique",
            uniqueType: undefined,
            dataType: "string",
            columnType: "PgText",
            generated: undefined,
            enumValues: undefined,
          },
          table: [Circular],
          getSQLType: [Function: getSQLType],
          mapFromDriverValue: [Function: mapFromDriverValue],
          mapToDriverValue: [Function: mapToDriverValue],
          shouldDisableInsert: [Function: shouldDisableInsert],
          getSQL: [Function],
        },
        range: undefined,
        getSQLType: [Function: getSQLType],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      metadata: PgJsonb {
        name: "metadata",
        keyAsName: false,
        primary: false,
        notNull: false,
        default: undefined,
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: false,
        isUnique: false,
        uniqueName: "relationships_metadata_unique",
        uniqueType: undefined,
        dataType: "json",
        columnType: "PgJsonb",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "metadata",
          keyAsName: false,
          notNull: false,
          default: undefined,
          hasDefault: false,
          primaryKey: false,
          isUnique: false,
          uniqueName: "relationships_metadata_unique",
          uniqueType: undefined,
          dataType: "json",
          columnType: "PgJsonb",
          generated: undefined,
        },
        table: [Circular],
        getSQLType: [Function: getSQLType],
        mapToDriverValue: [Function: mapToDriverValue],
        mapFromDriverValue: [Function: mapFromDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
    },
    [Symbol(drizzle:ExtraConfigColumns)]: {
      id: ExtraConfigColumn {
        name: "id",
        keyAsName: false,
        primary: true,
        notNull: true,
        default: SQL {
          decoder: {
            mapFromDriverValue: [Function: mapFromDriverValue],
          },
          shouldInlineParams: false,
          queryChunks: [
            StringChunk {
              value: [ "gen_random_uuid()" ],
              getSQL: [Function: getSQL],
            }
          ],
          append: [Function: append],
          toQuery: [Function: toQuery],
          buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
          mapInlineParam: [Function: mapInlineParam],
          getSQL: [Function: getSQL],
          as: [Function: as],
          mapWith: [Function: mapWith],
          inlineParams: [Function: inlineParams],
          if: [Function: if],
        },
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: true,
        isUnique: false,
        uniqueName: "relationships_id_unique",
        uniqueType: undefined,
        dataType: "string",
        columnType: "PgUUID",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "id",
          keyAsName: false,
          notNull: true,
          default: SQL {
            decoder: {
              mapFromDriverValue: [Function: mapFromDriverValue],
            },
            shouldInlineParams: false,
            queryChunks: [
              StringChunk {
                value: [ "gen_random_uuid()" ],
                getSQL: [Function: getSQL],
              }
            ],
            append: [Function: append],
            toQuery: [Function: toQuery],
            buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
            mapInlineParam: [Function: mapInlineParam],
            getSQL: [Function: getSQL],
            as: [Function: as],
            mapWith: [Function: mapWith],
            inlineParams: [Function: inlineParams],
            if: [Function: if],
          },
          hasDefault: true,
          primaryKey: true,
          isUnique: false,
          uniqueName: "relationships_id_unique",
          uniqueType: undefined,
          dataType: "string",
          columnType: "PgUUID",
          generated: undefined,
        },
        table: [Circular],
        indexConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        defaultConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        getSQLType: [Function: getSQLType],
        asc: [Function: asc],
        desc: [Function: desc],
        nullsFirst: [Function: nullsFirst],
        nullsLast: [Function: nullsLast],
        op: [Function: op],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      createdAt: ExtraConfigColumn {
        name: "createdAt",
        keyAsName: false,
        primary: false,
        notNull: true,
        default: SQL {
          decoder: {
            mapFromDriverValue: [Function: mapFromDriverValue],
          },
          shouldInlineParams: false,
          queryChunks: [
            StringChunk {
              value: [ "now()" ],
              getSQL: [Function: getSQL],
            }
          ],
          append: [Function: append],
          toQuery: [Function: toQuery],
          buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
          mapInlineParam: [Function: mapInlineParam],
          getSQL: [Function: getSQL],
          as: [Function: as],
          mapWith: [Function: mapWith],
          inlineParams: [Function: inlineParams],
          if: [Function: if],
        },
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: true,
        isUnique: false,
        uniqueName: "relationships_createdAt_unique",
        uniqueType: undefined,
        dataType: "custom",
        columnType: "PgCustomColumn",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "createdAt",
          keyAsName: false,
          notNull: true,
          default: SQL {
            decoder: {
              mapFromDriverValue: [Function: mapFromDriverValue],
            },
            shouldInlineParams: false,
            queryChunks: [
              StringChunk {
                value: [ "now()" ],
                getSQL: [Function: getSQL],
              }
            ],
            append: [Function: append],
            toQuery: [Function: toQuery],
            buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
            mapInlineParam: [Function: mapInlineParam],
            getSQL: [Function: getSQL],
            as: [Function: as],
            mapWith: [Function: mapWith],
            inlineParams: [Function: inlineParams],
            if: [Function: if],
          },
          hasDefault: true,
          primaryKey: false,
          isUnique: false,
          uniqueName: "relationships_createdAt_unique",
          uniqueType: undefined,
          dataType: "custom",
          columnType: "PgCustomColumn",
          generated: undefined,
          fieldConfig: undefined,
          customTypeParams: {
            dataType: [Function: dataType],
            toDriver: [Function: toDriver],
            fromDriver: [Function: fromDriver],
          },
        },
        table: [Circular],
        indexConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        defaultConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        getSQLType: [Function: getSQLType],
        asc: [Function: asc],
        desc: [Function: desc],
        nullsFirst: [Function: nullsFirst],
        nullsLast: [Function: nullsLast],
        op: [Function: op],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      sourceEntityId: ExtraConfigColumn {
        name: "sourceEntityId",
        keyAsName: false,
        primary: false,
        notNull: true,
        default: undefined,
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: false,
        isUnique: false,
        uniqueName: "relationships_sourceEntityId_unique",
        uniqueType: undefined,
        dataType: "string",
        columnType: "PgUUID",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "sourceEntityId",
          keyAsName: false,
          notNull: true,
          default: undefined,
          hasDefault: false,
          primaryKey: false,
          isUnique: false,
          uniqueName: "relationships_sourceEntityId_unique",
          uniqueType: undefined,
          dataType: "string",
          columnType: "PgUUID",
          generated: undefined,
        },
        table: [Circular],
        indexConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        defaultConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        getSQLType: [Function: getSQLType],
        asc: [Function: asc],
        desc: [Function: desc],
        nullsFirst: [Function: nullsFirst],
        nullsLast: [Function: nullsLast],
        op: [Function: op],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      targetEntityId: ExtraConfigColumn {
        name: "targetEntityId",
        keyAsName: false,
        primary: false,
        notNull: true,
        default: undefined,
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: false,
        isUnique: false,
        uniqueName: "relationships_targetEntityId_unique",
        uniqueType: undefined,
        dataType: "string",
        columnType: "PgUUID",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "targetEntityId",
          keyAsName: false,
          notNull: true,
          default: undefined,
          hasDefault: false,
          primaryKey: false,
          isUnique: false,
          uniqueName: "relationships_targetEntityId_unique",
          uniqueType: undefined,
          dataType: "string",
          columnType: "PgUUID",
          generated: undefined,
        },
        table: [Circular],
        indexConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        defaultConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        getSQLType: [Function: getSQLType],
        asc: [Function: asc],
        desc: [Function: desc],
        nullsFirst: [Function: nullsFirst],
        nullsLast: [Function: nullsLast],
        op: [Function: op],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      agentId: ExtraConfigColumn {
        name: "agentId",
        keyAsName: false,
        primary: false,
        notNull: true,
        default: undefined,
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: false,
        isUnique: false,
        uniqueName: "relationships_agentId_unique",
        uniqueType: undefined,
        dataType: "string",
        columnType: "PgUUID",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "agentId",
          keyAsName: false,
          notNull: true,
          default: undefined,
          hasDefault: false,
          primaryKey: false,
          isUnique: false,
          uniqueName: "relationships_agentId_unique",
          uniqueType: undefined,
          dataType: "string",
          columnType: "PgUUID",
          generated: undefined,
        },
        table: [Circular],
        indexConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        defaultConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        getSQLType: [Function: getSQLType],
        asc: [Function: asc],
        desc: [Function: desc],
        nullsFirst: [Function: nullsFirst],
        nullsLast: [Function: nullsLast],
        op: [Function: op],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      tags: ExtraConfigColumn {
        name: "tags",
        keyAsName: false,
        primary: false,
        notNull: false,
        default: undefined,
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: false,
        isUnique: false,
        uniqueName: "relationships_tags_unique",
        uniqueType: undefined,
        dataType: "array",
        columnType: "PgArray",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "tags",
          keyAsName: false,
          notNull: false,
          default: undefined,
          hasDefault: false,
          primaryKey: false,
          isUnique: false,
          uniqueName: "relationships_tags_unique",
          uniqueType: undefined,
          dataType: "array",
          columnType: "PgArray",
          generated: undefined,
          baseBuilder: PgTextBuilder {
            config: {
              name: "tags",
              keyAsName: false,
              notNull: false,
              default: undefined,
              hasDefault: false,
              primaryKey: false,
              isUnique: false,
              uniqueName: "relationships_tags_unique",
              uniqueType: undefined,
              dataType: "string",
              columnType: "PgText",
              generated: undefined,
              enumValues: undefined,
            },
            $default: [Function: $defaultFn],
            $onUpdate: [Function: $onUpdateFn],
            foreignKeyConfigs: [],
            build: [Function: build],
            array: [Function: array],
            references: [Function: references],
            unique: [Function: unique],
            generatedAlwaysAs: [Function: generatedAlwaysAs],
            buildForeignKeys: [Function: buildForeignKeys],
            buildExtraConfigColumn: [Function: buildExtraConfigColumn],
            $type: [Function: $type],
            notNull: [Function: notNull],
            default: [Function: default],
            $defaultFn: [Function: $defaultFn],
            $onUpdateFn: [Function: $onUpdateFn],
            primaryKey: [Function: primaryKey],
            setName: [Function: setName],
          },
          size: undefined,
        },
        table: [Circular],
        indexConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        defaultConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        getSQLType: [Function: getSQLType],
        asc: [Function: asc],
        desc: [Function: desc],
        nullsFirst: [Function: nullsFirst],
        nullsLast: [Function: nullsLast],
        op: [Function: op],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      metadata: ExtraConfigColumn {
        name: "metadata",
        keyAsName: false,
        primary: false,
        notNull: false,
        default: undefined,
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: false,
        isUnique: false,
        uniqueName: "relationships_metadata_unique",
        uniqueType: undefined,
        dataType: "json",
        columnType: "PgJsonb",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "metadata",
          keyAsName: false,
          notNull: false,
          default: undefined,
          hasDefault: false,
          primaryKey: false,
          isUnique: false,
          uniqueName: "relationships_metadata_unique",
          uniqueType: undefined,
          dataType: "json",
          columnType: "PgJsonb",
          generated: undefined,
        },
        table: [Circular],
        indexConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        defaultConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        getSQLType: [Function: getSQLType],
        asc: [Function: asc],
        desc: [Function: desc],
        nullsFirst: [Function: nullsFirst],
        nullsLast: [Function: nullsLast],
        op: [Function: op],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
    },
    [Symbol(drizzle:BaseName)]: "relationships",
    [Symbol(drizzle:IsAlias)]: false,
    [Symbol(drizzle:IsDrizzleTable)]: true,
    [Symbol(drizzle:ExtraConfigBuilder)]: [Function],
    [Symbol(drizzle:PgInlineForeignKeys)]: [
      ForeignKey {
        reference: [Function],
        onUpdate: "no action",
        onDelete: "cascade",
        table: [Circular],
        getName: [Function: getName],
      }, ForeignKey {
        reference: [Function],
        onUpdate: "no action",
        onDelete: "cascade",
        table: [Circular],
        getName: [Function: getName],
      }, ForeignKey {
        reference: [Function],
        onUpdate: "no action",
        onDelete: "cascade",
        table: [Circular],
        getName: [Function: getName],
      }
    ],
    [Symbol(drizzle:EnableRLS)]: false,
    id: PgUUID {
      name: "id",
      keyAsName: false,
      primary: true,
      notNull: true,
      default: SQL {
        decoder: {
          mapFromDriverValue: [Function: mapFromDriverValue],
        },
        shouldInlineParams: false,
        queryChunks: [
          StringChunk {
            value: [ "gen_random_uuid()" ],
            getSQL: [Function: getSQL],
          }
        ],
        append: [Function: append],
        toQuery: [Function: toQuery],
        buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
        mapInlineParam: [Function: mapInlineParam],
        getSQL: [Function: getSQL],
        as: [Function: as],
        mapWith: [Function: mapWith],
        inlineParams: [Function: inlineParams],
        if: [Function: if],
      },
      defaultFn: undefined,
      onUpdateFn: undefined,
      hasDefault: true,
      isUnique: false,
      uniqueName: "relationships_id_unique",
      uniqueType: undefined,
      dataType: "string",
      columnType: "PgUUID",
      enumValues: undefined,
      generated: undefined,
      generatedIdentity: undefined,
      config: {
        name: "id",
        keyAsName: false,
        notNull: true,
        default: SQL {
          decoder: {
            mapFromDriverValue: [Function: mapFromDriverValue],
          },
          shouldInlineParams: false,
          queryChunks: [
            StringChunk {
              value: [ "gen_random_uuid()" ],
              getSQL: [Function: getSQL],
            }
          ],
          append: [Function: append],
          toQuery: [Function: toQuery],
          buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
          mapInlineParam: [Function: mapInlineParam],
          getSQL: [Function: getSQL],
          as: [Function: as],
          mapWith: [Function: mapWith],
          inlineParams: [Function: inlineParams],
          if: [Function: if],
        },
        hasDefault: true,
        primaryKey: true,
        isUnique: false,
        uniqueName: "relationships_id_unique",
        uniqueType: undefined,
        dataType: "string",
        columnType: "PgUUID",
        generated: undefined,
      },
      table: [Circular],
      getSQLType: [Function: getSQLType],
      mapFromDriverValue: [Function: mapFromDriverValue],
      mapToDriverValue: [Function: mapToDriverValue],
      shouldDisableInsert: [Function: shouldDisableInsert],
      getSQL: [Function],
    },
    createdAt: PgCustomColumn {
      name: "createdAt",
      keyAsName: false,
      primary: false,
      notNull: true,
      default: SQL {
        decoder: {
          mapFromDriverValue: [Function: mapFromDriverValue],
        },
        shouldInlineParams: false,
        queryChunks: [
          StringChunk {
            value: [ "now()" ],
            getSQL: [Function: getSQL],
          }
        ],
        append: [Function: append],
        toQuery: [Function: toQuery],
        buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
        mapInlineParam: [Function: mapInlineParam],
        getSQL: [Function: getSQL],
        as: [Function: as],
        mapWith: [Function: mapWith],
        inlineParams: [Function: inlineParams],
        if: [Function: if],
      },
      defaultFn: undefined,
      onUpdateFn: undefined,
      hasDefault: true,
      isUnique: false,
      uniqueName: "relationships_createdAt_unique",
      uniqueType: undefined,
      dataType: "custom",
      columnType: "PgCustomColumn",
      enumValues: undefined,
      generated: undefined,
      generatedIdentity: undefined,
      config: {
        name: "createdAt",
        keyAsName: false,
        notNull: true,
        default: SQL {
          decoder: {
            mapFromDriverValue: [Function: mapFromDriverValue],
          },
          shouldInlineParams: false,
          queryChunks: [
            StringChunk {
              value: [ "now()" ],
              getSQL: [Function: getSQL],
            }
          ],
          append: [Function: append],
          toQuery: [Function: toQuery],
          buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
          mapInlineParam: [Function: mapInlineParam],
          getSQL: [Function: getSQL],
          as: [Function: as],
          mapWith: [Function: mapWith],
          inlineParams: [Function: inlineParams],
          if: [Function: if],
        },
        hasDefault: true,
        primaryKey: false,
        isUnique: false,
        uniqueName: "relationships_createdAt_unique",
        uniqueType: undefined,
        dataType: "custom",
        columnType: "PgCustomColumn",
        generated: undefined,
        fieldConfig: undefined,
        customTypeParams: {
          dataType: [Function: dataType],
          toDriver: [Function: toDriver],
          fromDriver: [Function: fromDriver],
        },
      },
      table: [Circular],
      sqlName: "timestamptz",
      mapTo: [Function: toDriver],
      mapFrom: [Function: fromDriver],
      getSQLType: [Function: getSQLType],
      mapFromDriverValue: [Function: mapFromDriverValue],
      mapToDriverValue: [Function: mapToDriverValue],
      shouldDisableInsert: [Function: shouldDisableInsert],
      getSQL: [Function],
    },
    sourceEntityId: PgUUID {
      name: "sourceEntityId",
      keyAsName: false,
      primary: false,
      notNull: true,
      default: undefined,
      defaultFn: undefined,
      onUpdateFn: undefined,
      hasDefault: false,
      isUnique: false,
      uniqueName: "relationships_sourceEntityId_unique",
      uniqueType: undefined,
      dataType: "string",
      columnType: "PgUUID",
      enumValues: undefined,
      generated: undefined,
      generatedIdentity: undefined,
      config: {
        name: "sourceEntityId",
        keyAsName: false,
        notNull: true,
        default: undefined,
        hasDefault: false,
        primaryKey: false,
        isUnique: false,
        uniqueName: "relationships_sourceEntityId_unique",
        uniqueType: undefined,
        dataType: "string",
        columnType: "PgUUID",
        generated: undefined,
      },
      table: [Circular],
      getSQLType: [Function: getSQLType],
      mapFromDriverValue: [Function: mapFromDriverValue],
      mapToDriverValue: [Function: mapToDriverValue],
      shouldDisableInsert: [Function: shouldDisableInsert],
      getSQL: [Function],
    },
    targetEntityId: PgUUID {
      name: "targetEntityId",
      keyAsName: false,
      primary: false,
      notNull: true,
      default: undefined,
      defaultFn: undefined,
      onUpdateFn: undefined,
      hasDefault: false,
      isUnique: false,
      uniqueName: "relationships_targetEntityId_unique",
      uniqueType: undefined,
      dataType: "string",
      columnType: "PgUUID",
      enumValues: undefined,
      generated: undefined,
      generatedIdentity: undefined,
      config: {
        name: "targetEntityId",
        keyAsName: false,
        notNull: true,
        default: undefined,
        hasDefault: false,
        primaryKey: false,
        isUnique: false,
        uniqueName: "relationships_targetEntityId_unique",
        uniqueType: undefined,
        dataType: "string",
        columnType: "PgUUID",
        generated: undefined,
      },
      table: [Circular],
      getSQLType: [Function: getSQLType],
      mapFromDriverValue: [Function: mapFromDriverValue],
      mapToDriverValue: [Function: mapToDriverValue],
      shouldDisableInsert: [Function: shouldDisableInsert],
      getSQL: [Function],
    },
    agentId: PgUUID {
      name: "agentId",
      keyAsName: false,
      primary: false,
      notNull: true,
      default: undefined,
      defaultFn: undefined,
      onUpdateFn: undefined,
      hasDefault: false,
      isUnique: false,
      uniqueName: "relationships_agentId_unique",
      uniqueType: undefined,
      dataType: "string",
      columnType: "PgUUID",
      enumValues: undefined,
      generated: undefined,
      generatedIdentity: undefined,
      config: {
        name: "agentId",
        keyAsName: false,
        notNull: true,
        default: undefined,
        hasDefault: false,
        primaryKey: false,
        isUnique: false,
        uniqueName: "relationships_agentId_unique",
        uniqueType: undefined,
        dataType: "string",
        columnType: "PgUUID",
        generated: undefined,
      },
      table: [Circular],
      getSQLType: [Function: getSQLType],
      mapFromDriverValue: [Function: mapFromDriverValue],
      mapToDriverValue: [Function: mapToDriverValue],
      shouldDisableInsert: [Function: shouldDisableInsert],
      getSQL: [Function],
    },
    tags: PgArray {
      name: "tags",
      keyAsName: false,
      primary: false,
      notNull: false,
      default: undefined,
      defaultFn: undefined,
      onUpdateFn: undefined,
      hasDefault: false,
      isUnique: false,
      uniqueName: "relationships_tags_unique",
      uniqueType: undefined,
      dataType: "array",
      columnType: "PgArray",
      enumValues: undefined,
      generated: undefined,
      generatedIdentity: undefined,
      config: {
        name: "tags",
        keyAsName: false,
        notNull: false,
        default: undefined,
        hasDefault: false,
        primaryKey: false,
        isUnique: false,
        uniqueName: "relationships_tags_unique",
        uniqueType: undefined,
        dataType: "array",
        columnType: "PgArray",
        generated: undefined,
        baseBuilder: PgTextBuilder {
          config: {
            name: "tags",
            keyAsName: false,
            notNull: false,
            default: undefined,
            hasDefault: false,
            primaryKey: false,
            isUnique: false,
            uniqueName: "relationships_tags_unique",
            uniqueType: undefined,
            dataType: "string",
            columnType: "PgText",
            generated: undefined,
            enumValues: undefined,
          },
          $default: [Function: $defaultFn],
          $onUpdate: [Function: $onUpdateFn],
          foreignKeyConfigs: [],
          build: [Function: build],
          array: [Function: array],
          references: [Function: references],
          unique: [Function: unique],
          generatedAlwaysAs: [Function: generatedAlwaysAs],
          buildForeignKeys: [Function: buildForeignKeys],
          buildExtraConfigColumn: [Function: buildExtraConfigColumn],
          $type: [Function: $type],
          notNull: [Function: notNull],
          default: [Function: default],
          $defaultFn: [Function: $defaultFn],
          $onUpdateFn: [Function: $onUpdateFn],
          primaryKey: [Function: primaryKey],
          setName: [Function: setName],
        },
        size: undefined,
      },
      table: [Circular],
      size: undefined,
      baseColumn: PgText {
        name: "tags",
        keyAsName: false,
        primary: false,
        notNull: false,
        default: undefined,
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: false,
        isUnique: false,
        uniqueName: "relationships_tags_unique",
        uniqueType: undefined,
        dataType: "string",
        columnType: "PgText",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "tags",
          keyAsName: false,
          notNull: false,
          default: undefined,
          hasDefault: false,
          primaryKey: false,
          isUnique: false,
          uniqueName: "relationships_tags_unique",
          uniqueType: undefined,
          dataType: "string",
          columnType: "PgText",
          generated: undefined,
          enumValues: undefined,
        },
        table: [Circular],
        getSQLType: [Function: getSQLType],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      range: undefined,
      getSQLType: [Function: getSQLType],
      mapFromDriverValue: [Function: mapFromDriverValue],
      mapToDriverValue: [Function: mapToDriverValue],
      shouldDisableInsert: [Function: shouldDisableInsert],
      getSQL: [Function],
    },
    metadata: PgJsonb {
      name: "metadata",
      keyAsName: false,
      primary: false,
      notNull: false,
      default: undefined,
      defaultFn: undefined,
      onUpdateFn: undefined,
      hasDefault: false,
      isUnique: false,
      uniqueName: "relationships_metadata_unique",
      uniqueType: undefined,
      dataType: "json",
      columnType: "PgJsonb",
      enumValues: undefined,
      generated: undefined,
      generatedIdentity: undefined,
      config: {
        name: "metadata",
        keyAsName: false,
        notNull: false,
        default: undefined,
        hasDefault: false,
        primaryKey: false,
        isUnique: false,
        uniqueName: "relationships_metadata_unique",
        uniqueType: undefined,
        dataType: "json",
        columnType: "PgJsonb",
        generated: undefined,
      },
      table: [Circular],
      getSQLType: [Function: getSQLType],
      mapToDriverValue: [Function: mapToDriverValue],
      mapFromDriverValue: [Function: mapFromDriverValue],
      shouldDisableInsert: [Function: shouldDisableInsert],
      getSQL: [Function],
    },
    enableRLS: [Function: enableRLS],
    getSQL: [Function],
  }, PgTable {
    [Symbol(drizzle:Name)]: "rooms",
    [Symbol(drizzle:OriginalName)]: "rooms",
    [Symbol(drizzle:Schema)]: undefined,
    [Symbol(drizzle:Columns)]: {
      id: PgUUID {
        name: "id",
        keyAsName: false,
        primary: true,
        notNull: true,
        default: SQL {
          decoder: {
            mapFromDriverValue: [Function: mapFromDriverValue],
          },
          shouldInlineParams: false,
          queryChunks: [
            StringChunk {
              value: [ "gen_random_uuid()" ],
              getSQL: [Function: getSQL],
            }
          ],
          append: [Function: append],
          toQuery: [Function: toQuery],
          buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
          mapInlineParam: [Function: mapInlineParam],
          getSQL: [Function: getSQL],
          as: [Function: as],
          mapWith: [Function: mapWith],
          inlineParams: [Function: inlineParams],
          if: [Function: if],
        },
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: true,
        isUnique: false,
        uniqueName: "rooms_id_unique",
        uniqueType: undefined,
        dataType: "string",
        columnType: "PgUUID",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "id",
          keyAsName: false,
          notNull: true,
          default: SQL {
            decoder: {
              mapFromDriverValue: [Function: mapFromDriverValue],
            },
            shouldInlineParams: false,
            queryChunks: [
              StringChunk {
                value: [ "gen_random_uuid()" ],
                getSQL: [Function: getSQL],
              }
            ],
            append: [Function: append],
            toQuery: [Function: toQuery],
            buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
            mapInlineParam: [Function: mapInlineParam],
            getSQL: [Function: getSQL],
            as: [Function: as],
            mapWith: [Function: mapWith],
            inlineParams: [Function: inlineParams],
            if: [Function: if],
          },
          hasDefault: true,
          primaryKey: true,
          isUnique: false,
          uniqueName: "rooms_id_unique",
          uniqueType: undefined,
          dataType: "string",
          columnType: "PgUUID",
          generated: undefined,
        },
        table: [Circular],
        getSQLType: [Function: getSQLType],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      agentId: PgUUID {
        name: "agentId",
        keyAsName: false,
        primary: false,
        notNull: false,
        default: undefined,
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: false,
        isUnique: false,
        uniqueName: "rooms_agentId_unique",
        uniqueType: undefined,
        dataType: "string",
        columnType: "PgUUID",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "agentId",
          keyAsName: false,
          notNull: false,
          default: undefined,
          hasDefault: false,
          primaryKey: false,
          isUnique: false,
          uniqueName: "rooms_agentId_unique",
          uniqueType: undefined,
          dataType: "string",
          columnType: "PgUUID",
          generated: undefined,
        },
        table: [Circular],
        getSQLType: [Function: getSQLType],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      source: PgText {
        name: "source",
        keyAsName: false,
        primary: false,
        notNull: true,
        default: undefined,
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: false,
        isUnique: false,
        uniqueName: "rooms_source_unique",
        uniqueType: undefined,
        dataType: "string",
        columnType: "PgText",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "source",
          keyAsName: false,
          notNull: true,
          default: undefined,
          hasDefault: false,
          primaryKey: false,
          isUnique: false,
          uniqueName: "rooms_source_unique",
          uniqueType: undefined,
          dataType: "string",
          columnType: "PgText",
          generated: undefined,
          enumValues: undefined,
        },
        table: [Circular],
        getSQLType: [Function: getSQLType],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      type: PgText {
        name: "type",
        keyAsName: false,
        primary: false,
        notNull: true,
        default: undefined,
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: false,
        isUnique: false,
        uniqueName: "rooms_type_unique",
        uniqueType: undefined,
        dataType: "string",
        columnType: "PgText",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "type",
          keyAsName: false,
          notNull: true,
          default: undefined,
          hasDefault: false,
          primaryKey: false,
          isUnique: false,
          uniqueName: "rooms_type_unique",
          uniqueType: undefined,
          dataType: "string",
          columnType: "PgText",
          generated: undefined,
          enumValues: undefined,
        },
        table: [Circular],
        getSQLType: [Function: getSQLType],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      serverId: PgText {
        name: "serverId",
        keyAsName: false,
        primary: false,
        notNull: false,
        default: undefined,
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: false,
        isUnique: false,
        uniqueName: "rooms_serverId_unique",
        uniqueType: undefined,
        dataType: "string",
        columnType: "PgText",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "serverId",
          keyAsName: false,
          notNull: false,
          default: undefined,
          hasDefault: false,
          primaryKey: false,
          isUnique: false,
          uniqueName: "rooms_serverId_unique",
          uniqueType: undefined,
          dataType: "string",
          columnType: "PgText",
          generated: undefined,
          enumValues: undefined,
        },
        table: [Circular],
        getSQLType: [Function: getSQLType],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      worldId: PgUUID {
        name: "worldId",
        keyAsName: false,
        primary: false,
        notNull: false,
        default: undefined,
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: false,
        isUnique: false,
        uniqueName: "rooms_worldId_unique",
        uniqueType: undefined,
        dataType: "string",
        columnType: "PgUUID",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "worldId",
          keyAsName: false,
          notNull: false,
          default: undefined,
          hasDefault: false,
          primaryKey: false,
          isUnique: false,
          uniqueName: "rooms_worldId_unique",
          uniqueType: undefined,
          dataType: "string",
          columnType: "PgUUID",
          generated: undefined,
        },
        table: [Circular],
        getSQLType: [Function: getSQLType],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      name: PgText {
        name: "name",
        keyAsName: false,
        primary: false,
        notNull: false,
        default: undefined,
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: false,
        isUnique: false,
        uniqueName: "rooms_name_unique",
        uniqueType: undefined,
        dataType: "string",
        columnType: "PgText",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "name",
          keyAsName: false,
          notNull: false,
          default: undefined,
          hasDefault: false,
          primaryKey: false,
          isUnique: false,
          uniqueName: "rooms_name_unique",
          uniqueType: undefined,
          dataType: "string",
          columnType: "PgText",
          generated: undefined,
          enumValues: undefined,
        },
        table: [Circular],
        getSQLType: [Function: getSQLType],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      metadata: PgJsonb {
        name: "metadata",
        keyAsName: false,
        primary: false,
        notNull: false,
        default: undefined,
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: false,
        isUnique: false,
        uniqueName: "rooms_metadata_unique",
        uniqueType: undefined,
        dataType: "json",
        columnType: "PgJsonb",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "metadata",
          keyAsName: false,
          notNull: false,
          default: undefined,
          hasDefault: false,
          primaryKey: false,
          isUnique: false,
          uniqueName: "rooms_metadata_unique",
          uniqueType: undefined,
          dataType: "json",
          columnType: "PgJsonb",
          generated: undefined,
        },
        table: [Circular],
        getSQLType: [Function: getSQLType],
        mapToDriverValue: [Function: mapToDriverValue],
        mapFromDriverValue: [Function: mapFromDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      channelId: PgText {
        name: "channelId",
        keyAsName: false,
        primary: false,
        notNull: false,
        default: undefined,
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: false,
        isUnique: false,
        uniqueName: "rooms_channelId_unique",
        uniqueType: undefined,
        dataType: "string",
        columnType: "PgText",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "channelId",
          keyAsName: false,
          notNull: false,
          default: undefined,
          hasDefault: false,
          primaryKey: false,
          isUnique: false,
          uniqueName: "rooms_channelId_unique",
          uniqueType: undefined,
          dataType: "string",
          columnType: "PgText",
          generated: undefined,
          enumValues: undefined,
        },
        table: [Circular],
        getSQLType: [Function: getSQLType],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      createdAt: PgCustomColumn {
        name: "createdAt",
        keyAsName: false,
        primary: false,
        notNull: true,
        default: SQL {
          decoder: {
            mapFromDriverValue: [Function: mapFromDriverValue],
          },
          shouldInlineParams: false,
          queryChunks: [
            StringChunk {
              value: [ "now()" ],
              getSQL: [Function: getSQL],
            }
          ],
          append: [Function: append],
          toQuery: [Function: toQuery],
          buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
          mapInlineParam: [Function: mapInlineParam],
          getSQL: [Function: getSQL],
          as: [Function: as],
          mapWith: [Function: mapWith],
          inlineParams: [Function: inlineParams],
          if: [Function: if],
        },
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: true,
        isUnique: false,
        uniqueName: "rooms_createdAt_unique",
        uniqueType: undefined,
        dataType: "custom",
        columnType: "PgCustomColumn",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "createdAt",
          keyAsName: false,
          notNull: true,
          default: SQL {
            decoder: {
              mapFromDriverValue: [Function: mapFromDriverValue],
            },
            shouldInlineParams: false,
            queryChunks: [
              StringChunk {
                value: [ "now()" ],
                getSQL: [Function: getSQL],
              }
            ],
            append: [Function: append],
            toQuery: [Function: toQuery],
            buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
            mapInlineParam: [Function: mapInlineParam],
            getSQL: [Function: getSQL],
            as: [Function: as],
            mapWith: [Function: mapWith],
            inlineParams: [Function: inlineParams],
            if: [Function: if],
          },
          hasDefault: true,
          primaryKey: false,
          isUnique: false,
          uniqueName: "rooms_createdAt_unique",
          uniqueType: undefined,
          dataType: "custom",
          columnType: "PgCustomColumn",
          generated: undefined,
          fieldConfig: undefined,
          customTypeParams: {
            dataType: [Function: dataType],
            toDriver: [Function: toDriver],
            fromDriver: [Function: fromDriver],
          },
        },
        table: [Circular],
        sqlName: "timestamptz",
        mapTo: [Function: toDriver],
        mapFrom: [Function: fromDriver],
        getSQLType: [Function: getSQLType],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
    },
    [Symbol(drizzle:ExtraConfigColumns)]: {
      id: ExtraConfigColumn {
        name: "id",
        keyAsName: false,
        primary: true,
        notNull: true,
        default: SQL {
          decoder: {
            mapFromDriverValue: [Function: mapFromDriverValue],
          },
          shouldInlineParams: false,
          queryChunks: [
            StringChunk {
              value: [ "gen_random_uuid()" ],
              getSQL: [Function: getSQL],
            }
          ],
          append: [Function: append],
          toQuery: [Function: toQuery],
          buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
          mapInlineParam: [Function: mapInlineParam],
          getSQL: [Function: getSQL],
          as: [Function: as],
          mapWith: [Function: mapWith],
          inlineParams: [Function: inlineParams],
          if: [Function: if],
        },
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: true,
        isUnique: false,
        uniqueName: "rooms_id_unique",
        uniqueType: undefined,
        dataType: "string",
        columnType: "PgUUID",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "id",
          keyAsName: false,
          notNull: true,
          default: SQL {
            decoder: {
              mapFromDriverValue: [Function: mapFromDriverValue],
            },
            shouldInlineParams: false,
            queryChunks: [
              StringChunk {
                value: [ "gen_random_uuid()" ],
                getSQL: [Function: getSQL],
              }
            ],
            append: [Function: append],
            toQuery: [Function: toQuery],
            buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
            mapInlineParam: [Function: mapInlineParam],
            getSQL: [Function: getSQL],
            as: [Function: as],
            mapWith: [Function: mapWith],
            inlineParams: [Function: inlineParams],
            if: [Function: if],
          },
          hasDefault: true,
          primaryKey: true,
          isUnique: false,
          uniqueName: "rooms_id_unique",
          uniqueType: undefined,
          dataType: "string",
          columnType: "PgUUID",
          generated: undefined,
        },
        table: [Circular],
        indexConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        defaultConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        getSQLType: [Function: getSQLType],
        asc: [Function: asc],
        desc: [Function: desc],
        nullsFirst: [Function: nullsFirst],
        nullsLast: [Function: nullsLast],
        op: [Function: op],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      agentId: ExtraConfigColumn {
        name: "agentId",
        keyAsName: false,
        primary: false,
        notNull: false,
        default: undefined,
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: false,
        isUnique: false,
        uniqueName: "rooms_agentId_unique",
        uniqueType: undefined,
        dataType: "string",
        columnType: "PgUUID",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "agentId",
          keyAsName: false,
          notNull: false,
          default: undefined,
          hasDefault: false,
          primaryKey: false,
          isUnique: false,
          uniqueName: "rooms_agentId_unique",
          uniqueType: undefined,
          dataType: "string",
          columnType: "PgUUID",
          generated: undefined,
        },
        table: [Circular],
        indexConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        defaultConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        getSQLType: [Function: getSQLType],
        asc: [Function: asc],
        desc: [Function: desc],
        nullsFirst: [Function: nullsFirst],
        nullsLast: [Function: nullsLast],
        op: [Function: op],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      source: ExtraConfigColumn {
        name: "source",
        keyAsName: false,
        primary: false,
        notNull: true,
        default: undefined,
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: false,
        isUnique: false,
        uniqueName: "rooms_source_unique",
        uniqueType: undefined,
        dataType: "string",
        columnType: "PgText",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "source",
          keyAsName: false,
          notNull: true,
          default: undefined,
          hasDefault: false,
          primaryKey: false,
          isUnique: false,
          uniqueName: "rooms_source_unique",
          uniqueType: undefined,
          dataType: "string",
          columnType: "PgText",
          generated: undefined,
          enumValues: undefined,
        },
        table: [Circular],
        indexConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        defaultConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        getSQLType: [Function: getSQLType],
        asc: [Function: asc],
        desc: [Function: desc],
        nullsFirst: [Function: nullsFirst],
        nullsLast: [Function: nullsLast],
        op: [Function: op],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      type: ExtraConfigColumn {
        name: "type",
        keyAsName: false,
        primary: false,
        notNull: true,
        default: undefined,
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: false,
        isUnique: false,
        uniqueName: "rooms_type_unique",
        uniqueType: undefined,
        dataType: "string",
        columnType: "PgText",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "type",
          keyAsName: false,
          notNull: true,
          default: undefined,
          hasDefault: false,
          primaryKey: false,
          isUnique: false,
          uniqueName: "rooms_type_unique",
          uniqueType: undefined,
          dataType: "string",
          columnType: "PgText",
          generated: undefined,
          enumValues: undefined,
        },
        table: [Circular],
        indexConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        defaultConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        getSQLType: [Function: getSQLType],
        asc: [Function: asc],
        desc: [Function: desc],
        nullsFirst: [Function: nullsFirst],
        nullsLast: [Function: nullsLast],
        op: [Function: op],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      serverId: ExtraConfigColumn {
        name: "serverId",
        keyAsName: false,
        primary: false,
        notNull: false,
        default: undefined,
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: false,
        isUnique: false,
        uniqueName: "rooms_serverId_unique",
        uniqueType: undefined,
        dataType: "string",
        columnType: "PgText",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "serverId",
          keyAsName: false,
          notNull: false,
          default: undefined,
          hasDefault: false,
          primaryKey: false,
          isUnique: false,
          uniqueName: "rooms_serverId_unique",
          uniqueType: undefined,
          dataType: "string",
          columnType: "PgText",
          generated: undefined,
          enumValues: undefined,
        },
        table: [Circular],
        indexConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        defaultConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        getSQLType: [Function: getSQLType],
        asc: [Function: asc],
        desc: [Function: desc],
        nullsFirst: [Function: nullsFirst],
        nullsLast: [Function: nullsLast],
        op: [Function: op],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      worldId: ExtraConfigColumn {
        name: "worldId",
        keyAsName: false,
        primary: false,
        notNull: false,
        default: undefined,
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: false,
        isUnique: false,
        uniqueName: "rooms_worldId_unique",
        uniqueType: undefined,
        dataType: "string",
        columnType: "PgUUID",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "worldId",
          keyAsName: false,
          notNull: false,
          default: undefined,
          hasDefault: false,
          primaryKey: false,
          isUnique: false,
          uniqueName: "rooms_worldId_unique",
          uniqueType: undefined,
          dataType: "string",
          columnType: "PgUUID",
          generated: undefined,
        },
        table: [Circular],
        indexConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        defaultConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        getSQLType: [Function: getSQLType],
        asc: [Function: asc],
        desc: [Function: desc],
        nullsFirst: [Function: nullsFirst],
        nullsLast: [Function: nullsLast],
        op: [Function: op],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      name: ExtraConfigColumn {
        name: "name",
        keyAsName: false,
        primary: false,
        notNull: false,
        default: undefined,
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: false,
        isUnique: false,
        uniqueName: "rooms_name_unique",
        uniqueType: undefined,
        dataType: "string",
        columnType: "PgText",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "name",
          keyAsName: false,
          notNull: false,
          default: undefined,
          hasDefault: false,
          primaryKey: false,
          isUnique: false,
          uniqueName: "rooms_name_unique",
          uniqueType: undefined,
          dataType: "string",
          columnType: "PgText",
          generated: undefined,
          enumValues: undefined,
        },
        table: [Circular],
        indexConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        defaultConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        getSQLType: [Function: getSQLType],
        asc: [Function: asc],
        desc: [Function: desc],
        nullsFirst: [Function: nullsFirst],
        nullsLast: [Function: nullsLast],
        op: [Function: op],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      metadata: ExtraConfigColumn {
        name: "metadata",
        keyAsName: false,
        primary: false,
        notNull: false,
        default: undefined,
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: false,
        isUnique: false,
        uniqueName: "rooms_metadata_unique",
        uniqueType: undefined,
        dataType: "json",
        columnType: "PgJsonb",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "metadata",
          keyAsName: false,
          notNull: false,
          default: undefined,
          hasDefault: false,
          primaryKey: false,
          isUnique: false,
          uniqueName: "rooms_metadata_unique",
          uniqueType: undefined,
          dataType: "json",
          columnType: "PgJsonb",
          generated: undefined,
        },
        table: [Circular],
        indexConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        defaultConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        getSQLType: [Function: getSQLType],
        asc: [Function: asc],
        desc: [Function: desc],
        nullsFirst: [Function: nullsFirst],
        nullsLast: [Function: nullsLast],
        op: [Function: op],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      channelId: ExtraConfigColumn {
        name: "channelId",
        keyAsName: false,
        primary: false,
        notNull: false,
        default: undefined,
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: false,
        isUnique: false,
        uniqueName: "rooms_channelId_unique",
        uniqueType: undefined,
        dataType: "string",
        columnType: "PgText",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "channelId",
          keyAsName: false,
          notNull: false,
          default: undefined,
          hasDefault: false,
          primaryKey: false,
          isUnique: false,
          uniqueName: "rooms_channelId_unique",
          uniqueType: undefined,
          dataType: "string",
          columnType: "PgText",
          generated: undefined,
          enumValues: undefined,
        },
        table: [Circular],
        indexConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        defaultConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        getSQLType: [Function: getSQLType],
        asc: [Function: asc],
        desc: [Function: desc],
        nullsFirst: [Function: nullsFirst],
        nullsLast: [Function: nullsLast],
        op: [Function: op],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      createdAt: ExtraConfigColumn {
        name: "createdAt",
        keyAsName: false,
        primary: false,
        notNull: true,
        default: SQL {
          decoder: {
            mapFromDriverValue: [Function: mapFromDriverValue],
          },
          shouldInlineParams: false,
          queryChunks: [
            StringChunk {
              value: [ "now()" ],
              getSQL: [Function: getSQL],
            }
          ],
          append: [Function: append],
          toQuery: [Function: toQuery],
          buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
          mapInlineParam: [Function: mapInlineParam],
          getSQL: [Function: getSQL],
          as: [Function: as],
          mapWith: [Function: mapWith],
          inlineParams: [Function: inlineParams],
          if: [Function: if],
        },
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: true,
        isUnique: false,
        uniqueName: "rooms_createdAt_unique",
        uniqueType: undefined,
        dataType: "custom",
        columnType: "PgCustomColumn",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "createdAt",
          keyAsName: false,
          notNull: true,
          default: SQL {
            decoder: {
              mapFromDriverValue: [Function: mapFromDriverValue],
            },
            shouldInlineParams: false,
            queryChunks: [
              StringChunk {
                value: [ "now()" ],
                getSQL: [Function: getSQL],
              }
            ],
            append: [Function: append],
            toQuery: [Function: toQuery],
            buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
            mapInlineParam: [Function: mapInlineParam],
            getSQL: [Function: getSQL],
            as: [Function: as],
            mapWith: [Function: mapWith],
            inlineParams: [Function: inlineParams],
            if: [Function: if],
          },
          hasDefault: true,
          primaryKey: false,
          isUnique: false,
          uniqueName: "rooms_createdAt_unique",
          uniqueType: undefined,
          dataType: "custom",
          columnType: "PgCustomColumn",
          generated: undefined,
          fieldConfig: undefined,
          customTypeParams: {
            dataType: [Function: dataType],
            toDriver: [Function: toDriver],
            fromDriver: [Function: fromDriver],
          },
        },
        table: [Circular],
        indexConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        defaultConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        getSQLType: [Function: getSQLType],
        asc: [Function: asc],
        desc: [Function: desc],
        nullsFirst: [Function: nullsFirst],
        nullsLast: [Function: nullsLast],
        op: [Function: op],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
    },
    [Symbol(drizzle:BaseName)]: "rooms",
    [Symbol(drizzle:IsAlias)]: false,
    [Symbol(drizzle:IsDrizzleTable)]: true,
    [Symbol(drizzle:ExtraConfigBuilder)]: undefined,
    [Symbol(drizzle:PgInlineForeignKeys)]: [
      ForeignKey {
        reference: [Function],
        onUpdate: "no action",
        onDelete: "cascade",
        table: [Circular],
        getName: [Function: getName],
      }, ForeignKey {
        reference: [Function],
        onUpdate: "no action",
        onDelete: "cascade",
        table: [Circular],
        getName: [Function: getName],
      }
    ],
    [Symbol(drizzle:EnableRLS)]: false,
    id: PgUUID {
      name: "id",
      keyAsName: false,
      primary: true,
      notNull: true,
      default: SQL {
        decoder: {
          mapFromDriverValue: [Function: mapFromDriverValue],
        },
        shouldInlineParams: false,
        queryChunks: [
          StringChunk {
            value: [ "gen_random_uuid()" ],
            getSQL: [Function: getSQL],
          }
        ],
        append: [Function: append],
        toQuery: [Function: toQuery],
        buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
        mapInlineParam: [Function: mapInlineParam],
        getSQL: [Function: getSQL],
        as: [Function: as],
        mapWith: [Function: mapWith],
        inlineParams: [Function: inlineParams],
        if: [Function: if],
      },
      defaultFn: undefined,
      onUpdateFn: undefined,
      hasDefault: true,
      isUnique: false,
      uniqueName: "rooms_id_unique",
      uniqueType: undefined,
      dataType: "string",
      columnType: "PgUUID",
      enumValues: undefined,
      generated: undefined,
      generatedIdentity: undefined,
      config: {
        name: "id",
        keyAsName: false,
        notNull: true,
        default: SQL {
          decoder: {
            mapFromDriverValue: [Function: mapFromDriverValue],
          },
          shouldInlineParams: false,
          queryChunks: [
            StringChunk {
              value: [ "gen_random_uuid()" ],
              getSQL: [Function: getSQL],
            }
          ],
          append: [Function: append],
          toQuery: [Function: toQuery],
          buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
          mapInlineParam: [Function: mapInlineParam],
          getSQL: [Function: getSQL],
          as: [Function: as],
          mapWith: [Function: mapWith],
          inlineParams: [Function: inlineParams],
          if: [Function: if],
        },
        hasDefault: true,
        primaryKey: true,
        isUnique: false,
        uniqueName: "rooms_id_unique",
        uniqueType: undefined,
        dataType: "string",
        columnType: "PgUUID",
        generated: undefined,
      },
      table: [Circular],
      getSQLType: [Function: getSQLType],
      mapFromDriverValue: [Function: mapFromDriverValue],
      mapToDriverValue: [Function: mapToDriverValue],
      shouldDisableInsert: [Function: shouldDisableInsert],
      getSQL: [Function],
    },
    agentId: PgUUID {
      name: "agentId",
      keyAsName: false,
      primary: false,
      notNull: false,
      default: undefined,
      defaultFn: undefined,
      onUpdateFn: undefined,
      hasDefault: false,
      isUnique: false,
      uniqueName: "rooms_agentId_unique",
      uniqueType: undefined,
      dataType: "string",
      columnType: "PgUUID",
      enumValues: undefined,
      generated: undefined,
      generatedIdentity: undefined,
      config: {
        name: "agentId",
        keyAsName: false,
        notNull: false,
        default: undefined,
        hasDefault: false,
        primaryKey: false,
        isUnique: false,
        uniqueName: "rooms_agentId_unique",
        uniqueType: undefined,
        dataType: "string",
        columnType: "PgUUID",
        generated: undefined,
      },
      table: [Circular],
      getSQLType: [Function: getSQLType],
      mapFromDriverValue: [Function: mapFromDriverValue],
      mapToDriverValue: [Function: mapToDriverValue],
      shouldDisableInsert: [Function: shouldDisableInsert],
      getSQL: [Function],
    },
    source: PgText {
      name: "source",
      keyAsName: false,
      primary: false,
      notNull: true,
      default: undefined,
      defaultFn: undefined,
      onUpdateFn: undefined,
      hasDefault: false,
      isUnique: false,
      uniqueName: "rooms_source_unique",
      uniqueType: undefined,
      dataType: "string",
      columnType: "PgText",
      enumValues: undefined,
      generated: undefined,
      generatedIdentity: undefined,
      config: {
        name: "source",
        keyAsName: false,
        notNull: true,
        default: undefined,
        hasDefault: false,
        primaryKey: false,
        isUnique: false,
        uniqueName: "rooms_source_unique",
        uniqueType: undefined,
        dataType: "string",
        columnType: "PgText",
        generated: undefined,
        enumValues: undefined,
      },
      table: [Circular],
      getSQLType: [Function: getSQLType],
      mapFromDriverValue: [Function: mapFromDriverValue],
      mapToDriverValue: [Function: mapToDriverValue],
      shouldDisableInsert: [Function: shouldDisableInsert],
      getSQL: [Function],
    },
    type: PgText {
      name: "type",
      keyAsName: false,
      primary: false,
      notNull: true,
      default: undefined,
      defaultFn: undefined,
      onUpdateFn: undefined,
      hasDefault: false,
      isUnique: false,
      uniqueName: "rooms_type_unique",
      uniqueType: undefined,
      dataType: "string",
      columnType: "PgText",
      enumValues: undefined,
      generated: undefined,
      generatedIdentity: undefined,
      config: {
        name: "type",
        keyAsName: false,
        notNull: true,
        default: undefined,
        hasDefault: false,
        primaryKey: false,
        isUnique: false,
        uniqueName: "rooms_type_unique",
        uniqueType: undefined,
        dataType: "string",
        columnType: "PgText",
        generated: undefined,
        enumValues: undefined,
      },
      table: [Circular],
      getSQLType: [Function: getSQLType],
      mapFromDriverValue: [Function: mapFromDriverValue],
      mapToDriverValue: [Function: mapToDriverValue],
      shouldDisableInsert: [Function: shouldDisableInsert],
      getSQL: [Function],
    },
    serverId: PgText {
      name: "serverId",
      keyAsName: false,
      primary: false,
      notNull: false,
      default: undefined,
      defaultFn: undefined,
      onUpdateFn: undefined,
      hasDefault: false,
      isUnique: false,
      uniqueName: "rooms_serverId_unique",
      uniqueType: undefined,
      dataType: "string",
      columnType: "PgText",
      enumValues: undefined,
      generated: undefined,
      generatedIdentity: undefined,
      config: {
        name: "serverId",
        keyAsName: false,
        notNull: false,
        default: undefined,
        hasDefault: false,
        primaryKey: false,
        isUnique: false,
        uniqueName: "rooms_serverId_unique",
        uniqueType: undefined,
        dataType: "string",
        columnType: "PgText",
        generated: undefined,
        enumValues: undefined,
      },
      table: [Circular],
      getSQLType: [Function: getSQLType],
      mapFromDriverValue: [Function: mapFromDriverValue],
      mapToDriverValue: [Function: mapToDriverValue],
      shouldDisableInsert: [Function: shouldDisableInsert],
      getSQL: [Function],
    },
    worldId: PgUUID {
      name: "worldId",
      keyAsName: false,
      primary: false,
      notNull: false,
      default: undefined,
      defaultFn: undefined,
      onUpdateFn: undefined,
      hasDefault: false,
      isUnique: false,
      uniqueName: "rooms_worldId_unique",
      uniqueType: undefined,
      dataType: "string",
      columnType: "PgUUID",
      enumValues: undefined,
      generated: undefined,
      generatedIdentity: undefined,
      config: {
        name: "worldId",
        keyAsName: false,
        notNull: false,
        default: undefined,
        hasDefault: false,
        primaryKey: false,
        isUnique: false,
        uniqueName: "rooms_worldId_unique",
        uniqueType: undefined,
        dataType: "string",
        columnType: "PgUUID",
        generated: undefined,
      },
      table: [Circular],
      getSQLType: [Function: getSQLType],
      mapFromDriverValue: [Function: mapFromDriverValue],
      mapToDriverValue: [Function: mapToDriverValue],
      shouldDisableInsert: [Function: shouldDisableInsert],
      getSQL: [Function],
    },
    name: PgText {
      name: "name",
      keyAsName: false,
      primary: false,
      notNull: false,
      default: undefined,
      defaultFn: undefined,
      onUpdateFn: undefined,
      hasDefault: false,
      isUnique: false,
      uniqueName: "rooms_name_unique",
      uniqueType: undefined,
      dataType: "string",
      columnType: "PgText",
      enumValues: undefined,
      generated: undefined,
      generatedIdentity: undefined,
      config: {
        name: "name",
        keyAsName: false,
        notNull: false,
        default: undefined,
        hasDefault: false,
        primaryKey: false,
        isUnique: false,
        uniqueName: "rooms_name_unique",
        uniqueType: undefined,
        dataType: "string",
        columnType: "PgText",
        generated: undefined,
        enumValues: undefined,
      },
      table: [Circular],
      getSQLType: [Function: getSQLType],
      mapFromDriverValue: [Function: mapFromDriverValue],
      mapToDriverValue: [Function: mapToDriverValue],
      shouldDisableInsert: [Function: shouldDisableInsert],
      getSQL: [Function],
    },
    metadata: PgJsonb {
      name: "metadata",
      keyAsName: false,
      primary: false,
      notNull: false,
      default: undefined,
      defaultFn: undefined,
      onUpdateFn: undefined,
      hasDefault: false,
      isUnique: false,
      uniqueName: "rooms_metadata_unique",
      uniqueType: undefined,
      dataType: "json",
      columnType: "PgJsonb",
      enumValues: undefined,
      generated: undefined,
      generatedIdentity: undefined,
      config: {
        name: "metadata",
        keyAsName: false,
        notNull: false,
        default: undefined,
        hasDefault: false,
        primaryKey: false,
        isUnique: false,
        uniqueName: "rooms_metadata_unique",
        uniqueType: undefined,
        dataType: "json",
        columnType: "PgJsonb",
        generated: undefined,
      },
      table: [Circular],
      getSQLType: [Function: getSQLType],
      mapToDriverValue: [Function: mapToDriverValue],
      mapFromDriverValue: [Function: mapFromDriverValue],
      shouldDisableInsert: [Function: shouldDisableInsert],
      getSQL: [Function],
    },
    channelId: PgText {
      name: "channelId",
      keyAsName: false,
      primary: false,
      notNull: false,
      default: undefined,
      defaultFn: undefined,
      onUpdateFn: undefined,
      hasDefault: false,
      isUnique: false,
      uniqueName: "rooms_channelId_unique",
      uniqueType: undefined,
      dataType: "string",
      columnType: "PgText",
      enumValues: undefined,
      generated: undefined,
      generatedIdentity: undefined,
      config: {
        name: "channelId",
        keyAsName: false,
        notNull: false,
        default: undefined,
        hasDefault: false,
        primaryKey: false,
        isUnique: false,
        uniqueName: "rooms_channelId_unique",
        uniqueType: undefined,
        dataType: "string",
        columnType: "PgText",
        generated: undefined,
        enumValues: undefined,
      },
      table: [Circular],
      getSQLType: [Function: getSQLType],
      mapFromDriverValue: [Function: mapFromDriverValue],
      mapToDriverValue: [Function: mapToDriverValue],
      shouldDisableInsert: [Function: shouldDisableInsert],
      getSQL: [Function],
    },
    createdAt: PgCustomColumn {
      name: "createdAt",
      keyAsName: false,
      primary: false,
      notNull: true,
      default: SQL {
        decoder: {
          mapFromDriverValue: [Function: mapFromDriverValue],
        },
        shouldInlineParams: false,
        queryChunks: [
          StringChunk {
            value: [ "now()" ],
            getSQL: [Function: getSQL],
          }
        ],
        append: [Function: append],
        toQuery: [Function: toQuery],
        buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
        mapInlineParam: [Function: mapInlineParam],
        getSQL: [Function: getSQL],
        as: [Function: as],
        mapWith: [Function: mapWith],
        inlineParams: [Function: inlineParams],
        if: [Function: if],
      },
      defaultFn: undefined,
      onUpdateFn: undefined,
      hasDefault: true,
      isUnique: false,
      uniqueName: "rooms_createdAt_unique",
      uniqueType: undefined,
      dataType: "custom",
      columnType: "PgCustomColumn",
      enumValues: undefined,
      generated: undefined,
      generatedIdentity: undefined,
      config: {
        name: "createdAt",
        keyAsName: false,
        notNull: true,
        default: SQL {
          decoder: {
            mapFromDriverValue: [Function: mapFromDriverValue],
          },
          shouldInlineParams: false,
          queryChunks: [
            StringChunk {
              value: [ "now()" ],
              getSQL: [Function: getSQL],
            }
          ],
          append: [Function: append],
          toQuery: [Function: toQuery],
          buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
          mapInlineParam: [Function: mapInlineParam],
          getSQL: [Function: getSQL],
          as: [Function: as],
          mapWith: [Function: mapWith],
          inlineParams: [Function: inlineParams],
          if: [Function: if],
        },
        hasDefault: true,
        primaryKey: false,
        isUnique: false,
        uniqueName: "rooms_createdAt_unique",
        uniqueType: undefined,
        dataType: "custom",
        columnType: "PgCustomColumn",
        generated: undefined,
        fieldConfig: undefined,
        customTypeParams: {
          dataType: [Function: dataType],
          toDriver: [Function: toDriver],
          fromDriver: [Function: fromDriver],
        },
      },
      table: [Circular],
      sqlName: "timestamptz",
      mapTo: [Function: toDriver],
      mapFrom: [Function: fromDriver],
      getSQLType: [Function: getSQLType],
      mapFromDriverValue: [Function: mapFromDriverValue],
      mapToDriverValue: [Function: mapToDriverValue],
      shouldDisableInsert: [Function: shouldDisableInsert],
      getSQL: [Function],
    },
    enableRLS: [Function: enableRLS],
    getSQL: [Function],
  }, PgTable {
    [Symbol(drizzle:Name)]: "tasks",
    [Symbol(drizzle:OriginalName)]: "tasks",
    [Symbol(drizzle:Schema)]: undefined,
    [Symbol(drizzle:Columns)]: {
      id: PgUUID {
        name: "id",
        keyAsName: false,
        primary: true,
        notNull: true,
        default: SQL {
          decoder: {
            mapFromDriverValue: [Function: mapFromDriverValue],
          },
          shouldInlineParams: false,
          queryChunks: [
            StringChunk {
              value: [ "gen_random_uuid()" ],
              getSQL: [Function: getSQL],
            }
          ],
          append: [Function: append],
          toQuery: [Function: toQuery],
          buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
          mapInlineParam: [Function: mapInlineParam],
          getSQL: [Function: getSQL],
          as: [Function: as],
          mapWith: [Function: mapWith],
          inlineParams: [Function: inlineParams],
          if: [Function: if],
        },
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: true,
        isUnique: false,
        uniqueName: "tasks_id_unique",
        uniqueType: undefined,
        dataType: "string",
        columnType: "PgUUID",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "id",
          keyAsName: false,
          notNull: true,
          default: SQL {
            decoder: {
              mapFromDriverValue: [Function: mapFromDriverValue],
            },
            shouldInlineParams: false,
            queryChunks: [
              StringChunk {
                value: [ "gen_random_uuid()" ],
                getSQL: [Function: getSQL],
              }
            ],
            append: [Function: append],
            toQuery: [Function: toQuery],
            buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
            mapInlineParam: [Function: mapInlineParam],
            getSQL: [Function: getSQL],
            as: [Function: as],
            mapWith: [Function: mapWith],
            inlineParams: [Function: inlineParams],
            if: [Function: if],
          },
          hasDefault: true,
          primaryKey: true,
          isUnique: false,
          uniqueName: "tasks_id_unique",
          uniqueType: undefined,
          dataType: "string",
          columnType: "PgUUID",
          generated: undefined,
        },
        table: [Circular],
        getSQLType: [Function: getSQLType],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      name: PgText {
        name: "name",
        keyAsName: false,
        primary: false,
        notNull: true,
        default: undefined,
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: false,
        isUnique: false,
        uniqueName: "tasks_name_unique",
        uniqueType: undefined,
        dataType: "string",
        columnType: "PgText",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "name",
          keyAsName: false,
          notNull: true,
          default: undefined,
          hasDefault: false,
          primaryKey: false,
          isUnique: false,
          uniqueName: "tasks_name_unique",
          uniqueType: undefined,
          dataType: "string",
          columnType: "PgText",
          generated: undefined,
          enumValues: undefined,
        },
        table: [Circular],
        getSQLType: [Function: getSQLType],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      description: PgText {
        name: "description",
        keyAsName: false,
        primary: false,
        notNull: true,
        default: undefined,
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: false,
        isUnique: false,
        uniqueName: "tasks_description_unique",
        uniqueType: undefined,
        dataType: "string",
        columnType: "PgText",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "description",
          keyAsName: false,
          notNull: true,
          default: undefined,
          hasDefault: false,
          primaryKey: false,
          isUnique: false,
          uniqueName: "tasks_description_unique",
          uniqueType: undefined,
          dataType: "string",
          columnType: "PgText",
          generated: undefined,
          enumValues: undefined,
        },
        table: [Circular],
        getSQLType: [Function: getSQLType],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      roomId: PgUUID {
        name: "room_id",
        keyAsName: false,
        primary: false,
        notNull: false,
        default: undefined,
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: false,
        isUnique: false,
        uniqueName: "tasks_room_id_unique",
        uniqueType: undefined,
        dataType: "string",
        columnType: "PgUUID",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "room_id",
          keyAsName: false,
          notNull: false,
          default: undefined,
          hasDefault: false,
          primaryKey: false,
          isUnique: false,
          uniqueName: "tasks_room_id_unique",
          uniqueType: undefined,
          dataType: "string",
          columnType: "PgUUID",
          generated: undefined,
        },
        table: [Circular],
        getSQLType: [Function: getSQLType],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      worldId: PgUUID {
        name: "world_id",
        keyAsName: false,
        primary: false,
        notNull: false,
        default: undefined,
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: false,
        isUnique: false,
        uniqueName: "tasks_world_id_unique",
        uniqueType: undefined,
        dataType: "string",
        columnType: "PgUUID",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "world_id",
          keyAsName: false,
          notNull: false,
          default: undefined,
          hasDefault: false,
          primaryKey: false,
          isUnique: false,
          uniqueName: "tasks_world_id_unique",
          uniqueType: undefined,
          dataType: "string",
          columnType: "PgUUID",
          generated: undefined,
        },
        table: [Circular],
        getSQLType: [Function: getSQLType],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      agentId: PgUUID {
        name: "agent_id",
        keyAsName: false,
        primary: false,
        notNull: true,
        default: undefined,
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: false,
        isUnique: false,
        uniqueName: "tasks_agent_id_unique",
        uniqueType: undefined,
        dataType: "string",
        columnType: "PgUUID",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "agent_id",
          keyAsName: false,
          notNull: true,
          default: undefined,
          hasDefault: false,
          primaryKey: false,
          isUnique: false,
          uniqueName: "tasks_agent_id_unique",
          uniqueType: undefined,
          dataType: "string",
          columnType: "PgUUID",
          generated: undefined,
        },
        table: [Circular],
        getSQLType: [Function: getSQLType],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      tags: PgArray {
        name: "tags",
        keyAsName: false,
        primary: false,
        notNull: false,
        default: undefined,
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: false,
        isUnique: false,
        uniqueName: "tasks_tags_unique",
        uniqueType: undefined,
        dataType: "array",
        columnType: "PgArray",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "tags",
          keyAsName: false,
          notNull: false,
          default: undefined,
          hasDefault: false,
          primaryKey: false,
          isUnique: false,
          uniqueName: "tasks_tags_unique",
          uniqueType: undefined,
          dataType: "array",
          columnType: "PgArray",
          generated: undefined,
          baseBuilder: PgTextBuilder {
            config: {
              name: "tags",
              keyAsName: false,
              notNull: false,
              default: undefined,
              hasDefault: false,
              primaryKey: false,
              isUnique: false,
              uniqueName: "tasks_tags_unique",
              uniqueType: undefined,
              dataType: "string",
              columnType: "PgText",
              generated: undefined,
              enumValues: undefined,
            },
            $default: [Function: $defaultFn],
            $onUpdate: [Function: $onUpdateFn],
            foreignKeyConfigs: [],
            build: [Function: build],
            array: [Function: array],
            references: [Function: references],
            unique: [Function: unique],
            generatedAlwaysAs: [Function: generatedAlwaysAs],
            buildForeignKeys: [Function: buildForeignKeys],
            buildExtraConfigColumn: [Function: buildExtraConfigColumn],
            $type: [Function: $type],
            notNull: [Function: notNull],
            default: [Function: default],
            $defaultFn: [Function: $defaultFn],
            $onUpdateFn: [Function: $onUpdateFn],
            primaryKey: [Function: primaryKey],
            setName: [Function: setName],
          },
          size: undefined,
        },
        table: [Circular],
        size: undefined,
        baseColumn: PgText {
          name: "tags",
          keyAsName: false,
          primary: false,
          notNull: false,
          default: undefined,
          defaultFn: undefined,
          onUpdateFn: undefined,
          hasDefault: false,
          isUnique: false,
          uniqueName: "tasks_tags_unique",
          uniqueType: undefined,
          dataType: "string",
          columnType: "PgText",
          enumValues: undefined,
          generated: undefined,
          generatedIdentity: undefined,
          config: {
            name: "tags",
            keyAsName: false,
            notNull: false,
            default: undefined,
            hasDefault: false,
            primaryKey: false,
            isUnique: false,
            uniqueName: "tasks_tags_unique",
            uniqueType: undefined,
            dataType: "string",
            columnType: "PgText",
            generated: undefined,
            enumValues: undefined,
          },
          table: [Circular],
          getSQLType: [Function: getSQLType],
          mapFromDriverValue: [Function: mapFromDriverValue],
          mapToDriverValue: [Function: mapToDriverValue],
          shouldDisableInsert: [Function: shouldDisableInsert],
          getSQL: [Function],
        },
        range: undefined,
        getSQLType: [Function: getSQLType],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      metadata: PgJsonb {
        name: "metadata",
        keyAsName: false,
        primary: false,
        notNull: false,
        default: undefined,
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: false,
        isUnique: false,
        uniqueName: "tasks_metadata_unique",
        uniqueType: undefined,
        dataType: "json",
        columnType: "PgJsonb",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "metadata",
          keyAsName: false,
          notNull: false,
          default: undefined,
          hasDefault: false,
          primaryKey: false,
          isUnique: false,
          uniqueName: "tasks_metadata_unique",
          uniqueType: undefined,
          dataType: "json",
          columnType: "PgJsonb",
          generated: undefined,
        },
        table: [Circular],
        getSQLType: [Function: getSQLType],
        mapToDriverValue: [Function: mapToDriverValue],
        mapFromDriverValue: [Function: mapFromDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      createdAt: PgTimestamp {
        name: "created_at",
        keyAsName: false,
        primary: false,
        notNull: false,
        default: SQL {
          decoder: {
            mapFromDriverValue: [Function: mapFromDriverValue],
          },
          shouldInlineParams: false,
          queryChunks: [
            StringChunk {
              value: [ "now()" ],
              getSQL: [Function: getSQL],
            }
          ],
          append: [Function: append],
          toQuery: [Function: toQuery],
          buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
          mapInlineParam: [Function: mapInlineParam],
          getSQL: [Function: getSQL],
          as: [Function: as],
          mapWith: [Function: mapWith],
          inlineParams: [Function: inlineParams],
          if: [Function: if],
        },
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: true,
        isUnique: false,
        uniqueName: "tasks_created_at_unique",
        uniqueType: undefined,
        dataType: "date",
        columnType: "PgTimestamp",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "created_at",
          keyAsName: false,
          notNull: false,
          default: SQL {
            decoder: {
              mapFromDriverValue: [Function: mapFromDriverValue],
            },
            shouldInlineParams: false,
            queryChunks: [
              StringChunk {
                value: [ "now()" ],
                getSQL: [Function: getSQL],
              }
            ],
            append: [Function: append],
            toQuery: [Function: toQuery],
            buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
            mapInlineParam: [Function: mapInlineParam],
            getSQL: [Function: getSQL],
            as: [Function: as],
            mapWith: [Function: mapWith],
            inlineParams: [Function: inlineParams],
            if: [Function: if],
          },
          hasDefault: true,
          primaryKey: false,
          isUnique: false,
          uniqueName: "tasks_created_at_unique",
          uniqueType: undefined,
          dataType: "date",
          columnType: "PgTimestamp",
          generated: undefined,
          withTimezone: false,
          precision: undefined,
        },
        table: [Circular],
        withTimezone: false,
        precision: undefined,
        mapFromDriverValue: [Function],
        mapToDriverValue: [Function],
        getSQLType: [Function: getSQLType],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      updatedAt: PgTimestamp {
        name: "updated_at",
        keyAsName: false,
        primary: false,
        notNull: false,
        default: SQL {
          decoder: {
            mapFromDriverValue: [Function: mapFromDriverValue],
          },
          shouldInlineParams: false,
          queryChunks: [
            StringChunk {
              value: [ "now()" ],
              getSQL: [Function: getSQL],
            }
          ],
          append: [Function: append],
          toQuery: [Function: toQuery],
          buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
          mapInlineParam: [Function: mapInlineParam],
          getSQL: [Function: getSQL],
          as: [Function: as],
          mapWith: [Function: mapWith],
          inlineParams: [Function: inlineParams],
          if: [Function: if],
        },
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: true,
        isUnique: false,
        uniqueName: "tasks_updated_at_unique",
        uniqueType: undefined,
        dataType: "date",
        columnType: "PgTimestamp",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "updated_at",
          keyAsName: false,
          notNull: false,
          default: SQL {
            decoder: {
              mapFromDriverValue: [Function: mapFromDriverValue],
            },
            shouldInlineParams: false,
            queryChunks: [
              StringChunk {
                value: [ "now()" ],
                getSQL: [Function: getSQL],
              }
            ],
            append: [Function: append],
            toQuery: [Function: toQuery],
            buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
            mapInlineParam: [Function: mapInlineParam],
            getSQL: [Function: getSQL],
            as: [Function: as],
            mapWith: [Function: mapWith],
            inlineParams: [Function: inlineParams],
            if: [Function: if],
          },
          hasDefault: true,
          primaryKey: false,
          isUnique: false,
          uniqueName: "tasks_updated_at_unique",
          uniqueType: undefined,
          dataType: "date",
          columnType: "PgTimestamp",
          generated: undefined,
          withTimezone: false,
          precision: undefined,
        },
        table: [Circular],
        withTimezone: false,
        precision: undefined,
        mapFromDriverValue: [Function],
        mapToDriverValue: [Function],
        getSQLType: [Function: getSQLType],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
    },
    [Symbol(drizzle:ExtraConfigColumns)]: {
      id: ExtraConfigColumn {
        name: "id",
        keyAsName: false,
        primary: true,
        notNull: true,
        default: SQL {
          decoder: {
            mapFromDriverValue: [Function: mapFromDriverValue],
          },
          shouldInlineParams: false,
          queryChunks: [
            StringChunk {
              value: [ "gen_random_uuid()" ],
              getSQL: [Function: getSQL],
            }
          ],
          append: [Function: append],
          toQuery: [Function: toQuery],
          buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
          mapInlineParam: [Function: mapInlineParam],
          getSQL: [Function: getSQL],
          as: [Function: as],
          mapWith: [Function: mapWith],
          inlineParams: [Function: inlineParams],
          if: [Function: if],
        },
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: true,
        isUnique: false,
        uniqueName: "tasks_id_unique",
        uniqueType: undefined,
        dataType: "string",
        columnType: "PgUUID",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "id",
          keyAsName: false,
          notNull: true,
          default: SQL {
            decoder: {
              mapFromDriverValue: [Function: mapFromDriverValue],
            },
            shouldInlineParams: false,
            queryChunks: [
              StringChunk {
                value: [ "gen_random_uuid()" ],
                getSQL: [Function: getSQL],
              }
            ],
            append: [Function: append],
            toQuery: [Function: toQuery],
            buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
            mapInlineParam: [Function: mapInlineParam],
            getSQL: [Function: getSQL],
            as: [Function: as],
            mapWith: [Function: mapWith],
            inlineParams: [Function: inlineParams],
            if: [Function: if],
          },
          hasDefault: true,
          primaryKey: true,
          isUnique: false,
          uniqueName: "tasks_id_unique",
          uniqueType: undefined,
          dataType: "string",
          columnType: "PgUUID",
          generated: undefined,
        },
        table: [Circular],
        indexConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        defaultConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        getSQLType: [Function: getSQLType],
        asc: [Function: asc],
        desc: [Function: desc],
        nullsFirst: [Function: nullsFirst],
        nullsLast: [Function: nullsLast],
        op: [Function: op],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      name: ExtraConfigColumn {
        name: "name",
        keyAsName: false,
        primary: false,
        notNull: true,
        default: undefined,
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: false,
        isUnique: false,
        uniqueName: "tasks_name_unique",
        uniqueType: undefined,
        dataType: "string",
        columnType: "PgText",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "name",
          keyAsName: false,
          notNull: true,
          default: undefined,
          hasDefault: false,
          primaryKey: false,
          isUnique: false,
          uniqueName: "tasks_name_unique",
          uniqueType: undefined,
          dataType: "string",
          columnType: "PgText",
          generated: undefined,
          enumValues: undefined,
        },
        table: [Circular],
        indexConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        defaultConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        getSQLType: [Function: getSQLType],
        asc: [Function: asc],
        desc: [Function: desc],
        nullsFirst: [Function: nullsFirst],
        nullsLast: [Function: nullsLast],
        op: [Function: op],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      description: ExtraConfigColumn {
        name: "description",
        keyAsName: false,
        primary: false,
        notNull: true,
        default: undefined,
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: false,
        isUnique: false,
        uniqueName: "tasks_description_unique",
        uniqueType: undefined,
        dataType: "string",
        columnType: "PgText",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "description",
          keyAsName: false,
          notNull: true,
          default: undefined,
          hasDefault: false,
          primaryKey: false,
          isUnique: false,
          uniqueName: "tasks_description_unique",
          uniqueType: undefined,
          dataType: "string",
          columnType: "PgText",
          generated: undefined,
          enumValues: undefined,
        },
        table: [Circular],
        indexConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        defaultConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        getSQLType: [Function: getSQLType],
        asc: [Function: asc],
        desc: [Function: desc],
        nullsFirst: [Function: nullsFirst],
        nullsLast: [Function: nullsLast],
        op: [Function: op],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      roomId: ExtraConfigColumn {
        name: "room_id",
        keyAsName: false,
        primary: false,
        notNull: false,
        default: undefined,
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: false,
        isUnique: false,
        uniqueName: "tasks_room_id_unique",
        uniqueType: undefined,
        dataType: "string",
        columnType: "PgUUID",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "room_id",
          keyAsName: false,
          notNull: false,
          default: undefined,
          hasDefault: false,
          primaryKey: false,
          isUnique: false,
          uniqueName: "tasks_room_id_unique",
          uniqueType: undefined,
          dataType: "string",
          columnType: "PgUUID",
          generated: undefined,
        },
        table: [Circular],
        indexConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        defaultConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        getSQLType: [Function: getSQLType],
        asc: [Function: asc],
        desc: [Function: desc],
        nullsFirst: [Function: nullsFirst],
        nullsLast: [Function: nullsLast],
        op: [Function: op],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      worldId: ExtraConfigColumn {
        name: "world_id",
        keyAsName: false,
        primary: false,
        notNull: false,
        default: undefined,
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: false,
        isUnique: false,
        uniqueName: "tasks_world_id_unique",
        uniqueType: undefined,
        dataType: "string",
        columnType: "PgUUID",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "world_id",
          keyAsName: false,
          notNull: false,
          default: undefined,
          hasDefault: false,
          primaryKey: false,
          isUnique: false,
          uniqueName: "tasks_world_id_unique",
          uniqueType: undefined,
          dataType: "string",
          columnType: "PgUUID",
          generated: undefined,
        },
        table: [Circular],
        indexConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        defaultConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        getSQLType: [Function: getSQLType],
        asc: [Function: asc],
        desc: [Function: desc],
        nullsFirst: [Function: nullsFirst],
        nullsLast: [Function: nullsLast],
        op: [Function: op],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      agentId: ExtraConfigColumn {
        name: "agent_id",
        keyAsName: false,
        primary: false,
        notNull: true,
        default: undefined,
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: false,
        isUnique: false,
        uniqueName: "tasks_agent_id_unique",
        uniqueType: undefined,
        dataType: "string",
        columnType: "PgUUID",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "agent_id",
          keyAsName: false,
          notNull: true,
          default: undefined,
          hasDefault: false,
          primaryKey: false,
          isUnique: false,
          uniqueName: "tasks_agent_id_unique",
          uniqueType: undefined,
          dataType: "string",
          columnType: "PgUUID",
          generated: undefined,
        },
        table: [Circular],
        indexConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        defaultConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        getSQLType: [Function: getSQLType],
        asc: [Function: asc],
        desc: [Function: desc],
        nullsFirst: [Function: nullsFirst],
        nullsLast: [Function: nullsLast],
        op: [Function: op],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      tags: ExtraConfigColumn {
        name: "tags",
        keyAsName: false,
        primary: false,
        notNull: false,
        default: undefined,
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: false,
        isUnique: false,
        uniqueName: "tasks_tags_unique",
        uniqueType: undefined,
        dataType: "array",
        columnType: "PgArray",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "tags",
          keyAsName: false,
          notNull: false,
          default: undefined,
          hasDefault: false,
          primaryKey: false,
          isUnique: false,
          uniqueName: "tasks_tags_unique",
          uniqueType: undefined,
          dataType: "array",
          columnType: "PgArray",
          generated: undefined,
          baseBuilder: PgTextBuilder {
            config: {
              name: "tags",
              keyAsName: false,
              notNull: false,
              default: undefined,
              hasDefault: false,
              primaryKey: false,
              isUnique: false,
              uniqueName: "tasks_tags_unique",
              uniqueType: undefined,
              dataType: "string",
              columnType: "PgText",
              generated: undefined,
              enumValues: undefined,
            },
            $default: [Function: $defaultFn],
            $onUpdate: [Function: $onUpdateFn],
            foreignKeyConfigs: [],
            build: [Function: build],
            array: [Function: array],
            references: [Function: references],
            unique: [Function: unique],
            generatedAlwaysAs: [Function: generatedAlwaysAs],
            buildForeignKeys: [Function: buildForeignKeys],
            buildExtraConfigColumn: [Function: buildExtraConfigColumn],
            $type: [Function: $type],
            notNull: [Function: notNull],
            default: [Function: default],
            $defaultFn: [Function: $defaultFn],
            $onUpdateFn: [Function: $onUpdateFn],
            primaryKey: [Function: primaryKey],
            setName: [Function: setName],
          },
          size: undefined,
        },
        table: [Circular],
        indexConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        defaultConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        getSQLType: [Function: getSQLType],
        asc: [Function: asc],
        desc: [Function: desc],
        nullsFirst: [Function: nullsFirst],
        nullsLast: [Function: nullsLast],
        op: [Function: op],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      metadata: ExtraConfigColumn {
        name: "metadata",
        keyAsName: false,
        primary: false,
        notNull: false,
        default: undefined,
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: false,
        isUnique: false,
        uniqueName: "tasks_metadata_unique",
        uniqueType: undefined,
        dataType: "json",
        columnType: "PgJsonb",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "metadata",
          keyAsName: false,
          notNull: false,
          default: undefined,
          hasDefault: false,
          primaryKey: false,
          isUnique: false,
          uniqueName: "tasks_metadata_unique",
          uniqueType: undefined,
          dataType: "json",
          columnType: "PgJsonb",
          generated: undefined,
        },
        table: [Circular],
        indexConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        defaultConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        getSQLType: [Function: getSQLType],
        asc: [Function: asc],
        desc: [Function: desc],
        nullsFirst: [Function: nullsFirst],
        nullsLast: [Function: nullsLast],
        op: [Function: op],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      createdAt: ExtraConfigColumn {
        name: "created_at",
        keyAsName: false,
        primary: false,
        notNull: false,
        default: SQL {
          decoder: {
            mapFromDriverValue: [Function: mapFromDriverValue],
          },
          shouldInlineParams: false,
          queryChunks: [
            StringChunk {
              value: [ "now()" ],
              getSQL: [Function: getSQL],
            }
          ],
          append: [Function: append],
          toQuery: [Function: toQuery],
          buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
          mapInlineParam: [Function: mapInlineParam],
          getSQL: [Function: getSQL],
          as: [Function: as],
          mapWith: [Function: mapWith],
          inlineParams: [Function: inlineParams],
          if: [Function: if],
        },
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: true,
        isUnique: false,
        uniqueName: "tasks_created_at_unique",
        uniqueType: undefined,
        dataType: "date",
        columnType: "PgTimestamp",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "created_at",
          keyAsName: false,
          notNull: false,
          default: SQL {
            decoder: {
              mapFromDriverValue: [Function: mapFromDriverValue],
            },
            shouldInlineParams: false,
            queryChunks: [
              StringChunk {
                value: [ "now()" ],
                getSQL: [Function: getSQL],
              }
            ],
            append: [Function: append],
            toQuery: [Function: toQuery],
            buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
            mapInlineParam: [Function: mapInlineParam],
            getSQL: [Function: getSQL],
            as: [Function: as],
            mapWith: [Function: mapWith],
            inlineParams: [Function: inlineParams],
            if: [Function: if],
          },
          hasDefault: true,
          primaryKey: false,
          isUnique: false,
          uniqueName: "tasks_created_at_unique",
          uniqueType: undefined,
          dataType: "date",
          columnType: "PgTimestamp",
          generated: undefined,
          withTimezone: false,
          precision: undefined,
        },
        table: [Circular],
        indexConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        defaultConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        getSQLType: [Function: getSQLType],
        asc: [Function: asc],
        desc: [Function: desc],
        nullsFirst: [Function: nullsFirst],
        nullsLast: [Function: nullsLast],
        op: [Function: op],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      updatedAt: ExtraConfigColumn {
        name: "updated_at",
        keyAsName: false,
        primary: false,
        notNull: false,
        default: SQL {
          decoder: {
            mapFromDriverValue: [Function: mapFromDriverValue],
          },
          shouldInlineParams: false,
          queryChunks: [
            StringChunk {
              value: [ "now()" ],
              getSQL: [Function: getSQL],
            }
          ],
          append: [Function: append],
          toQuery: [Function: toQuery],
          buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
          mapInlineParam: [Function: mapInlineParam],
          getSQL: [Function: getSQL],
          as: [Function: as],
          mapWith: [Function: mapWith],
          inlineParams: [Function: inlineParams],
          if: [Function: if],
        },
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: true,
        isUnique: false,
        uniqueName: "tasks_updated_at_unique",
        uniqueType: undefined,
        dataType: "date",
        columnType: "PgTimestamp",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "updated_at",
          keyAsName: false,
          notNull: false,
          default: SQL {
            decoder: {
              mapFromDriverValue: [Function: mapFromDriverValue],
            },
            shouldInlineParams: false,
            queryChunks: [
              StringChunk {
                value: [ "now()" ],
                getSQL: [Function: getSQL],
              }
            ],
            append: [Function: append],
            toQuery: [Function: toQuery],
            buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
            mapInlineParam: [Function: mapInlineParam],
            getSQL: [Function: getSQL],
            as: [Function: as],
            mapWith: [Function: mapWith],
            inlineParams: [Function: inlineParams],
            if: [Function: if],
          },
          hasDefault: true,
          primaryKey: false,
          isUnique: false,
          uniqueName: "tasks_updated_at_unique",
          uniqueType: undefined,
          dataType: "date",
          columnType: "PgTimestamp",
          generated: undefined,
          withTimezone: false,
          precision: undefined,
        },
        table: [Circular],
        indexConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        defaultConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        getSQLType: [Function: getSQLType],
        asc: [Function: asc],
        desc: [Function: desc],
        nullsFirst: [Function: nullsFirst],
        nullsLast: [Function: nullsLast],
        op: [Function: op],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
    },
    [Symbol(drizzle:BaseName)]: "tasks",
    [Symbol(drizzle:IsAlias)]: false,
    [Symbol(drizzle:IsDrizzleTable)]: true,
    [Symbol(drizzle:ExtraConfigBuilder)]: undefined,
    [Symbol(drizzle:PgInlineForeignKeys)]: [],
    [Symbol(drizzle:EnableRLS)]: false,
    id: PgUUID {
      name: "id",
      keyAsName: false,
      primary: true,
      notNull: true,
      default: SQL {
        decoder: {
          mapFromDriverValue: [Function: mapFromDriverValue],
        },
        shouldInlineParams: false,
        queryChunks: [
          StringChunk {
            value: [ "gen_random_uuid()" ],
            getSQL: [Function: getSQL],
          }
        ],
        append: [Function: append],
        toQuery: [Function: toQuery],
        buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
        mapInlineParam: [Function: mapInlineParam],
        getSQL: [Function: getSQL],
        as: [Function: as],
        mapWith: [Function: mapWith],
        inlineParams: [Function: inlineParams],
        if: [Function: if],
      },
      defaultFn: undefined,
      onUpdateFn: undefined,
      hasDefault: true,
      isUnique: false,
      uniqueName: "tasks_id_unique",
      uniqueType: undefined,
      dataType: "string",
      columnType: "PgUUID",
      enumValues: undefined,
      generated: undefined,
      generatedIdentity: undefined,
      config: {
        name: "id",
        keyAsName: false,
        notNull: true,
        default: SQL {
          decoder: {
            mapFromDriverValue: [Function: mapFromDriverValue],
          },
          shouldInlineParams: false,
          queryChunks: [
            StringChunk {
              value: [ "gen_random_uuid()" ],
              getSQL: [Function: getSQL],
            }
          ],
          append: [Function: append],
          toQuery: [Function: toQuery],
          buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
          mapInlineParam: [Function: mapInlineParam],
          getSQL: [Function: getSQL],
          as: [Function: as],
          mapWith: [Function: mapWith],
          inlineParams: [Function: inlineParams],
          if: [Function: if],
        },
        hasDefault: true,
        primaryKey: true,
        isUnique: false,
        uniqueName: "tasks_id_unique",
        uniqueType: undefined,
        dataType: "string",
        columnType: "PgUUID",
        generated: undefined,
      },
      table: [Circular],
      getSQLType: [Function: getSQLType],
      mapFromDriverValue: [Function: mapFromDriverValue],
      mapToDriverValue: [Function: mapToDriverValue],
      shouldDisableInsert: [Function: shouldDisableInsert],
      getSQL: [Function],
    },
    name: PgText {
      name: "name",
      keyAsName: false,
      primary: false,
      notNull: true,
      default: undefined,
      defaultFn: undefined,
      onUpdateFn: undefined,
      hasDefault: false,
      isUnique: false,
      uniqueName: "tasks_name_unique",
      uniqueType: undefined,
      dataType: "string",
      columnType: "PgText",
      enumValues: undefined,
      generated: undefined,
      generatedIdentity: undefined,
      config: {
        name: "name",
        keyAsName: false,
        notNull: true,
        default: undefined,
        hasDefault: false,
        primaryKey: false,
        isUnique: false,
        uniqueName: "tasks_name_unique",
        uniqueType: undefined,
        dataType: "string",
        columnType: "PgText",
        generated: undefined,
        enumValues: undefined,
      },
      table: [Circular],
      getSQLType: [Function: getSQLType],
      mapFromDriverValue: [Function: mapFromDriverValue],
      mapToDriverValue: [Function: mapToDriverValue],
      shouldDisableInsert: [Function: shouldDisableInsert],
      getSQL: [Function],
    },
    description: PgText {
      name: "description",
      keyAsName: false,
      primary: false,
      notNull: true,
      default: undefined,
      defaultFn: undefined,
      onUpdateFn: undefined,
      hasDefault: false,
      isUnique: false,
      uniqueName: "tasks_description_unique",
      uniqueType: undefined,
      dataType: "string",
      columnType: "PgText",
      enumValues: undefined,
      generated: undefined,
      generatedIdentity: undefined,
      config: {
        name: "description",
        keyAsName: false,
        notNull: true,
        default: undefined,
        hasDefault: false,
        primaryKey: false,
        isUnique: false,
        uniqueName: "tasks_description_unique",
        uniqueType: undefined,
        dataType: "string",
        columnType: "PgText",
        generated: undefined,
        enumValues: undefined,
      },
      table: [Circular],
      getSQLType: [Function: getSQLType],
      mapFromDriverValue: [Function: mapFromDriverValue],
      mapToDriverValue: [Function: mapToDriverValue],
      shouldDisableInsert: [Function: shouldDisableInsert],
      getSQL: [Function],
    },
    roomId: PgUUID {
      name: "room_id",
      keyAsName: false,
      primary: false,
      notNull: false,
      default: undefined,
      defaultFn: undefined,
      onUpdateFn: undefined,
      hasDefault: false,
      isUnique: false,
      uniqueName: "tasks_room_id_unique",
      uniqueType: undefined,
      dataType: "string",
      columnType: "PgUUID",
      enumValues: undefined,
      generated: undefined,
      generatedIdentity: undefined,
      config: {
        name: "room_id",
        keyAsName: false,
        notNull: false,
        default: undefined,
        hasDefault: false,
        primaryKey: false,
        isUnique: false,
        uniqueName: "tasks_room_id_unique",
        uniqueType: undefined,
        dataType: "string",
        columnType: "PgUUID",
        generated: undefined,
      },
      table: [Circular],
      getSQLType: [Function: getSQLType],
      mapFromDriverValue: [Function: mapFromDriverValue],
      mapToDriverValue: [Function: mapToDriverValue],
      shouldDisableInsert: [Function: shouldDisableInsert],
      getSQL: [Function],
    },
    worldId: PgUUID {
      name: "world_id",
      keyAsName: false,
      primary: false,
      notNull: false,
      default: undefined,
      defaultFn: undefined,
      onUpdateFn: undefined,
      hasDefault: false,
      isUnique: false,
      uniqueName: "tasks_world_id_unique",
      uniqueType: undefined,
      dataType: "string",
      columnType: "PgUUID",
      enumValues: undefined,
      generated: undefined,
      generatedIdentity: undefined,
      config: {
        name: "world_id",
        keyAsName: false,
        notNull: false,
        default: undefined,
        hasDefault: false,
        primaryKey: false,
        isUnique: false,
        uniqueName: "tasks_world_id_unique",
        uniqueType: undefined,
        dataType: "string",
        columnType: "PgUUID",
        generated: undefined,
      },
      table: [Circular],
      getSQLType: [Function: getSQLType],
      mapFromDriverValue: [Function: mapFromDriverValue],
      mapToDriverValue: [Function: mapToDriverValue],
      shouldDisableInsert: [Function: shouldDisableInsert],
      getSQL: [Function],
    },
    agentId: PgUUID {
      name: "agent_id",
      keyAsName: false,
      primary: false,
      notNull: true,
      default: undefined,
      defaultFn: undefined,
      onUpdateFn: undefined,
      hasDefault: false,
      isUnique: false,
      uniqueName: "tasks_agent_id_unique",
      uniqueType: undefined,
      dataType: "string",
      columnType: "PgUUID",
      enumValues: undefined,
      generated: undefined,
      generatedIdentity: undefined,
      config: {
        name: "agent_id",
        keyAsName: false,
        notNull: true,
        default: undefined,
        hasDefault: false,
        primaryKey: false,
        isUnique: false,
        uniqueName: "tasks_agent_id_unique",
        uniqueType: undefined,
        dataType: "string",
        columnType: "PgUUID",
        generated: undefined,
      },
      table: [Circular],
      getSQLType: [Function: getSQLType],
      mapFromDriverValue: [Function: mapFromDriverValue],
      mapToDriverValue: [Function: mapToDriverValue],
      shouldDisableInsert: [Function: shouldDisableInsert],
      getSQL: [Function],
    },
    tags: PgArray {
      name: "tags",
      keyAsName: false,
      primary: false,
      notNull: false,
      default: undefined,
      defaultFn: undefined,
      onUpdateFn: undefined,
      hasDefault: false,
      isUnique: false,
      uniqueName: "tasks_tags_unique",
      uniqueType: undefined,
      dataType: "array",
      columnType: "PgArray",
      enumValues: undefined,
      generated: undefined,
      generatedIdentity: undefined,
      config: {
        name: "tags",
        keyAsName: false,
        notNull: false,
        default: undefined,
        hasDefault: false,
        primaryKey: false,
        isUnique: false,
        uniqueName: "tasks_tags_unique",
        uniqueType: undefined,
        dataType: "array",
        columnType: "PgArray",
        generated: undefined,
        baseBuilder: PgTextBuilder {
          config: {
            name: "tags",
            keyAsName: false,
            notNull: false,
            default: undefined,
            hasDefault: false,
            primaryKey: false,
            isUnique: false,
            uniqueName: "tasks_tags_unique",
            uniqueType: undefined,
            dataType: "string",
            columnType: "PgText",
            generated: undefined,
            enumValues: undefined,
          },
          $default: [Function: $defaultFn],
          $onUpdate: [Function: $onUpdateFn],
          foreignKeyConfigs: [],
          build: [Function: build],
          array: [Function: array],
          references: [Function: references],
          unique: [Function: unique],
          generatedAlwaysAs: [Function: generatedAlwaysAs],
          buildForeignKeys: [Function: buildForeignKeys],
          buildExtraConfigColumn: [Function: buildExtraConfigColumn],
          $type: [Function: $type],
          notNull: [Function: notNull],
          default: [Function: default],
          $defaultFn: [Function: $defaultFn],
          $onUpdateFn: [Function: $onUpdateFn],
          primaryKey: [Function: primaryKey],
          setName: [Function: setName],
        },
        size: undefined,
      },
      table: [Circular],
      size: undefined,
      baseColumn: PgText {
        name: "tags",
        keyAsName: false,
        primary: false,
        notNull: false,
        default: undefined,
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: false,
        isUnique: false,
        uniqueName: "tasks_tags_unique",
        uniqueType: undefined,
        dataType: "string",
        columnType: "PgText",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "tags",
          keyAsName: false,
          notNull: false,
          default: undefined,
          hasDefault: false,
          primaryKey: false,
          isUnique: false,
          uniqueName: "tasks_tags_unique",
          uniqueType: undefined,
          dataType: "string",
          columnType: "PgText",
          generated: undefined,
          enumValues: undefined,
        },
        table: [Circular],
        getSQLType: [Function: getSQLType],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      range: undefined,
      getSQLType: [Function: getSQLType],
      mapFromDriverValue: [Function: mapFromDriverValue],
      mapToDriverValue: [Function: mapToDriverValue],
      shouldDisableInsert: [Function: shouldDisableInsert],
      getSQL: [Function],
    },
    metadata: PgJsonb {
      name: "metadata",
      keyAsName: false,
      primary: false,
      notNull: false,
      default: undefined,
      defaultFn: undefined,
      onUpdateFn: undefined,
      hasDefault: false,
      isUnique: false,
      uniqueName: "tasks_metadata_unique",
      uniqueType: undefined,
      dataType: "json",
      columnType: "PgJsonb",
      enumValues: undefined,
      generated: undefined,
      generatedIdentity: undefined,
      config: {
        name: "metadata",
        keyAsName: false,
        notNull: false,
        default: undefined,
        hasDefault: false,
        primaryKey: false,
        isUnique: false,
        uniqueName: "tasks_metadata_unique",
        uniqueType: undefined,
        dataType: "json",
        columnType: "PgJsonb",
        generated: undefined,
      },
      table: [Circular],
      getSQLType: [Function: getSQLType],
      mapToDriverValue: [Function: mapToDriverValue],
      mapFromDriverValue: [Function: mapFromDriverValue],
      shouldDisableInsert: [Function: shouldDisableInsert],
      getSQL: [Function],
    },
    createdAt: PgTimestamp {
      name: "created_at",
      keyAsName: false,
      primary: false,
      notNull: false,
      default: SQL {
        decoder: {
          mapFromDriverValue: [Function: mapFromDriverValue],
        },
        shouldInlineParams: false,
        queryChunks: [
          StringChunk {
            value: [ "now()" ],
            getSQL: [Function: getSQL],
          }
        ],
        append: [Function: append],
        toQuery: [Function: toQuery],
        buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
        mapInlineParam: [Function: mapInlineParam],
        getSQL: [Function: getSQL],
        as: [Function: as],
        mapWith: [Function: mapWith],
        inlineParams: [Function: inlineParams],
        if: [Function: if],
      },
      defaultFn: undefined,
      onUpdateFn: undefined,
      hasDefault: true,
      isUnique: false,
      uniqueName: "tasks_created_at_unique",
      uniqueType: undefined,
      dataType: "date",
      columnType: "PgTimestamp",
      enumValues: undefined,
      generated: undefined,
      generatedIdentity: undefined,
      config: {
        name: "created_at",
        keyAsName: false,
        notNull: false,
        default: SQL {
          decoder: {
            mapFromDriverValue: [Function: mapFromDriverValue],
          },
          shouldInlineParams: false,
          queryChunks: [
            StringChunk {
              value: [ "now()" ],
              getSQL: [Function: getSQL],
            }
          ],
          append: [Function: append],
          toQuery: [Function: toQuery],
          buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
          mapInlineParam: [Function: mapInlineParam],
          getSQL: [Function: getSQL],
          as: [Function: as],
          mapWith: [Function: mapWith],
          inlineParams: [Function: inlineParams],
          if: [Function: if],
        },
        hasDefault: true,
        primaryKey: false,
        isUnique: false,
        uniqueName: "tasks_created_at_unique",
        uniqueType: undefined,
        dataType: "date",
        columnType: "PgTimestamp",
        generated: undefined,
        withTimezone: false,
        precision: undefined,
      },
      table: [Circular],
      withTimezone: false,
      precision: undefined,
      mapFromDriverValue: [Function],
      mapToDriverValue: [Function],
      getSQLType: [Function: getSQLType],
      shouldDisableInsert: [Function: shouldDisableInsert],
      getSQL: [Function],
    },
    updatedAt: PgTimestamp {
      name: "updated_at",
      keyAsName: false,
      primary: false,
      notNull: false,
      default: SQL {
        decoder: {
          mapFromDriverValue: [Function: mapFromDriverValue],
        },
        shouldInlineParams: false,
        queryChunks: [
          StringChunk {
            value: [ "now()" ],
            getSQL: [Function: getSQL],
          }
        ],
        append: [Function: append],
        toQuery: [Function: toQuery],
        buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
        mapInlineParam: [Function: mapInlineParam],
        getSQL: [Function: getSQL],
        as: [Function: as],
        mapWith: [Function: mapWith],
        inlineParams: [Function: inlineParams],
        if: [Function: if],
      },
      defaultFn: undefined,
      onUpdateFn: undefined,
      hasDefault: true,
      isUnique: false,
      uniqueName: "tasks_updated_at_unique",
      uniqueType: undefined,
      dataType: "date",
      columnType: "PgTimestamp",
      enumValues: undefined,
      generated: undefined,
      generatedIdentity: undefined,
      config: {
        name: "updated_at",
        keyAsName: false,
        notNull: false,
        default: SQL {
          decoder: {
            mapFromDriverValue: [Function: mapFromDriverValue],
          },
          shouldInlineParams: false,
          queryChunks: [
            StringChunk {
              value: [ "now()" ],
              getSQL: [Function: getSQL],
            }
          ],
          append: [Function: append],
          toQuery: [Function: toQuery],
          buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
          mapInlineParam: [Function: mapInlineParam],
          getSQL: [Function: getSQL],
          as: [Function: as],
          mapWith: [Function: mapWith],
          inlineParams: [Function: inlineParams],
          if: [Function: if],
        },
        hasDefault: true,
        primaryKey: false,
        isUnique: false,
        uniqueName: "tasks_updated_at_unique",
        uniqueType: undefined,
        dataType: "date",
        columnType: "PgTimestamp",
        generated: undefined,
        withTimezone: false,
        precision: undefined,
      },
      table: [Circular],
      withTimezone: false,
      precision: undefined,
      mapFromDriverValue: [Function],
      mapToDriverValue: [Function],
      getSQLType: [Function: getSQLType],
      shouldDisableInsert: [Function: shouldDisableInsert],
      getSQL: [Function],
    },
    enableRLS: [Function: enableRLS],
    getSQL: [Function],
  }, PgTable {
    [Symbol(drizzle:Name)]: "worlds",
    [Symbol(drizzle:OriginalName)]: "worlds",
    [Symbol(drizzle:Schema)]: undefined,
    [Symbol(drizzle:Columns)]: {
      id: PgUUID {
        name: "id",
        keyAsName: false,
        primary: true,
        notNull: true,
        default: SQL {
          decoder: {
            mapFromDriverValue: [Function: mapFromDriverValue],
          },
          shouldInlineParams: false,
          queryChunks: [
            StringChunk {
              value: [ "gen_random_uuid()" ],
              getSQL: [Function: getSQL],
            }
          ],
          append: [Function: append],
          toQuery: [Function: toQuery],
          buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
          mapInlineParam: [Function: mapInlineParam],
          getSQL: [Function: getSQL],
          as: [Function: as],
          mapWith: [Function: mapWith],
          inlineParams: [Function: inlineParams],
          if: [Function: if],
        },
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: true,
        isUnique: false,
        uniqueName: "worlds_id_unique",
        uniqueType: undefined,
        dataType: "string",
        columnType: "PgUUID",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "id",
          keyAsName: false,
          notNull: true,
          default: SQL {
            decoder: {
              mapFromDriverValue: [Function: mapFromDriverValue],
            },
            shouldInlineParams: false,
            queryChunks: [
              StringChunk {
                value: [ "gen_random_uuid()" ],
                getSQL: [Function: getSQL],
              }
            ],
            append: [Function: append],
            toQuery: [Function: toQuery],
            buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
            mapInlineParam: [Function: mapInlineParam],
            getSQL: [Function: getSQL],
            as: [Function: as],
            mapWith: [Function: mapWith],
            inlineParams: [Function: inlineParams],
            if: [Function: if],
          },
          hasDefault: true,
          primaryKey: true,
          isUnique: false,
          uniqueName: "worlds_id_unique",
          uniqueType: undefined,
          dataType: "string",
          columnType: "PgUUID",
          generated: undefined,
        },
        table: [Circular],
        getSQLType: [Function: getSQLType],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      agentId: PgUUID {
        name: "agentId",
        keyAsName: false,
        primary: false,
        notNull: true,
        default: undefined,
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: false,
        isUnique: false,
        uniqueName: "worlds_agentId_unique",
        uniqueType: undefined,
        dataType: "string",
        columnType: "PgUUID",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "agentId",
          keyAsName: false,
          notNull: true,
          default: undefined,
          hasDefault: false,
          primaryKey: false,
          isUnique: false,
          uniqueName: "worlds_agentId_unique",
          uniqueType: undefined,
          dataType: "string",
          columnType: "PgUUID",
          generated: undefined,
        },
        table: [Circular],
        getSQLType: [Function: getSQLType],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      name: PgText {
        name: "name",
        keyAsName: false,
        primary: false,
        notNull: true,
        default: undefined,
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: false,
        isUnique: false,
        uniqueName: "worlds_name_unique",
        uniqueType: undefined,
        dataType: "string",
        columnType: "PgText",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "name",
          keyAsName: false,
          notNull: true,
          default: undefined,
          hasDefault: false,
          primaryKey: false,
          isUnique: false,
          uniqueName: "worlds_name_unique",
          uniqueType: undefined,
          dataType: "string",
          columnType: "PgText",
          generated: undefined,
          enumValues: undefined,
        },
        table: [Circular],
        getSQLType: [Function: getSQLType],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      metadata: PgJsonb {
        name: "metadata",
        keyAsName: false,
        primary: false,
        notNull: false,
        default: undefined,
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: false,
        isUnique: false,
        uniqueName: "worlds_metadata_unique",
        uniqueType: undefined,
        dataType: "json",
        columnType: "PgJsonb",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "metadata",
          keyAsName: false,
          notNull: false,
          default: undefined,
          hasDefault: false,
          primaryKey: false,
          isUnique: false,
          uniqueName: "worlds_metadata_unique",
          uniqueType: undefined,
          dataType: "json",
          columnType: "PgJsonb",
          generated: undefined,
        },
        table: [Circular],
        getSQLType: [Function: getSQLType],
        mapToDriverValue: [Function: mapToDriverValue],
        mapFromDriverValue: [Function: mapFromDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      serverId: PgText {
        name: "serverId",
        keyAsName: false,
        primary: false,
        notNull: true,
        default: undefined,
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: false,
        isUnique: false,
        uniqueName: "worlds_serverId_unique",
        uniqueType: undefined,
        dataType: "string",
        columnType: "PgText",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "serverId",
          keyAsName: false,
          notNull: true,
          default: undefined,
          hasDefault: false,
          primaryKey: false,
          isUnique: false,
          uniqueName: "worlds_serverId_unique",
          uniqueType: undefined,
          dataType: "string",
          columnType: "PgText",
          generated: undefined,
          enumValues: undefined,
        },
        table: [Circular],
        getSQLType: [Function: getSQLType],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      createdAt: PgCustomColumn {
        name: "createdAt",
        keyAsName: false,
        primary: false,
        notNull: true,
        default: SQL {
          decoder: {
            mapFromDriverValue: [Function: mapFromDriverValue],
          },
          shouldInlineParams: false,
          queryChunks: [
            StringChunk {
              value: [ "now()" ],
              getSQL: [Function: getSQL],
            }
          ],
          append: [Function: append],
          toQuery: [Function: toQuery],
          buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
          mapInlineParam: [Function: mapInlineParam],
          getSQL: [Function: getSQL],
          as: [Function: as],
          mapWith: [Function: mapWith],
          inlineParams: [Function: inlineParams],
          if: [Function: if],
        },
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: true,
        isUnique: false,
        uniqueName: "worlds_createdAt_unique",
        uniqueType: undefined,
        dataType: "custom",
        columnType: "PgCustomColumn",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "createdAt",
          keyAsName: false,
          notNull: true,
          default: SQL {
            decoder: {
              mapFromDriverValue: [Function: mapFromDriverValue],
            },
            shouldInlineParams: false,
            queryChunks: [
              StringChunk {
                value: [ "now()" ],
                getSQL: [Function: getSQL],
              }
            ],
            append: [Function: append],
            toQuery: [Function: toQuery],
            buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
            mapInlineParam: [Function: mapInlineParam],
            getSQL: [Function: getSQL],
            as: [Function: as],
            mapWith: [Function: mapWith],
            inlineParams: [Function: inlineParams],
            if: [Function: if],
          },
          hasDefault: true,
          primaryKey: false,
          isUnique: false,
          uniqueName: "worlds_createdAt_unique",
          uniqueType: undefined,
          dataType: "custom",
          columnType: "PgCustomColumn",
          generated: undefined,
          fieldConfig: undefined,
          customTypeParams: {
            dataType: [Function: dataType],
            toDriver: [Function: toDriver],
            fromDriver: [Function: fromDriver],
          },
        },
        table: [Circular],
        sqlName: "timestamptz",
        mapTo: [Function: toDriver],
        mapFrom: [Function: fromDriver],
        getSQLType: [Function: getSQLType],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
    },
    [Symbol(drizzle:ExtraConfigColumns)]: {
      id: ExtraConfigColumn {
        name: "id",
        keyAsName: false,
        primary: true,
        notNull: true,
        default: SQL {
          decoder: {
            mapFromDriverValue: [Function: mapFromDriverValue],
          },
          shouldInlineParams: false,
          queryChunks: [
            StringChunk {
              value: [ "gen_random_uuid()" ],
              getSQL: [Function: getSQL],
            }
          ],
          append: [Function: append],
          toQuery: [Function: toQuery],
          buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
          mapInlineParam: [Function: mapInlineParam],
          getSQL: [Function: getSQL],
          as: [Function: as],
          mapWith: [Function: mapWith],
          inlineParams: [Function: inlineParams],
          if: [Function: if],
        },
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: true,
        isUnique: false,
        uniqueName: "worlds_id_unique",
        uniqueType: undefined,
        dataType: "string",
        columnType: "PgUUID",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "id",
          keyAsName: false,
          notNull: true,
          default: SQL {
            decoder: {
              mapFromDriverValue: [Function: mapFromDriverValue],
            },
            shouldInlineParams: false,
            queryChunks: [
              StringChunk {
                value: [ "gen_random_uuid()" ],
                getSQL: [Function: getSQL],
              }
            ],
            append: [Function: append],
            toQuery: [Function: toQuery],
            buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
            mapInlineParam: [Function: mapInlineParam],
            getSQL: [Function: getSQL],
            as: [Function: as],
            mapWith: [Function: mapWith],
            inlineParams: [Function: inlineParams],
            if: [Function: if],
          },
          hasDefault: true,
          primaryKey: true,
          isUnique: false,
          uniqueName: "worlds_id_unique",
          uniqueType: undefined,
          dataType: "string",
          columnType: "PgUUID",
          generated: undefined,
        },
        table: [Circular],
        indexConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        defaultConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        getSQLType: [Function: getSQLType],
        asc: [Function: asc],
        desc: [Function: desc],
        nullsFirst: [Function: nullsFirst],
        nullsLast: [Function: nullsLast],
        op: [Function: op],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      agentId: ExtraConfigColumn {
        name: "agentId",
        keyAsName: false,
        primary: false,
        notNull: true,
        default: undefined,
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: false,
        isUnique: false,
        uniqueName: "worlds_agentId_unique",
        uniqueType: undefined,
        dataType: "string",
        columnType: "PgUUID",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "agentId",
          keyAsName: false,
          notNull: true,
          default: undefined,
          hasDefault: false,
          primaryKey: false,
          isUnique: false,
          uniqueName: "worlds_agentId_unique",
          uniqueType: undefined,
          dataType: "string",
          columnType: "PgUUID",
          generated: undefined,
        },
        table: [Circular],
        indexConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        defaultConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        getSQLType: [Function: getSQLType],
        asc: [Function: asc],
        desc: [Function: desc],
        nullsFirst: [Function: nullsFirst],
        nullsLast: [Function: nullsLast],
        op: [Function: op],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      name: ExtraConfigColumn {
        name: "name",
        keyAsName: false,
        primary: false,
        notNull: true,
        default: undefined,
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: false,
        isUnique: false,
        uniqueName: "worlds_name_unique",
        uniqueType: undefined,
        dataType: "string",
        columnType: "PgText",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "name",
          keyAsName: false,
          notNull: true,
          default: undefined,
          hasDefault: false,
          primaryKey: false,
          isUnique: false,
          uniqueName: "worlds_name_unique",
          uniqueType: undefined,
          dataType: "string",
          columnType: "PgText",
          generated: undefined,
          enumValues: undefined,
        },
        table: [Circular],
        indexConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        defaultConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        getSQLType: [Function: getSQLType],
        asc: [Function: asc],
        desc: [Function: desc],
        nullsFirst: [Function: nullsFirst],
        nullsLast: [Function: nullsLast],
        op: [Function: op],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      metadata: ExtraConfigColumn {
        name: "metadata",
        keyAsName: false,
        primary: false,
        notNull: false,
        default: undefined,
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: false,
        isUnique: false,
        uniqueName: "worlds_metadata_unique",
        uniqueType: undefined,
        dataType: "json",
        columnType: "PgJsonb",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "metadata",
          keyAsName: false,
          notNull: false,
          default: undefined,
          hasDefault: false,
          primaryKey: false,
          isUnique: false,
          uniqueName: "worlds_metadata_unique",
          uniqueType: undefined,
          dataType: "json",
          columnType: "PgJsonb",
          generated: undefined,
        },
        table: [Circular],
        indexConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        defaultConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        getSQLType: [Function: getSQLType],
        asc: [Function: asc],
        desc: [Function: desc],
        nullsFirst: [Function: nullsFirst],
        nullsLast: [Function: nullsLast],
        op: [Function: op],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      serverId: ExtraConfigColumn {
        name: "serverId",
        keyAsName: false,
        primary: false,
        notNull: true,
        default: undefined,
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: false,
        isUnique: false,
        uniqueName: "worlds_serverId_unique",
        uniqueType: undefined,
        dataType: "string",
        columnType: "PgText",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "serverId",
          keyAsName: false,
          notNull: true,
          default: undefined,
          hasDefault: false,
          primaryKey: false,
          isUnique: false,
          uniqueName: "worlds_serverId_unique",
          uniqueType: undefined,
          dataType: "string",
          columnType: "PgText",
          generated: undefined,
          enumValues: undefined,
        },
        table: [Circular],
        indexConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        defaultConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        getSQLType: [Function: getSQLType],
        asc: [Function: asc],
        desc: [Function: desc],
        nullsFirst: [Function: nullsFirst],
        nullsLast: [Function: nullsLast],
        op: [Function: op],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
      createdAt: ExtraConfigColumn {
        name: "createdAt",
        keyAsName: false,
        primary: false,
        notNull: true,
        default: SQL {
          decoder: {
            mapFromDriverValue: [Function: mapFromDriverValue],
          },
          shouldInlineParams: false,
          queryChunks: [
            StringChunk {
              value: [ "now()" ],
              getSQL: [Function: getSQL],
            }
          ],
          append: [Function: append],
          toQuery: [Function: toQuery],
          buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
          mapInlineParam: [Function: mapInlineParam],
          getSQL: [Function: getSQL],
          as: [Function: as],
          mapWith: [Function: mapWith],
          inlineParams: [Function: inlineParams],
          if: [Function: if],
        },
        defaultFn: undefined,
        onUpdateFn: undefined,
        hasDefault: true,
        isUnique: false,
        uniqueName: "worlds_createdAt_unique",
        uniqueType: undefined,
        dataType: "custom",
        columnType: "PgCustomColumn",
        enumValues: undefined,
        generated: undefined,
        generatedIdentity: undefined,
        config: {
          name: "createdAt",
          keyAsName: false,
          notNull: true,
          default: SQL {
            decoder: {
              mapFromDriverValue: [Function: mapFromDriverValue],
            },
            shouldInlineParams: false,
            queryChunks: [
              StringChunk {
                value: [ "now()" ],
                getSQL: [Function: getSQL],
              }
            ],
            append: [Function: append],
            toQuery: [Function: toQuery],
            buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
            mapInlineParam: [Function: mapInlineParam],
            getSQL: [Function: getSQL],
            as: [Function: as],
            mapWith: [Function: mapWith],
            inlineParams: [Function: inlineParams],
            if: [Function: if],
          },
          hasDefault: true,
          primaryKey: false,
          isUnique: false,
          uniqueName: "worlds_createdAt_unique",
          uniqueType: undefined,
          dataType: "custom",
          columnType: "PgCustomColumn",
          generated: undefined,
          fieldConfig: undefined,
          customTypeParams: {
            dataType: [Function: dataType],
            toDriver: [Function: toDriver],
            fromDriver: [Function: fromDriver],
          },
        },
        table: [Circular],
        indexConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        defaultConfig: {
          order: "asc",
          nulls: "last",
          opClass: undefined,
        },
        getSQLType: [Function: getSQLType],
        asc: [Function: asc],
        desc: [Function: desc],
        nullsFirst: [Function: nullsFirst],
        nullsLast: [Function: nullsLast],
        op: [Function: op],
        mapFromDriverValue: [Function: mapFromDriverValue],
        mapToDriverValue: [Function: mapToDriverValue],
        shouldDisableInsert: [Function: shouldDisableInsert],
        getSQL: [Function],
      },
    },
    [Symbol(drizzle:BaseName)]: "worlds",
    [Symbol(drizzle:IsAlias)]: false,
    [Symbol(drizzle:IsDrizzleTable)]: true,
    [Symbol(drizzle:ExtraConfigBuilder)]: undefined,
    [Symbol(drizzle:PgInlineForeignKeys)]: [
      ForeignKey {
        reference: [Function],
        onUpdate: "no action",
        onDelete: "cascade",
        table: [Circular],
        getName: [Function: getName],
      }
    ],
    [Symbol(drizzle:EnableRLS)]: false,
    id: PgUUID {
      name: "id",
      keyAsName: false,
      primary: true,
      notNull: true,
      default: SQL {
        decoder: {
          mapFromDriverValue: [Function: mapFromDriverValue],
        },
        shouldInlineParams: false,
        queryChunks: [
          StringChunk {
            value: [ "gen_random_uuid()" ],
            getSQL: [Function: getSQL],
          }
        ],
        append: [Function: append],
        toQuery: [Function: toQuery],
        buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
        mapInlineParam: [Function: mapInlineParam],
        getSQL: [Function: getSQL],
        as: [Function: as],
        mapWith: [Function: mapWith],
        inlineParams: [Function: inlineParams],
        if: [Function: if],
      },
      defaultFn: undefined,
      onUpdateFn: undefined,
      hasDefault: true,
      isUnique: false,
      uniqueName: "worlds_id_unique",
      uniqueType: undefined,
      dataType: "string",
      columnType: "PgUUID",
      enumValues: undefined,
      generated: undefined,
      generatedIdentity: undefined,
      config: {
        name: "id",
        keyAsName: false,
        notNull: true,
        default: SQL {
          decoder: {
            mapFromDriverValue: [Function: mapFromDriverValue],
          },
          shouldInlineParams: false,
          queryChunks: [
            StringChunk {
              value: [ "gen_random_uuid()" ],
              getSQL: [Function: getSQL],
            }
          ],
          append: [Function: append],
          toQuery: [Function: toQuery],
          buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
          mapInlineParam: [Function: mapInlineParam],
          getSQL: [Function: getSQL],
          as: [Function: as],
          mapWith: [Function: mapWith],
          inlineParams: [Function: inlineParams],
          if: [Function: if],
        },
        hasDefault: true,
        primaryKey: true,
        isUnique: false,
        uniqueName: "worlds_id_unique",
        uniqueType: undefined,
        dataType: "string",
        columnType: "PgUUID",
        generated: undefined,
      },
      table: [Circular],
      getSQLType: [Function: getSQLType],
      mapFromDriverValue: [Function: mapFromDriverValue],
      mapToDriverValue: [Function: mapToDriverValue],
      shouldDisableInsert: [Function: shouldDisableInsert],
      getSQL: [Function],
    },
    agentId: PgUUID {
      name: "agentId",
      keyAsName: false,
      primary: false,
      notNull: true,
      default: undefined,
      defaultFn: undefined,
      onUpdateFn: undefined,
      hasDefault: false,
      isUnique: false,
      uniqueName: "worlds_agentId_unique",
      uniqueType: undefined,
      dataType: "string",
      columnType: "PgUUID",
      enumValues: undefined,
      generated: undefined,
      generatedIdentity: undefined,
      config: {
        name: "agentId",
        keyAsName: false,
        notNull: true,
        default: undefined,
        hasDefault: false,
        primaryKey: false,
        isUnique: false,
        uniqueName: "worlds_agentId_unique",
        uniqueType: undefined,
        dataType: "string",
        columnType: "PgUUID",
        generated: undefined,
      },
      table: [Circular],
      getSQLType: [Function: getSQLType],
      mapFromDriverValue: [Function: mapFromDriverValue],
      mapToDriverValue: [Function: mapToDriverValue],
      shouldDisableInsert: [Function: shouldDisableInsert],
      getSQL: [Function],
    },
    name: PgText {
      name: "name",
      keyAsName: false,
      primary: false,
      notNull: true,
      default: undefined,
      defaultFn: undefined,
      onUpdateFn: undefined,
      hasDefault: false,
      isUnique: false,
      uniqueName: "worlds_name_unique",
      uniqueType: undefined,
      dataType: "string",
      columnType: "PgText",
      enumValues: undefined,
      generated: undefined,
      generatedIdentity: undefined,
      config: {
        name: "name",
        keyAsName: false,
        notNull: true,
        default: undefined,
        hasDefault: false,
        primaryKey: false,
        isUnique: false,
        uniqueName: "worlds_name_unique",
        uniqueType: undefined,
        dataType: "string",
        columnType: "PgText",
        generated: undefined,
        enumValues: undefined,
      },
      table: [Circular],
      getSQLType: [Function: getSQLType],
      mapFromDriverValue: [Function: mapFromDriverValue],
      mapToDriverValue: [Function: mapToDriverValue],
      shouldDisableInsert: [Function: shouldDisableInsert],
      getSQL: [Function],
    },
    metadata: PgJsonb {
      name: "metadata",
      keyAsName: false,
      primary: false,
      notNull: false,
      default: undefined,
      defaultFn: undefined,
      onUpdateFn: undefined,
      hasDefault: false,
      isUnique: false,
      uniqueName: "worlds_metadata_unique",
      uniqueType: undefined,
      dataType: "json",
      columnType: "PgJsonb",
      enumValues: undefined,
      generated: undefined,
      generatedIdentity: undefined,
      config: {
        name: "metadata",
        keyAsName: false,
        notNull: false,
        default: undefined,
        hasDefault: false,
        primaryKey: false,
        isUnique: false,
        uniqueName: "worlds_metadata_unique",
        uniqueType: undefined,
        dataType: "json",
        columnType: "PgJsonb",
        generated: undefined,
      },
      table: [Circular],
      getSQLType: [Function: getSQLType],
      mapToDriverValue: [Function: mapToDriverValue],
      mapFromDriverValue: [Function: mapFromDriverValue],
      shouldDisableInsert: [Function: shouldDisableInsert],
      getSQL: [Function],
    },
    serverId: PgText {
      name: "serverId",
      keyAsName: false,
      primary: false,
      notNull: true,
      default: undefined,
      defaultFn: undefined,
      onUpdateFn: undefined,
      hasDefault: false,
      isUnique: false,
      uniqueName: "worlds_serverId_unique",
      uniqueType: undefined,
      dataType: "string",
      columnType: "PgText",
      enumValues: undefined,
      generated: undefined,
      generatedIdentity: undefined,
      config: {
        name: "serverId",
        keyAsName: false,
        notNull: true,
        default: undefined,
        hasDefault: false,
        primaryKey: false,
        isUnique: false,
        uniqueName: "worlds_serverId_unique",
        uniqueType: undefined,
        dataType: "string",
        columnType: "PgText",
        generated: undefined,
        enumValues: undefined,
      },
      table: [Circular],
      getSQLType: [Function: getSQLType],
      mapFromDriverValue: [Function: mapFromDriverValue],
      mapToDriverValue: [Function: mapToDriverValue],
      shouldDisableInsert: [Function: shouldDisableInsert],
      getSQL: [Function],
    },
    createdAt: PgCustomColumn {
      name: "createdAt",
      keyAsName: false,
      primary: false,
      notNull: true,
      default: SQL {
        decoder: {
          mapFromDriverValue: [Function: mapFromDriverValue],
        },
        shouldInlineParams: false,
        queryChunks: [
          StringChunk {
            value: [ "now()" ],
            getSQL: [Function: getSQL],
          }
        ],
        append: [Function: append],
        toQuery: [Function: toQuery],
        buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
        mapInlineParam: [Function: mapInlineParam],
        getSQL: [Function: getSQL],
        as: [Function: as],
        mapWith: [Function: mapWith],
        inlineParams: [Function: inlineParams],
        if: [Function: if],
      },
      defaultFn: undefined,
      onUpdateFn: undefined,
      hasDefault: true,
      isUnique: false,
      uniqueName: "worlds_createdAt_unique",
      uniqueType: undefined,
      dataType: "custom",
      columnType: "PgCustomColumn",
      enumValues: undefined,
      generated: undefined,
      generatedIdentity: undefined,
      config: {
        name: "createdAt",
        keyAsName: false,
        notNull: true,
        default: SQL {
          decoder: {
            mapFromDriverValue: [Function: mapFromDriverValue],
          },
          shouldInlineParams: false,
          queryChunks: [
            StringChunk {
              value: [ "now()" ],
              getSQL: [Function: getSQL],
            }
          ],
          append: [Function: append],
          toQuery: [Function: toQuery],
          buildQueryFromSourceParams: [Function: buildQueryFromSourceParams],
          mapInlineParam: [Function: mapInlineParam],
          getSQL: [Function: getSQL],
          as: [Function: as],
          mapWith: [Function: mapWith],
          inlineParams: [Function: inlineParams],
          if: [Function: if],
        },
        hasDefault: true,
        primaryKey: false,
        isUnique: false,
        uniqueName: "worlds_createdAt_unique",
        uniqueType: undefined,
        dataType: "custom",
        columnType: "PgCustomColumn",
        generated: undefined,
        fieldConfig: undefined,
        customTypeParams: {
          dataType: [Function: dataType],
          toDriver: [Function: toDriver],
          fromDriver: [Function: fromDriver],
        },
      },
      table: [Circular],
      sqlName: "timestamptz",
      mapTo: [Function: toDriver],
      mapFrom: [Function: fromDriver],
      getSQLType: [Function: getSQLType],
      mapFromDriverValue: [Function: mapFromDriverValue],
      mapToDriverValue: [Function: mapToDriverValue],
      shouldDisableInsert: [Function: shouldDisableInsert],
      getSQL: [Function],
    },
    enableRLS: [Function: enableRLS],
    getSQL: [Function],
  }
]
undefined
JSON {"inputArgs":["Starting graceful shutdown of PGlite client..."]}
JSON {"inputArgs":["PGlite client shutdown completed successfully"]}
